dplyr::select(-c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF"))
# add the new imputed genes to the data
hm_selection_g <- cbind(hm_selection_g, complete_genes)
stripplot(igf, pch = 20, cex = 1.2)
densityplot(igf, height = 1000, width = 800)
library(mice)
library(tidyr)
library(tidyverse)
library(VIM)
library(fitdistrplus)
library(fitur)
library(visdat)
setwd("~/GitHub/Eimeria_mouse_immunity/")
hm <- read.csv("output_data/1.MICE_cleaned_data.csv")
# Vectors for selecting genes
#Lab genes
# The measurements of IL.12 and IRG6 are done with an other assay and will
#ignore for now
Gene_lab   <- c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF") #"IL.12", "IRG6")
Genes_wild   <- c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF") #, "IL.12", "IRG6")
Facs_lab <- c("CD4", "Treg", "Div_Treg", "Treg17", "Th1",
"Div_Th1", "Th17", "Div_Th17", "CD8", "Act_CD8",
"Div_Act_CD8", "IFNy_CD4", "IFNy_CD8","Treg_prop",
"IL17A_CD4")
Facs_wild <- c( "Treg", "CD4", "Treg17", "Th1", "Th17", "CD8")
# data imputation
# Genes
field <- hm %>%
dplyr::filter(origin == "Field")
field <- unique(field)
genes_mouse_field <- field %>%
dplyr::select(c(Mouse_ID, all_of(Genes_wild)))
genes <- genes_mouse_field  %>%
dplyr::select(-Mouse_ID)
#remove rows with only nas
genes <- genes[,colSums(is.na(genes))<nrow(genes)]
#remove colums with only nas
genes <- genes[rowSums(is.na(genes)) != ncol(genes), ]
genes_mouse_field <- genes_mouse_field[row.names(genes), ]
##select same rows in the first table
field <- field[row.names(genes), ]
###############lab
#select the genes and lab muce
lab <- hm %>%
dplyr::filter(origin == "Lab", Position == "mLN") #selecting for mln to avoid
# duplicates
lab <- unique(lab)
gene_lab_mouse <- lab %>%
dplyr::select(c(Mouse_ID, all_of(Gene_lab)))
gene_lab_mouse <- unique(gene_lab_mouse)
genes_lab <- gene_lab_mouse[, -1]
#remove rows with only nas
genes_lab <- genes_lab[,colSums(is.na(genes_lab))<nrow(genes_lab)]
#remove colums with only nas
genes_lab <- genes_lab[rowSums(is.na(genes_lab)) != ncol(genes_lab), ]
genes_lab <- unique(genes_lab)
#select same rows in the first table
gene_lab_mouse <- gene_lab_mouse[row.names(genes_lab), ]
##select same rows in the first table
lab <- lab[row.names(genes_lab), ]
hm_genes <- rbind(gene_lab_mouse, genes_mouse_field)
hm_selection_g <- rbind(lab, field)
glimpse(hm_genes)
genes <- hm_genes %>%
dplyr::select(-Mouse_ID)
#had to remove as they were disturbing the imputation: Worms_presence, MC.Eimeria.FEC,  Heligmosomoides_polygurus, Zfy2, Y,  MpiC,
#vis_miss(field)
# The frequency distribution of the missing cases per variable can be obtained
# as:
init <- mice(genes, maxit = 0)
# m=5 refers to the number of imputed datasets. Five is the default value.
igf <- mice(genes, m = 5, seed = 500) # method = meth,
summary(igf)
densityplot(igf, height = 1000, width = 800)
stripplot(igf, pch = 20, cex = 1.2)
stripplot(igf, pch = 20, cex = 1.2)
knitr::opts_chunk$set(echo = TRUE)
# install libraries
library(dplyr)
library(XML)
library(methods)
library(plyr)
library(readr)
library(ggplot2)
#read tsv table
David <- read_tsv("~/GitHub/Namibia_project/Data/Nanodrop_measurements/David_Nanodrop_DNA-Extractions.tsv")
# remove ffirst column
David <-  David[,-1]
#add column sample type
David <- David %>%
mutate(animal = "David")
#change the column names
write.csv(David,
"~/GitHub/Namibia_project/Data/Nanodrop_measurements/CSV/David.csv",
row.names = FALSE)
#read tsv table
Duppel_1 <- read_tsv("~/GitHub/Namibia_project/Data/Nanodrop_measurements/Düppel_26022023_2.tsv")
# remove ffirst column
Duppel_1 <-  Duppel_1[,-1]
#change the column names
write.csv(Duppel_1,
"~/GitHub/Namibia_project/Data/Nanodrop_measurements/CSV/Düppel_26022023.csv",
row.names = FALSE)
#read tsv table
Rodent_1 <- read_tsv("~/GitHub/Namibia_project/Data/Nanodrop_measurements/Rodents_26032023.tsv")
Rodent_2 <- read_tsv("~/GitHub/Namibia_project/Data/Nanodrop_measurements/Rodents_27032023.tsv")
#combine the measuerements
Rodent <- rbind(Rodent_1,Rodent_2)
# remove first column
Rodent <-  Rodent[,-1]
#change the column names
write.csv(Rodent_1,
"~/GitHub/Namibia_project/Data/Nanodrop_measurements/CSV/Rodents_26032023.csv",
row.names = FALSE)
Nanodrop <- rbind(Duppel_1, Rodent)
# remove spaces
colnames(Nanodrop) <- gsub(" ", "_", colnames(Nanodrop))
Nanodrop <- Nanodrop %>%
dplyr::rename(Quality_260_280 = '260/280',
Quality_260_230 = '260/230')
ggplot(Nanodrop, aes(x = Nucleic_Acid, y = Quality_260_280)) +
geom_jitter() +
labs(x = "Concentration of DNA in ng/µl", y = "Quality of DNA 260/280 ratio",
title = "Assessing quality of DNA with Nanodrop")
ggplot(Nanodrop %>%
filter(Quality_260_280 < 2.5,  Quality_260_280 > 1.5 ),
aes(x = Nucleic_Acid, y = Quality_260_280)) +
geom_jitter() +
labs(x = "Concentration of DNA in ng/µl", y = "Quality of DNA",
title = "Assessing quality of DNA with Nanodrop")
ggplot(Nanodrop,
aes(x = Nucleic_Acid, y = Quality_260_230)) +
geom_jitter() +
labs(x = "Concentration of DNA in ng/µl", y = "Quality of DNA, 260/230",
title = "Assessing quality of DNA with Nanodrop")
ggplot(Nanodrop %>% filter(Quality_260_230 < 60),
aes(x = Nucleic_Acid, y = Quality_260_230)) +
geom_jitter() +
labs(x = "Concentration of DNA in ng/µl", y = "Quality of DNA, 260/230",
title = "Assessing quality of DNA with Nanodrop")
ggplot(Nanodrop %>%
filter(Quality_260_230 < 2.5, Quality_260_230 > 1.8),
aes(x = Nucleic_Acid, y = Quality_260_230)) +
geom_jitter() +
labs(x = "Concentration of DNA in ng/µl", y = "Quality of DNA, 260/230",
title = "Assessing quality of DNA with Nanodrop")
Nanodrop %>%
filter( Quality_260_280 < 2.5,  Quality_260_280 > 1.5 )
# Read the two dataframes
setwd("Z:/home/shared/MITCH/motility/REP1/Plate 1 230427_131640_IMM Session/Plate_1_test/")
Mitch_results <- read.csv("Other_counts/Rep_1_Mitch_macro.csv")
Fay_results <- read.csv("")
# Read the two dataframes
setwd("~")
Fay_results <- read.csv("Z:/home/shared/MITCH/motility/REP1/Plate 1 230427_131640_IMM Session/Plate_1_test/Counter/Results_counter.csv")
View(Fay_results)
View(Mitch_results)
View(Fay_results)
library(dplyr)
# Libraries
library(dplyr)
# Read the two dataframes
Mitch_results <- read.csv("Z:/home/shared/MITCH/motility/REP1/Plate 1 230427_131640_IMM Session/Plate_1_test/Other_counts/Rep_1_Mitch_macro.csv")
Fay_results <- read.csv("Z:/home/shared/MITCH/motility/REP1/Plate 1 230427_131640_IMM Session/Plate_1_test/Counter/Results_counter.csv")
View(Fay_results)
# Create a df with Mitch'S and Fay's counts
Fay_results <- Fay_results %>%
rename(Fay = Count)
# Read the two dataframes
Mitch_results <- read.csv("Z:/home/shared/MITCH/motility/REP1/Plate 1 230427_131640_IMM Session/Plate_1_test/Other_counts/Rep_1_Mitch_macro.csv")
Fay_results <- read.csv("Z:/home/shared/MITCH/motility/REP1/Plate 1 230427_131640_IMM Session/Plate_1_test/Counter/Results_counter.csv")
# Create a df with Mitch'S and Fay's counts
Fay_results <- Fay_results %>%
rename(Fay = Count)
View(Mitch_results)
View(Fay_results)
compare <- Fay_results[,c(1,2)] %>%
left_join(Mitch_results[,c(1,2)])
View(compare)
compare <- Fay_results[,c(1,2)] %>%
left_join(Mitch_results[,c(1,2)],
by = "Slice")
View(compare)
T_compare <- t.test(Fay_results, Mitch_results)
T_compare <- t.test(Fay_results, Mitch_results, na.rm = TRUE)
View(compare)
t.test(Fay_results, Mitch_results)
t.test(Fay ~ Mitch, compare)
View(compare)
t.test(compare$Mitch, compare$Fay
t.test(compare$Mitch, compare$Fay)
t.test(compare$Mitch, compare$Fay)
?pivot_wider
library(tidyr)
?pivot_longer
pivot_longer(cols = c("Mitch", "Fay", names_to = Counter, values_to = Counts)
compare_longer <- compare %>%
compare_longer <- compare %>%
pivot_longer(cols = c("Mitch", "Fay", names_to = Counter, values_to = Counts))
compare_longer <- compare %>%
pivot_longer(cols = c("Mitch", "Fay"), names_to = Counter, values_to = Counts)
compare_longer <- compare %>%
pivot_longer(cols = c("Mitch", "Fay"), names_to = "Counter", values_to = "Counts")
compare_longer <- compare %>%
pivot_longer(cols = c("Mitch", "Fay"),
names_to = "Counter", values_to = "Counts")
View(compare_longer)
library(ggplot2)
ggplot(compare_longer, aes(x = Counter, y = Counts)) +
geom_violin()
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin()
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter, fill = Counter)) +
geom_violin()
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter, fill = Counter)) +
geom_violin() +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter, fill = Counter)) +
geom_violin() +
geom_boxplot() +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
t.test(compare$Mitch, compare$Fay)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
geom_dotplot() +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
geom_dotplot(aes(y = Counts)) +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
geom_jitter() +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
geom_point(position = position_jitter(seed = 1, width = 0.2)) +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
geom_point(position = position_jitter(seed = 1, width = 0.2)) +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
) +
theme_minimal()
t.test(compare$Mitch, compare$Fay)
2.2e-16
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
geom_point(position = position_jitter(seed = 1, width = 0.2)) +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
) +
theme_minimal() +
labs(title = "Differences between macros in counting attached parasites",
subtitle = "Welch Two Sample t-test: p-value < 2.2e-16")
setwd("GitHub/Article_predicting_WL/")
library(parasiteLoad)
library(tidyverse)
library(tidyr)
library(dplyr)
library(cowplot)
library(randomForest)
library(ggplot2)
library(VIM) # visualizing missing data
library(mice) # imputing missing data without predictors
library(ggpubr)
library(optimx)
library(rfUtilities) # Implements a permutation test cross-validation for
library(fitdistrplus) #testing distributions
library(logspline)
library(caret)
library(dplyr)
library(tidyr)
library(leaflet)
library(webshot)
library(htmlwidgets)
library(cowplot)
library(gridExtra)
library(magick)
# read the data
hm <- read.csv("Data/Data_output/imputed_clean_data.csv")
# filter for the field mice
Field <- hm %>%
filter(origin == "Field") %>%
drop_na(HI)
# Create vectors for selecting relevant columns
EqPCR.cols      <- c("delta_ct_cewe_MminusE", "MC.Eimeria", "Ct.Eimeria")
Genes_v   <- c("IFNy", "CXCR3", "IL.6", "IL.13", #"IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF") #"IL.12", "IRG6")
# select the gene columns
gene <-  Field %>%
dplyr::select(c(Mouse_ID, all_of(Genes_v)))
# data frame with only the genes
genes <- gene %>%
dplyr::select(-Mouse_ID)
# load predicting weight loss model
weight_loss_predict <- readRDS("R/Models/predict_WL.rds")
set.seed(540)
#The predict() function in R is used to predict the values
#based on the input data.
predicted_WL <- predict(weight_loss_predict, genes)
# assign test.data to a new object, so that we can make changes
result_field <- genes
#add the new variable of predictions to the result object
result_field <- cbind(result_field, predicted_WL)
# add it to the field data
Field <- cbind(Field, predicted_WL)
rm(gene,genes)
########## Analyzing the distribution of our data in order to
# go on with the anaylsis
Field %>% ggplot(aes(x = predicted_WL)) +
geom_histogram(binwidth = 1.5)
##  predicted WL vs HI
Field %>%
ggplot(aes(x = HI , y = predicted_WL , color = Sex)) +
geom_smooth() +
geom_point()
## body length vs predicted WL
Field %>%
ggplot(aes(x = Body_Length , y = predicted_WL , color = Sex)) +
geom_smooth() +
geom_point()
## Let'S further analyse the distribution of WL
x <- Field$predicted_WL
descdist(data = x, discrete = FALSE)
descdist(data = x, discrete = FALSE, #data is continuous
boot = 1000)
##
normal_ <- fitdist(x, "norm")
weibull_ <- fitdist(x, "weibull")
gamma_ <- fitdist(x, "gamma")
# Define function to be used to test, get the log lik and aic
tryDistrib <- function(x, distrib){
# deals with fitdistr error:
fit <-
tryCatch(MASS::fitdistr(x, distrib), error=function(err) "fit failed")
return(list(fit = fit,
loglik = tryCatch(fit$loglik, error=function(err) "no loglik computed"),
AIC = tryCatch(fit$aic, error=function(err) "no aic computed")))
}
findGoodDist <- function(x, distribs, distribs2){
l =lapply(distribs, function(i) tryDistrib(x, i))
names(l) <- distribs
print(l)
listDistr <- lapply(distribs2, function(i){
if (i %in% "t"){
fitdistrplus::fitdist(x, i, start = list(df =2))
} else {
fitdistrplus::fitdist(x,i)
}}
)
par(mfrow=c(2,2))
denscomp(listDistr, legendtext=distribs2)
cdfcomp(listDistr, legendtext=distribs2)
qqcomp(listDistr, legendtext=distribs2)
ppcomp(listDistr, legendtext=distribs2)
par(mfrow=c(1,1))
}
## Now fit the distributions to the predicted weight loss data
tryDistrib(x, "normal") # -782.4131
tryDistrib(x, "binomial") #-784.7632
tryDistrib(x, "student")
tryDistrib(x, "weibull")
tryDistrib(x, "weibullshifted")
## Compare again between normal and weibull
findGoodDist(x, "normal", "weibull")
## plot the distributions
plot(normal_)
summary(normal_)
plot(gamma_)
summary(gamma_)
plot(weibull_)
summary(weibull_)
# Testing differences between female and male hybrids of M.m. musculus and
#m.m.domesticus in predicted weight loss
Field$Sex <- as.factor(Field$Sex)
##All
fitWL_Sex <- parasiteLoad::analyse(data = Field,
response = "predicted_WL",
model = "normal",
group = "Sex")
plot_WL_Sex<- bananaPlot(mod = fitWL_Sex$H3,
data = Field,
response = "predicted_WL",
group = "Sex",
cols = c("white", "white")) +
scale_fill_manual(values = c("orange", "forestgreen")) +
scale_color_manual(values = c("orange", "forestgreen")) +
theme_bw() +
theme(legend.position="none",
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
labs(y = "Predicted detrimental health impact,
Immune signature")
plot_WL_Sex
ggsave(plot = plot_WL_Sex, filename = "figures/hybrid_sex.jpeg", width = 10,
height = 8, dpi = 1000)
# Adjust the gradient bar plot to include axis labels and remove space
HIgradientBar <- ggplot(data.frame(hi = seq(0,1,0.0001)),
aes(x=hi, y=1, fill = hi)) +
geom_tile() +
scale_x_continuous(breaks=seq(0, 1, by=0.25),
labels=c("0", "0.25", "0.5", "0.75", "1")) +
scale_fill_gradient(low = "blue", high = "red") +
theme_void() +
theme(legend.position = 'none',
plot.margin = unit(c(-1, 0, 0, 0), "npc"),
# This removes space around the plot
axis.text.x = element_text(color = "black",
angle = 0, vjust = 0.5, hjust=0.5))
HIgradientBar
# Create the combined plot with the gradient bar as the "axis"
plot_WL_Sex_combined <-
plot_grid(plot_WL_Sex ,
HIgradientBar,
nrow = 2,
rel_heights = c(1.3, 1/8),
align = "hv",
axis = "tb",
vjust = c(-1,2),
scale = 1.1)
# Display the combined plot
plot_WL_Sex_combined
ggsave(plot = plot_WL_Sex_combined,
filename = "figures/hybrid_sex.jpeg", width = 10,
height = 8, dpi = 1000)
####################### Mapping ######################################
leaflet(data = Field) %>%
addTiles() %>%
addMarkers(
lng = ~Longitude, lat = ~Latitude, popup = ~as.character(Mouse_ID))
colorPalette <- colorRampPalette(c("blue", "red"))
colors <- colorPalette(100)[as.numeric(cut(Field$HI, breaks = 100))]
leaflet_map <-
leaflet(data = Field) %>%
addTiles() %>%
addCircleMarkers(lng = ~Longitude, lat = ~Latitude, color = ~colors,
radius = 5, fillOpacity = 0.8, stroke = FALSE,
popup = ~as.character(HI))
#Read the Leaflet map image
leaflet_image <- magick::image_read("figures/Hybrid_map.jpeg")
# Convert to a raster for grid plotting
leaflet_raster <- rasterGrob(leaflet_image, interpolate = TRUE)
# Combine the ggplot and raster image
combined_plot <- grid.arrange(
leaflet_raster,
plot_WL_Sex_combined,
ncol = 2, # Set the number of columns to 2 for horizontal alignment
widths = c(1, 1))
# Add the annotations to the grob
combined_grob <- arrangeGrob(
grobs = list(combined_plot,
textGrob("A", x = unit(0.1, "npc"), y = unit(0.95, "npc"),
gp = gpar(fontface = "bold", cex = 1.5)),
textGrob("B", x = unit(0.51, "npc"), y = unit(0.95, "npc"),
gp = gpar(fontface = "bold", cex = 1.5))),
ncol = 3
)
# Add annotations
grid.text("A", x = unit(0.1, "npc"), y = unit(0.95, "npc"),
gp = gpar(fontface = "bold", cex = 1.5))
grid.text("B", x = unit(0.51, "npc"), y = unit(0.95, "npc"),
gp = gpar(fontface = "bold", cex = 1.5))
ggsave(plot = combined_plot,
filename = "figure_panels/banana_map_immune_signature.jpeg", width = 16,
height = 8, dpi = 1000)
