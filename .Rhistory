stargazer(model_1, model_2, model_3, model_4, model_5, model_6, model_7, #model_8,
# model_9,
type = "html", out = "figures/predictors_weightloss.html",
title = "Choosing predictors for weight loss prediction")
model_8 <- lm(WL_max ~ PC1 * PC2,  data = lab))
summary(model_8)
model_9 <- lm(WL_max ~ PC1 + PC2,  data = lab))
summary(model_9)
model_9 <- lm(WL_max ~ PC1 + PC2,  data = lab))
model_9 <- lm(WL_max ~ PC1 + PC2,  data = lab)
summary(model_9)
model_8 <- lm(WL_max ~ PC1 * PC2,  data = lab))
model_8 <- lm(WL_max ~ PC1 * PC2,  data = lab)
summary(model_8)
model_9 <- lm(WL_max ~ PC1 + PC2,  data = lab)
summary(model_9)
## Please cite as:
##  Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
stargazer(model_1, model_2, model_3, model_4, model_5, model_6, model_7, model_8,
model_9,
type = "html", out = "figures/predictors_weightloss.html",
title = "Choosing predictors for weight loss prediction")
## Please cite as:
##  Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
stargazer(model_1, model_2, model_3, model_4, model_5, #model_6,
model_7, model_8,
model_9,
type = "html", out = "figures/predictors_weightloss.html",
title = "Choosing predictors for weight loss prediction")
## Please cite as:
##  Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
stargazer(model_1, model_2, model_3, model_4, #model_5, #model_6,
model_7, model_8,
model_9,
type = "html", out = "figures/predictors_weightloss.html",
title = "Choosing predictors for weight loss prediction")
## Please cite as:
##  Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
stargazer(model_1, model_2, model_3, model_4, model_5, model_6,
model_7, model_8,
model_9,
type = "html", out = "figures/predictors_weightloss.html",
title = "Choosing predictors for weight loss prediction")
#correcting for nas
model_8 <- lm(WL_max ~ PC1 * PC2,  data = lab %>%
drop_na(delta_ct_cewe_MminusE))
## Please cite as:
##  Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
stargazer(model_1, model_2, model_3, model_4, model_5,
type = "html", out = "figures/predictors_weightloss.html",
title = "Choosing predictors for weight loss prediction")
stargazer(model_6, model_7, model_8, model_9,
type = "html", out = "figures/predictors_weightloss_2.html",
title = "Choosing predictors for weight loss prediction")
#correcting for nas
model_8 <- lm(WL_max ~ PC1 * PC2,  data = lab %>%
drop_na(delta_ct_cewe_MminusE))
summary(model_8)
model_9 <- lm(WL_max ~ PC1 + PC2,  data = lab %>%
drop_na(delta_ct_cewe_MminusE))
summary(model_9)
# choose the best fit
anova_mod <- anova(model_6, model_7, model_8)
anova_mod
typeof(anova_mod)
View(anova_mod)
anova_mod$Df
library(kableExtra)
kableAnova(anova_mod)
anova_mod
stargazer(anova_mod, type = "html", out = "figures/anova_model.html", title =
"Analysis of Variance Table")
typeof(pc2_intensity)
pc2_intensity <-
ggpredict(model_1, terms = c("PC2", "delta_ct_cewe_MminusE")) %>%
plot()
pc2_intensity
library(ggrepel)
library(tidyverse)
library(dplyr)
library(scales)
library(cowplot)
library(ggthemes)
library(grid)
library(ggplot2)
library(ggpmisc)
library(broom)
library(knitr)
library(kableExtra)
library(webshot)
library(RColorBrewer)
library(ggeffects)
library(pheatmap)
library(pdp)
library(broom)
library(reshape2)
library(knitr)
#library(gt)
library(stargazer)
library(kableExtra)
# read the lab data with pca vectors
lab <- read.csv("Data/Data_output/lab_pca.csv")
# change the labels pc1 and pc2 to PC1 / PC2
lab <- lab %>%
dplyr::rename(PC1 = "pc1", PC2 = "pc2")
# read the variance explained by each gene for the pca
vpg <- read.csv("Data/Data_output/variance_contr_gene_lab.csv")
# Change the first column of the variance contribution of variables to the gene
# names
vpg <- vpg %>%
dplyr::rename(Variable = vars, PC1 = Dim.1, PC2 = Dim.2)
# add cos2 to lab
lab <- lab %>% mutate(cos2 = lab$PC1^2 + lab$PC2^2)
# Define color palette
color_palette <- c("E_ferrisi" = "#66C2A5", "uninfected" = "#8DA0CB",
"E_falciformis" = "#FC8D62")
# PCA graph of individuals
pca_individuals <-
ggplot(lab, aes(x = PC1, y = PC2, color = infection, shape = infection)) +
geom_hline(yintercept = 0, linetype = "dotted", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dotted", color = "gray50") +
geom_point(size = 3, alpha = 0.8) +
labs(x = "PC1 (52.32%)", y = "PC2 (11.79%)", title = "PCA graph of individuals",
colour = "Current infection", shape ="Current infection") +
theme_minimal() +
theme(plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position = "right") +
scale_color_manual(values = color_palette) +
scale_shape_manual(values = c("E_ferrisi" = 17, "uninfected" = 16, "E_falciformis" = 18)) +
guides(color = guide_legend(override.aes = list(size = 4)))
pca_individuals
ggsave(filename = "figures/pca_individuals.jpeg", plot = pca_individuals,
width = 6, height = 4, dpi = 300)
####### PCA graph of variables
# Add cos2 variable to the dataframe
vpg$cos2 <- with(vpg, PC1^2 + PC2^2)
# Define custom gradient colors
gradient_colors <- c("#B00B69", "#A55EA7", "#1D1CC9")
# Define the breaks and labels for the color legend
breaks <- c(0, 50, 100, 150)
labels <- c("0", "50", "100", "150")
# Plotting the factor map
pca_variables <-
ggplot(vpg, aes(x = PC1, y = PC2, color = cos2)) +
geom_segment(aes(xend = 0, yend = 0), color = "gray50") +
geom_point(size = 3) +
geom_label_repel(aes(label = Variable), size = 3, box.padding = 0.5, max.overlaps = Inf) +
coord_equal() +
xlab("PC1 (52.32%)") +
ylab("PC2 (11.79%)") +
ggtitle("PCA Plot of Variables") +
theme_minimal() +
theme(legend.position = "right") +
guides(color = guide_colorbar(title = "Squared Distance from Origin")) +
scale_color_gradientn(colors = gradient_colors, guide = "none")  +
theme(plot.title = element_text(size = 12))
ggsave(filename = "figures/pca_variables.jpeg", plot = pca_variables,
width = 12, height = 6, dpi = 600)
#pca_variables
######################## Enriched Terms data frame
enriched_terms_df <- read.csv("Data/Data_output/enriched_sorted_terms.csv")
# First, transform the p-values to -log10 scale
enriched_terms_df$p_value_log <- -log10(enriched_terms_df$p_value)
# Create the lollipop plot using ggplot2
enrichment_terms_plot <-
ggplot(enriched_terms_df[1:30,], aes(x = reorder(GO_Term, p_value_log), y = p_value_log)) +
geom_segment(aes(xend = GO_Term, yend = 0, color = p_value_log), linewidth = 1.5) +
geom_point(aes(fill = p_value_log), size = 3, shape = 21, color = "mediumvioletred") +
scale_fill_gradientn(colours = rev(gradient_colors)) +
scale_color_gradientn(colours = rev(gradient_colors)) +
coord_flip() +
labs(x = "Enriched GO Terms", y = "-log10(p-value)",
title = "Gene Ontology Enrichment Analysis") +
theme_minimal()
enrichment_terms_plot
ggsave(filename = "figures/enrichment_terms_plot.jpeg", plot = enrichment_terms_plot,
width = 12, height = 6, dpi = 600)
##################################################################################################
#################################################
#################################################
#################################################
# Load the required packages
###PC1 PC2 linear regression
lab <- lab %>%
dplyr::mutate(current_infection = case_when(
current_infection == "infected_eimeria" ~ "E_falciformis",
TRUE ~ current_infection))
model_1 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE +
mouse_strain + immunization +
weight_dpi0, data = lab)
summary(model_1)
#see the ggefects
effects <- ggpredict(model_1)
pc1_current_infection <-
ggpredict(model_1, terms = c("PC1", "current_infection")) %>%
plot()
ggsave(filename = "figures/pc1_current_infection.jpeg",
plot = pc1_current_infection,
width = 12, height = 6, dpi = 600)
pc2_current_infection <-
ggpredict(model_1, terms = c("PC2", "current_infection")) %>%
plot()
ggsave(filename = "figures/pc2_current_infection.jpeg",
plot = pc2_current_infection,
width = 12, height = 6, dpi = 600)
pc2_immunization <-
ggpredict(model_1, terms = c("PC2", "immunization")) %>%
plot()
ggsave(filename = "figures/pc2_immunization.jpeg",
plot = pc2_immunization,
width = 12, height = 6, dpi = 600)
pc1_intensity <-
ggpredict(model_1, terms = c("PC1", "delta_ct_cewe_MminusE")) %>%
plot()
ggsave(filename = "figures/pc1_intensity.jpeg",
plot = pc1_intensity,
width = 12, height = 6, dpi = 600)
pc2_intensity <-
ggpredict(model_1, terms = c("PC2", "delta_ct_cewe_MminusE")) %>%
plot()
ggsave(filename = "figures/pc2_intensity.jpeg",
plot = pc2_intensity,
width = 12, height = 6, dpi = 600)
### Now comparing different models with different variables
model_1 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE +
mouse_strain + immunization +
weight_dpi0, data = lab)
model_2 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE,
data = lab)
summary(model_2)
model_3 <- lm(WL_max ~ PC1 + PC2 + delta_ct_cewe_MminusE +
mouse_strain, data = lab)
summary(model_3)
model_4 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE +
immunization, data = lab)
summary(model_4)
model_5 <- lm(WL_max ~ PC1 + PC2 + delta_ct_cewe_MminusE + weight_dpi0,
data = lab)
summary(model_5)
model_6 <- lm(WL_max ~ PC1 * PC2 + delta_ct_cewe_MminusE, data = lab)
summary(model_6)
model_7 <- lm(WL_max ~ PC1 + PC2 + delta_ct_cewe_MminusE, data = lab)
summary(model_7)
model_8 <- lm(WL_max ~ PC1 * PC2,  data = lab)
summary(model_8)
model_9 <- lm(WL_max ~ PC1 + PC2,  data = lab)
summary(model_9)
## Please cite as:
##  Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
stargazer(model_1, model_2, model_3, model_4, model_5,
type = "html", out = "figures/predictors_weightloss.html",
title = "Choosing predictors for weight loss prediction")
stargazer(model_6, model_7, model_8, model_9,
type = "html", out = "figures/predictors_weightloss_2.html",
title = "Choosing predictors for weight loss prediction")
#correcting for nas
model_8 <- lm(WL_max ~ PC1 * PC2,  data = lab %>%
drop_na(delta_ct_cewe_MminusE))
summary(model_8)
model_9 <- lm(WL_max ~ PC1 + PC2,  data = lab %>%
drop_na(delta_ct_cewe_MminusE))
summary(model_9)
# Anova of different models
anova_mod <- anova(model_6, model_7, model_8)
kableAnova(anova_mod)
# Create the lollipop plot using ggplot2
enrichment_terms_plot <-
ggplot(enriched_terms_df[1:15,], aes(x = reorder(GO_Term, p_value_log), y = p_value_log)) +
geom_segment(aes(xend = GO_Term, yend = 0, color = p_value_log), linewidth = 1.5) +
geom_point(aes(fill = p_value_log), size = 3, shape = 21, color = "mediumvioletred") +
scale_fill_gradientn(colours = rev(gradient_colors)) +
scale_color_gradientn(colours = rev(gradient_colors)) +
coord_flip() +
labs(x = "Enriched GO Terms", y = "-log10(p-value)",
title = "Gene Ontology Enrichment Analysis") +
theme_minimal()
enrichment_terms_plot
enrichment_terms_plot
ggsave(filename = "figures/enrichment_terms_plot.jpeg", plot = enrichment_terms_plot,
width = 12, height = 6, dpi = 600)
#figure_panel_1 <-
plot_grid(pca_individuals, pca_variables, enrichment_terms_plot
labels = c("A", "B", "C"),
#figure_panel_1 <-
plot_grid(pca_individuals, pca_variables, enrichment_terms_plot
labels = c("A", "B", "C"),
#figure_panel_1 <-
plot_grid(pca_individuals, pca_variables, enrichment_terms_plot,
labels = c("A", "B", "C"),
ncol = 2, align = "h", axis = "lr",
rel_widths = c(1, 1.2), rel_heights = c(1.2, 1))
ggsave("figure_panels/figure_panel_1.png", figure_panel_1, width = 10, height = 8, dpi = 300)
figure_panel_1 <-
plot_grid(pca_individuals, pca_variables, enrichment_terms_plot,
labels = c("A", "B", "C"),
ncol = 2, align = "h", axis = "lr",
rel_widths = c(1, 1.2), rel_heights = c(1.2, 1))
ggsave("figure_panels/figure_panel_1.png", figure_panel_1, width = 10, height = 8, dpi = 300)
#figure_panel_1 <-
plot_grid(pca_individuals, pca_variables, enrichment_terms_plot,
labels = c("A", "B", "C"),
ncol = 2, align = "h", axis = "lr",
rel_widths = c(1, 1.2), rel_heights = c(1.2, 1))
par(mar = c(n,n,n,n))
#figure_panel_1 <-
plot_grid(pca_individuals, pca_variables, enrichment_terms_plot,
labels = c("A", "B", "C"),
ncol = 2, align = "h", axis = "lr",
rel_widths = c(1, 1.2), rel_heights = c(1.2, 1))
dev.off()
#figure_panel_1 <-
plot_grid(pca_individuals, pca_variables, enrichment_terms_plot,
labels = c("A", "B", "C"),
ncol = 2, align = "h", axis = "lr",
rel_widths = c(1, 1.2), rel_heights = c(1.2, 1))
windows(10,10)
#figure_panel_1 <-
plot_grid(pca_individuals, pca_variables, enrichment_terms_plot,
labels = c("A", "B", "C"),
ncol = 2, align = "h", axis = "lr",
rel_widths = c(1, 1.2), rel_heights = c(1.2, 1))
ggsave("figure_panels/figure_panel_1.jpeg", figure_panel_1,
width = 10, height = 8, dpi = 300)
figure_panel_1 <-
plot_grid(pca_individuals, pca_variables, enrichment_terms_plot,
labels = c("A", "B", "C"),
ncol = 2, align = "h", axis = "lr",
rel_widths = c(1, 1.2), rel_heights = c(1.2, 1))
ggsave("figure_panels/figure_panel_1.jpeg", figure_panel_1,
width = 10, height = 8, dpi = 300)
figure_panel_1 <-
plot_grid(pca_individuals, pca_variables, enrichment_terms_plot,
labels = c("A", "B", "C"),
ncol = 2, align = "h", axis = "lr",
rel_widths = c(1, 1.2), rel_heights = c(1.2, 1))
ggsave("figure_panels/figure_panel_1.jpeg", figure_panel_1,
width = 10, height = 8, dpi = 300)
ggsave("figure_panels/figure_panel_1.jpeg", figure_panel_1,
width = 10, height = 8, dpi = 300)
figure_panel_1 <-
plot_grid(pca_individuals, pca_variables, enrichment_terms_plot,
labels = c("A", "B", "C"),
ncol = 2, align = "hv", axis = "lr",
rel_widths = c(1, 1.2), rel_heights = c(1.2, 1))
ggsave("figure_panels/figure_panel_1.jpeg", figure_panel_1,
width = 10, height = 8, dpi = 300)
figure_panel_1 <-
plot_grid(pca_individuals, pca_variables, enrichment_terms_plot,
labels = c("A", "B", "C"),
ncol = 2, align = "hv", axis = "lr",
rel_widths = c(1, 1.2), rel_heights = c(1.2, 1))
ggsave("figure_panels/figure_panel_1.jpeg", figure_panel_1,
width = 10, height = 8, dpi = 300)
figure_panel_1 <-
plot_grid(pca_individuals, pca_variables, enrichment_terms_plot,
labels = c("A", "B", "C"),
ncol = 2, align = "h", axis = "lr",
rel_widths = c(1, 1.2), rel_heights = c(1.2, 1))
ggsave("figure_panels/figure_panel_1.jpeg", figure_panel_1,
width = 10, height = 8, dpi = 300)
figure_panel_1 <-
plot_grid(pca_individuals, pca_variables, enrichment_terms_plot,
labels = c("A", "B", "C"),
ncol = 2, align = "h", axis = "lr",
rel_widths = c(1, 2), rel_heights = c(1.2, 1))
ggsave("figure_panels/figure_panel_1.jpeg", figure_panel_1,
width = 10, height = 8, dpi = 300)
1.2
figure_panel_1 <-
plot_grid(pca_individuals, pca_variables, enrichment_terms_plot,
labels = c("A", "B", "C"),
ncol = 2, align = "h", axis = "lr",
rel_widths = c(1, 1.2), rel_heights = c(1.2, 1))
ggsave("figure_panels/figure_panel_1.jpeg", figure_panel_1,
width = 10, height = 8, dpi = 300)
figure_panel_1 <-
plot_grid(pca_individuals, pca_variables, enrichment_terms_plot,
labels = c("A", "B", "C"),
ncol = 2, align = "h", axis = "lr",
rel_widths = c(1, 1.2), rel_heights = c(1.2, 1))
ggsave("figure_panels/figure_panel_1.jpeg", figure_panel_1,
width = 10, height = 8, dpi = 300)
figure_panel_1 <-
plot_grid(pca_individuals, pca_variables, enrichment_terms_plot,
labels = c("A", "B", "C"),
ncol = 2, align = "h", axis = "lr") #,
ggsave("figure_panels/figure_panel_1.jpeg", figure_panel_1,
width = 10, height = 8, dpi = 300)
#figure_panel_1 <-
plot_grid(pca_individuals, pca_variables, enrichment_terms_plot,
labels = c("A", "B", "C"),
ncol = 2, align = "h", axis = "lr") #,
figure_panel_1 <-
plot_grid(pca_individuals, pca_variables, enrichment_terms_plot,
labels = c("A", "B", "C"),
ncol = 2, align = "h", axis = "lr"),
ggsave("figure_panels/figure_panel_1.jpeg", figure_panel_1,
width = 15, height = 12, dpi = 300)
ggsave("figure_panels/figure_panel_1.jpeg", figure_panel_1,
width = 20, height = 10, dpi = 300)
ggsave("figure_panels/figure_panel_1.jpeg", figure_panel_1,
width = 16, height = 10, dpi = 300)
figure_panel_1 <-
plot_grid(pca_variables, enrichment_terms_plot, pca_individuals,
labels = c("A", "B", "C"),
ncol = 2, align = "h", axis = "lr"),
figure_panel_1 <-
plot_grid(pca_variables, enrichment_terms_plot, pca_individuals,
labels = c("A", "B", "C"),
ncol = 2, align = "h", axis = "lr"),
ggsave("figure_panels/figure_panel_1.jpeg", figure_panel_1,
width = 16, height = 10, dpi = 300)
figure_panel_1 <-
plot_grid(pca_variables, enrichment_terms_plot, pca_individuals,
labels = c("A", "B", "C"),
ncol = 2, align = "h", axis = "lr"),
figure_panel_1 <-
plot_grid(pca_variables, enrichment_terms_plot, pca_individuals,
labels = c("A", "B", "C"),
ncol = 2, align = "h", axis = "lr",
rel_widths = c(1, 1.2), rel_heights = c(1.2, 1))
ggsave("figure_panels/figure_panel_1.jpeg", figure_panel_1,
width = 16, height = 10, dpi = 300)
# Plotting the factor map
pca_variables <-
ggplot(vpg, aes(x = PC1, y = PC2, color = cos2)) +
geom_segment(aes(xend = 0, yend = 0), color = "gray50") +
geom_point(size = 3) +
geom_label_repel(aes(label = Variable), size = 3, box.padding = 0.5, max.overlaps = Inf) +
coord_equal() +
xlab("PC1 (52.32%)") +
ylab("PC2 (11.79%)") +
ggtitle("PCA Plot of Variables") +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(size = 12, face = "bold")) +
guides(color = guide_colorbar(title = "Squared Distance from Origin")) +
scale_color_gradientn(colors = gradient_colors, guide = "none")  +
theme(plot.title = element_text(size = 12))
# Plotting the factor map
pca_variables <-
ggplot(vpg, aes(x = PC1, y = PC2, color = cos2)) +
geom_segment(aes(xend = 0, yend = 0), color = "gray50") +
geom_point(size = 3) +
geom_label_repel(aes(label = Variable), size = 3, box.padding = 0.5, max.overlaps = Inf) +
coord_equal() +
xlab("PC1 (52.32%)") +
ylab("PC2 (11.79%)") +
ggtitle("PCA Plot of Variables") +
theme_minimal() +
theme(legend.position = "right", plot.title = element_text(size = 12, face = "bold")) +
guides(color = guide_colorbar(title = "Squared Distance from Origin")) +
scale_color_gradientn(colors = gradient_colors, guide = "none")
ggsave(filename = "figures/pca_variables.jpeg", plot = pca_variables,
width = 12, height = 6, dpi = 600)
######################## Enriched Terms data frame
enriched_terms_df <- read.csv("Data/Data_output/enriched_sorted_terms.csv")
# First, transform the p-values to -log10 scale
enriched_terms_df$p_value_log <- -log10(enriched_terms_df$p_value)
# Create the lollipop plot using ggplot2
enrichment_terms_plot <-
ggplot(enriched_terms_df[1:15,], aes(x = reorder(GO_Term, p_value_log), y = p_value_log)) +
geom_segment(aes(xend = GO_Term, yend = 0, color = p_value_log), linewidth = 1.5) +
geom_point(aes(fill = p_value_log), size = 3, shape = 21, color = "mediumvioletred") +
scale_fill_gradientn(colours = rev(gradient_colors)) +
scale_color_gradientn(colours = rev(gradient_colors)) +
coord_flip() +
labs(x = "Enriched GO Terms", y = "-log10(p-value)",
title = "Gene Ontology Enrichment Analysis") +
theme_minimal()
enrichment_terms_plot
ggsave(filename = "figures/enrichment_terms_plot.jpeg", plot = enrichment_terms_plot,
width = 12, height = 6, dpi = 600)
figure_panel_1 <-
plot_grid(pca_variables, enrichment_terms_plot, pca_individuals,
labels = c("A", "B", "C"),
ncol = 2, align = "h", axis = "lr",
rel_widths = c(1, 1.2), rel_heights = c(1.2, 1))
ggsave("figure_panels/figure_panel_1.jpeg", figure_panel_1,
width = 16, height = 10, dpi = 300)
# Create the lollipop plot using ggplot2
enrichment_terms_plot <-
ggplot(enriched_terms_df[1:15,], aes(x = reorder(GO_Term, p_value_log), y = p_value_log)) +
geom_segment(aes(xend = GO_Term, yend = 0, color = p_value_log), linewidth = 1.5) +
geom_point(aes(fill = p_value_log), size = 3, shape = 21, color = "mediumvioletred") +
scale_fill_gradientn(colours = rev(gradient_colors)) +
scale_color_gradientn(colours = rev(gradient_colors)) +
coord_flip() +
labs(x = "Enriched GO Terms", y = "-log10(p-value)",
title = "Gene Ontology Enrichment Analysis") +
theme_minimal() +
theme( plot.title = element_text(size = 12, face = "bold"))
enrichment_terms_plot
ggsave(filename = "figures/enrichment_terms_plot.jpeg", plot = enrichment_terms_plot,
width = 12, height = 6, dpi = 600)
figure_panel_1 <-
plot_grid(pca_variables, enrichment_terms_plot, pca_individuals,
labels = c("A", "B", "C"),
ncol = 2, align = "h", axis = "lr",
rel_widths = c(1, 1.2), rel_heights = c(1.2, 1))
ggsave("figure_panels/figure_panel_1.jpeg", figure_panel_1,
width = 16, height = 10, dpi = 300)
# Load the required packages
###PC1 PC2 linear regression
lab <- lab %>%
dplyr::mutate(current_infection = case_when(
current_infection == "infected_eimeria" ~ "E_falciformis",
TRUE ~ current_infection))
