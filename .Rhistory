"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF") #"IL.12", "IRG6")
# create a data frame containing the continuous gene expression variables
genes <- lab[ ,colnames(lab) %in% Genes_v]
# increase maximum overlaps
options(ggrepel.max.overlaps = Inf)
# PCA
## we can now run a normal pca on the complete data set
res.pca <- PCA(genes)
# Convert mouse_id to a data frame (to facilitate data joining)
mouse <- data.frame(Mouse_ID = lab[,1])
# Add the new column pc1 to the mouse_id data frame
mouse$PC1 <- res.pca$ind$coord[, 1]
mouse$PC2 <- res.pca$ind$coord[, 2]  # indexing the second column
# join the coordinates
lab <- lab %>%
left_join(mouse, by = "Mouse_ID")
## We also need to extract the data for the variable contributions to each of
## the pc axes
# read the variance explained by each gene for the pca
vpg <- read.csv("Data/Data_output/variance_contr_gene_lab.csv")
# Change the first column of the variance contribution of variables to the gene
# names
vpg <- vpg %>%
dplyr::rename(Variable = vars, PC1 = Dim.1, PC2 = Dim.2)
# add cos2 to lab
lab <- lab %>% mutate(cos2 = lab$PC1^2 + lab$PC2^2)
# Then, define the color for each level of infection
color_mapping <- c("E_falciformis" = "salmon",
"E_ferrisi" = "forestgreen",
"uninfected" = "cornflowerblue")
# PCA graph of individuals
pca_individuals <-
ggplot(lab, aes(x = PC1, y = PC2, color = current_infection)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
geom_point(size = 5, alpha = 0.5, color = "black",  shape = 21, aes(fill = current_infection)) +
labs(x = "PC1 (34.37%)", y = "PC2 (16.03%)",# title = "PCA graph of individuals",
colour = "Current infection") +
theme_minimal() +
theme(#plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position = "right") +
scale_color_manual(values = color_mapping)# +
#guides(color = guide_legend(override.aes = list(size = 4)))
pca_individuals
ggsave(filename = "figures/pca_individuals.jpeg", plot = pca_individuals,
width = 6, height = 4, dpi = 300)
####### PCA graph of variables
# Add cos2 variable to the dataframe
vpg$cos2 <- with(vpg, PC1^2 + PC2^2)
# Define custom gradient colors
gradient_colors <- c("#B00B69", "#A55EA7", "#1D1CC9")
# Define the breaks and labels for the color legend
breaks <- c(0, 50, 100, 150)
labels <- c("0", "50", "100", "150")
# Plotting the factor map
pca_variables <-
ggplot(vpg, aes(x = PC1, y = PC2, color = cos2)) +
geom_segment(aes(xend = 0, yend = 0), color = "gray50") +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
geom_point(size = 3) +
geom_label_repel(aes(label = Variable), size = 3, box.padding = 0.5, max.overlaps = Inf) +
coord_equal() +
xlab("PC1 (34.37%)") +
ylab("PC2 (16.03%") +
#ggtitle("PCA Plot of Variables") +
theme_minimal() +
#theme(legend.position = "right",
#plot.title = element_text(size = 12, face = "bold")) +
guides(color = guide_colorbar(title = "Squared Distance from Origin")) +
scale_color_gradientn(colors = gradient_colors, guide = "none")
pca_variables
# Load the required packages
###PC1 PC2 linear regression
model_1 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE +
mouse_strain + immunization +
weight_dpi0, data = lab )
summary(model_1)
tab_model(model_1)
stargazer(model_1,
type = "text", out = "tables/predictors_weightloss.txt",
title = "Linear models - Predicting maximum weight loss")
# Extract the residuals from the model
residuals <- resid(model_1)
# Create a data frame with the residuals
residuals_df <- data.frame(residuals = residuals)
# Create the QQ plot
residuals_1 <-
ggplot(residuals_df, aes(sample = residuals)) +
stat_qq(color = "blue") +
ggtitle("QQ Plot of Residuals") +
xlab("Theoretical Quantiles") +
ylab("Sample Quantiles") +
theme_minimal()
residuals_1
ggsave(filename = "figures/residuals_model_1.jpeg",
plot = residuals_1,
width = 12, height = 6, dpi = 600)
# Extract the fitted values from the model
fitted_values <- fitted(model_1)
# Create a data frame with the residuals and the fitted values
data_df <- data.frame(residuals = residuals, fitted_values = fitted_values)
# Create the scatter plot
residuals_vs_fitted <-
ggplot(data_df, aes(x = fitted_values, y = residuals)) +
geom_point(color = "blue") +
ggtitle("Residuals vs Fitted Values") +
xlab("Fitted Values") +
ylab("Residuals") +
theme_minimal()
residuals_vs_fitted
ggsave(filename = "figures/residuals_vs_fitted.jpeg",
plot = residuals_vs_fitted,
width = 12, height = 6, dpi = 600)
#########
# without parasite data
model_2 <- lm(WL_max ~ PC1 + PC2 + mouse_strain + weight_dpi0, data = lab)
summary(model_2)
# without host data
model_3 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE +
immunization + weight_dpi0, data = lab)
summary(model_3)
# only pc1 + pc2
model_4 <- lm(WL_max ~ PC1 + PC2 , data = lab)
summary(model_4)
plot_coefs(model_4, colors = "pink", plot.distributions = TRUE) -> coef_pc1_pc2
ggsave(filename = "figures/Coef_pc1_pc2.jpeg", coef_pc1_pc2, width = 6,
height = 4, dpi = 300)
tab_model(model_4, file = "tables/pc1_pc2_lm.doc")
plot_coefs(model_1, model_2, model_3, model_4)
stargazer(model_1,
type = "text", out = "tables/predictors_weightloss.txt",
title = "Linear models - Predicting maximum weight loss")
stargazer(model_1,
type = "text", out = "tables/predictors_weightloss.txt",
title = "Linear models - Predicting maximum weight loss")
stargazer(model_1,
type = "text", out = "tables/predictors_weightloss.txt",
title = "Linear models - Predicting maximum weight loss")
# Extract the residuals from the model
residuals <- resid(model_1)
# Create a data frame with the residuals
residuals_df <- data.frame(residuals = residuals)
# Create the QQ plot
residuals_1 <-
ggplot(residuals_df, aes(sample = residuals)) +
stat_qq(color = "blue") +
ggtitle("QQ Plot of Residuals") +
xlab("Theoretical Quantiles") +
ylab("Sample Quantiles") +
theme_minimal()
residuals_1
ggsave(filename = "figures/residuals_model_1.jpeg",
plot = residuals_1,
width = 12, height = 6, dpi = 600)
# Extract the fitted values from the model
fitted_values <- fitted(model_1)
# Create a data frame with the residuals and the fitted values
data_df <- data.frame(residuals = residuals, fitted_values = fitted_values)
# Create the scatter plot
residuals_vs_fitted <-
ggplot(data_df, aes(x = fitted_values, y = residuals)) +
geom_point(color = "blue") +
ggtitle("Residuals vs Fitted Values") +
xlab("Fitted Values") +
ylab("Residuals") +
theme_minimal()
residuals_vs_fitted
ggsave(filename = "figures/residuals_vs_fitted.jpeg",
plot = residuals_vs_fitted,
width = 12, height = 6, dpi = 600)
#########
# without parasite data
model_2 <- lm(WL_max ~ PC1 + PC2 + mouse_strain + weight_dpi0, data = lab)
summary(model_2)
# without host data
model_3 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE +
immunization + weight_dpi0, data = lab)
summary(model_3)
# only pc1 + pc2
model_4 <- lm(WL_max ~ PC1 + PC2 , data = lab)
summary(model_4)
plot_coefs(model_4, colors = "pink", plot.distributions = TRUE) -> coef_pc1_pc2
ggsave(filename = "figures/Coef_pc1_pc2.jpeg", coef_pc1_pc2, width = 6,
height = 4, dpi = 300)
tab_model(model_4, file = "tables/pc1_pc2_lm.doc")
plot_coefs(model_1, model_2, model_3, model_4)
model_5 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE +
weight_dpi0, data = lab)
summary(model_5)
plot_coefs(model_1, model_2, model_3, model_4, model_5)
## Please cite as:
##  Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
stargazer(model_1, model_2, model_3, model_4,
type = "html", out = "figures/predictors_weightloss.html",
title = "Linear models - Predicting maximum weight loss")
## Please cite as:
##  Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
stargazer(model_1, model_2, model_3, model_4,
type = "html", out = "figures/predictors_weightloss.html",
title = "Linear models - Predicting maximum weight loss")
#correcting for nas in delta ct
model_2 <- lm(WL_max ~ PC1 + PC2 + mouse_strain + weight_dpi0, data = lab %>%
drop_na(delta_ct_cewe_MminusE))
model_4 <- lm(WL_max ~ PC1 + PC2 , data = lab %>%
drop_na(delta_ct_cewe_MminusE))
# Anova of different models
anova_mod <- anova(model_1, model_2, model_3, model_4)
stargazer(anova_mod, type = "html", out = "figures/anova_model.html", title =
"Analysis of Variance Table")
source("~/GitHub/Article_predicting_WL/R/Scripts/3_ Figure_1.R")
## Please cite as:
##  Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
stargazer(model_1, model_2, model_3, model_4,
type = "html", out = "tables/predictors_weightloss.html",
title = "Linear models - Predicting maximum weight loss")
?stargazer
## Please cite as:
##  Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
stargazer(model_1, model_2, model_3, model_4,
type = "latex", out = "tables/predictors_weightloss.html",
title = "Linear models - Predicting maximum weight loss")
source("~/GitHub/Article_predicting_WL/R/Scripts/3_ Figure_1.R")
dev.off()
# read the data
hm <- read.csv("Data/Data_output/imputed_clean_data.csv")
# Select laboratory data
# Select genes
lab <- hm %>%
dplyr::filter(origin == "Lab")
# create a vector to select genes
Genes_v   <- c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF") #"IL.12", "IRG6")
# create a data frame containing the continuous gene expression variables
genes <- lab[ ,colnames(lab) %in% Genes_v]
# increase maximum overlaps
options(ggrepel.max.overlaps = Inf)
# PCA
## we can now run a normal pca on the complete data set
res.pca <- PCA(genes)
# Convert mouse_id to a data frame (to facilitate data joining)
mouse <- data.frame(Mouse_ID = lab[,1])
# Add the new column pc1 to the mouse_id data frame
mouse$PC1 <- res.pca$ind$coord[, 1]
mouse$PC2 <- res.pca$ind$coord[, 2]  # indexing the second column
# join the coordinates
lab <- lab %>%
left_join(mouse, by = "Mouse_ID")
# read the variance explained by each gene for the pca
vpg <- read.csv("Data/Data_output/variance_contr_gene_lab.csv")
# Change the first column of the variance contribution of variables to the gene
# names
vpg <- vpg %>%
dplyr::rename(Variable = vars, PC1 = Dim.1, PC2 = Dim.2)
# add cos2 to lab
lab <- lab %>% mutate(cos2 = lab$PC1^2 + lab$PC2^2)
# Then, define the color for each level of infection
color_mapping <- c("E_falciformis" = "salmon",
"E_ferrisi" = "forestgreen",
"uninfected" = "cornflowerblue")
# PCA graph of individuals
pca_individuals <-
ggplot(lab, aes(x = PC1, y = PC2, color = current_infection)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
geom_point(size = 5, alpha = 0.5, color = "black",  shape = 21, aes(fill = current_infection)) +
labs(x = "PC1 (34.37%)", y = "PC2 (16.03%)",# title = "PCA graph of individuals",
colour = "Current infection") +
theme_minimal() +
theme(#plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position = "right") +
scale_color_manual(values = color_mapping)# +
pca_individuals
ggsave(filename = "figures/pca_individuals.jpeg", plot = pca_individuals,
width = 6, height = 4, dpi = 300)
# Add cos2 variable to the dataframe
vpg$cos2 <- with(vpg, PC1^2 + PC2^2)
# Define custom gradient colors
gradient_colors <- c("#B00B69", "#A55EA7", "#1D1CC9")
# Define the breaks and labels for the color legend
breaks <- c(0, 50, 100, 150)
labels <- c("0", "50", "100", "150")
# Plotting the factor map
pca_variables <-
ggplot(vpg, aes(x = PC1, y = PC2, color = cos2)) +
geom_segment(aes(xend = 0, yend = 0), color = "gray50") +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
geom_point(size = 3) +
geom_label_repel(aes(label = Variable), size = 3, box.padding = 0.5, max.overlaps = Inf) +
coord_equal() +
xlab("PC1 (34.37%)") +
ylab("PC2 (16.03%") +
#ggtitle("PCA Plot of Variables") +
theme_minimal() +
#theme(legend.position = "right",
#plot.title = element_text(size = 12, face = "bold")) +
guides(color = guide_colorbar(title = "Squared Distance from Origin")) +
scale_color_gradientn(colors = gradient_colors, guide = "none")
pca_variables
pca_variables <-
ggplot(vpg, aes(x = PC1, y = PC2, color = Variable)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
# Segment and points
geom_segment(aes(xend = 0, yend = 0), color = "gray50") +
geom_point(size = 3,  color = "black", shape = 21, aes(fill = Variable)) +
# Labels
geom_label_repel(
aes(label = Variable, fill = Variable), size = 3.5, box.padding = 0.5,
max.overlaps = Inf,
color = "white",  # Color for the text inside the label
segment.color = "black") +  # Color for the connecting lines
# Axes and theme
coord_equal() +
xlab("PC1 (34.37%)") +
ylab("PC2 (16.03%)") +
theme_minimal() +
theme(legend.position = "none") +
# labs(title = "PCA graph of variabes") +
# Coloring for the 19 genes
scale_color_manual(values = color_palette)
print(pca_variables)
ggsave(filename = "figures/pca_variables.jpeg", plot = pca_variables,
width = 12, height = 6, dpi = 600)
fviz_pca_biplot(res.pca,
col.ind = lab$current_infection, palette = c("E_falciformis" = "salmon",
"E_ferrisi" = "forestgreen",
"uninfected" = "cornflowerblue"),
addEllipses = TRUE, label = "var",
col.var = "black", repel = TRUE,
legend.title = "Infection groups",
title = "") -> biplot
biplot
ggsave(filename = "figures/biplot.jpeg", plot = biplot,
width = 12, height = 6, dpi = 600)
# Contributions of variables to PC1
fviz_contrib(res.pca, choice = "var", axes = 1, top = 18,
title = "Contribution of immune genes to the first dimension of the PCA",
fill =  "seagreen2") -> contributions_pc1
contributions_pc1
ggsave(filename = "figures/contributions_pc1.jpeg", plot = contributions_pc1,
width = 6, height = 4, dpi = 1000)
## Contributions of variables to PC2
fviz_contrib(res.pca, choice = "var", axes = 2, top = 18,
title = "Contribution of immune genes to the second dimension of the PCA",
fill =  "seagreen2") -> contributions_pc2
contributions_pc2
ggsave(filename = "figures/contributions_pc2.jpeg", plot = contributions_pc2,
width = 6, height = 4, dpi = 1000)
# Load the required packages
###PC1 PC2 linear regression
model_1 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE +
mouse_strain + immunization +
weight_dpi0, data = lab )
summary(model_1)
tab_model(model_1)
stargazer(model_1,
type = "text", out = "tables/predictors_weightloss.txt",
title = "Linear models - Predicting maximum weight loss")
# Extract the residuals from the model
residuals <- resid(model_1)
# Create a data frame with the residuals
residuals_df <- data.frame(residuals = residuals)
# Create the QQ plot
residuals_1 <-
ggplot(residuals_df, aes(sample = residuals)) +
stat_qq(color = "blue") +
ggtitle("QQ Plot of Residuals") +
xlab("Theoretical Quantiles") +
ylab("Sample Quantiles") +
theme_minimal()
residuals_1
ggsave(filename = "figures/residuals_model_1.jpeg",
plot = residuals_1,
width = 12, height = 6, dpi = 600)
# Extract the fitted values from the model
fitted_values <- fitted(model_1)
# Create a data frame with the residuals and the fitted values
data_df <- data.frame(residuals = residuals, fitted_values = fitted_values)
# Create the scatter plot
residuals_vs_fitted <-
ggplot(data_df, aes(x = fitted_values, y = residuals)) +
geom_point(color = "blue") +
ggtitle("Residuals vs Fitted Values") +
xlab("Fitted Values") +
ylab("Residuals") +
theme_minimal()
residuals_vs_fitted
ggsave(filename = "figures/residuals_vs_fitted.jpeg",
plot = residuals_vs_fitted,
width = 12, height = 6, dpi = 600)
#########
# without parasite data
model_2 <- lm(WL_max ~ PC1 + PC2 + mouse_strain + weight_dpi0, data = lab)
summary(model_2)
# without host data
model_3 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE +
immunization + weight_dpi0, data = lab)
summary(model_3)
# only pc1 + pc2
model_4 <- lm(WL_max ~ PC1 + PC2 , data = lab)
summary(model_4)
plot_coefs(model_4, colors = "pink", plot.distributions = TRUE) -> coef_pc1_pc2
ggsave(filename = "figures/Coef_pc1_pc2.jpeg", coef_pc1_pc2, width = 6,
height = 4, dpi = 300)
tab_model(model_4, file = "tables/pc1_pc2_lm.doc")
plot_coefs(model_1, model_2, model_3, model_4)
model_5 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE +
weight_dpi0, data = lab)
summary(model_5)
plot_coefs(model_1, model_2, model_3, model_4, model_5)
## Please cite as:
##  Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
stargazer(model_1, model_2, model_3, model_4,
type = "latex", out = "tables/predictors_weightloss.html",
title = "Linear models - Predicting maximum weight loss")
?stargazer
## Please cite as:
##  Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
stargazer(model_1, model_2, model_3, model_4,
type = "latex", out = "tables/stargazer",
title = "Linear models - Predicting maximum weight loss")
## Please cite as:
##  Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
stargazer(model_1, model_2, model_3, model_4,
type = "text", out = "tables/stargazer.txt",
title = "Linear models - Predicting maximum weight loss")
# without host data
model_3 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE +
immunization, data = lab)
summary(model_3)
# only pc1 + pc2
model_4 <- lm(WL_max ~ PC1 + PC2 , data = lab)
summary(model_4)
plot_coefs(model_4, colors = "pink", plot.distributions = TRUE) -> coef_pc1_pc2
ggsave(filename = "figures/Coef_pc1_pc2.jpeg", coef_pc1_pc2, width = 6,
height = 4, dpi = 300)
tab_model(model_4, file = "tables/pc1_pc2_lm.doc")
plot_coefs(model_1, model_2, model_3, model_4)
model_5 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE +
weight_dpi0, data = lab)
summary(model_5)
plot_coefs(model_1, model_2, model_3, model_4, model_5)
## Please cite as:
##  Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
stargazer(model_1, model_2, model_3, model_4,
type = "text", out = "tables/stargazer.txt",
title = "Linear models - Predicting maximum weight loss")
#correcting for nas in delta ct
model_2 <- lm(WL_max ~ PC1 + PC2 + mouse_strain + weight_dpi0, data = lab %>%
drop_na(delta_ct_cewe_MminusE))
model_4 <- lm(WL_max ~ PC1 + PC2 , data = lab %>%
drop_na(delta_ct_cewe_MminusE))
# Anova of different models
anova_mod <- anova(model_1, model_2, model_3, model_4)
stargazer(anova_mod, type = "html", out = "figures/anova_model.html", title =
"Analysis of Variance Table")
## Please cite as:
##  Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
stargazer(model_1, model_2, model_3, model_4,
type = "text", out = "tables/stargazer.txt",
title = "Linear models - Predicting maximum weight loss")
## Please cite as:
##  Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
stargazer(model_1, model_2, model_3, model_4,
type = "latex", out = "tables/stargazer.txt",
title = "Linear models - Predicting maximum weight loss")
#########
# without parasite data
model_2 <- lm(WL_max ~ PC1 + PC2 + mouse_strain + weight_dpi0, data = lab)
summary(model_2)
# without host data
model_3 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE +
immunization, data = lab)
summary(model_3)
# only pc1 + pc2
model_4 <- lm(WL_max ~ PC1 + PC2 , data = lab)
summary(model_4)
## Please cite as:
##  Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
stargazer(model_1, model_2, model_3, model_4,
type = "latex", out = "tables/stargazer.txt",
title = "Linear models - Predicting maximum weight loss")
# Load the required packages
###PC1 PC2 linear regression
model_1 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE +
mouse_strain + immunization +
weight_dpi0, data = lab )
summary(model_1)
#########
# without parasite data
model_2 <- lm(WL_max ~ PC1 + PC2 + mouse_strain + weight_dpi0, data = lab)
summary(model_2)
# without host data
model_3 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE +
immunization, data = lab)
summary(model_3)
# only pc1 + pc2
model_4 <- lm(WL_max ~ PC1 + PC2 , data = lab)
summary(model_4)
