###PC1 PC2 linear regression
model <- lm(WL_max ~ PC1 + PC2 + infection_intensity + current_infection +
mouse_strain + immunization +
weight_dpi0, data = lab %>%
dplyr::rename(infection_intensity = delta_ct_cewe_MminusE))
summary(model)
model <- lm(WL_max ~ PC1 + PC2 + current_infection +
mouse_strain + immunization +
weight_dpi0, data = lab)
summary(model)
stargazer(model)
stargazer(model, type = "html", title = "Choosing predictors for weight loss prediction")
stargazer(model, type = "html", out = "predictors_weightloss.html",
title = "Choosing predictors for weight loss prediction")
summary(model_1)
# Load the required packages
###PC1 PC2 linear regression
model_1 <- lm(WL_max ~ PC1 + PC2 + infection_intensity + current_infection +
mouse_strain + immunization +
weight_dpi0, data = lab %>%
dplyr::rename(infection_intensity = delta_ct_cewe_MminusE))
summary(model_1)
model_1 <- lm(WL_max ~ PC1 + PC2 + current_infection +
mouse_strain + immunization +
weight_dpi0, data = lab)
summary(model_1)
# Load the required packages
###PC1 PC2 linear regression
model_2 <- lm(WL_max ~ PC1 + PC2, data = lab)
model_summary <- summary(model_2)
###PC1 PC2 linear regression with current_infection as an additional predictor
lab$current_infection[lab$current_infection == "infected_eimeria"] <-
"E_falciformis"
model_2 <- lm(WL_max ~ PC1 + PC2 + current_infection, data = lab)
summary(model_2)
sjt.lm(model_2)
ggeffect(model_2)
sjt.lm(model_2)
###PC1 PC2 linear regression with current_infection as an additional predictor
lab$current_infection[lab$current_infection == "infected_eimeria"] <-
"E_falciformis"
model_2 <- lm(WL_max ~ PC1 + PC2 + current_infection, data = lab)
summary(model_2)
ggeffect(model_2)
# Generate predicted effects
effects <- ggeffect(model_2)
# create a df with pc1 and pc2 for plotting
predicted_df_PC1 <- effects$PC1
predicted_df_PC2 <- effects$PC2
predicted_df_current_infection <- effects$current_infection
# Adding a new column "group" to each data frame before merging
predicted_df_PC1$group <- "PC1"
predicted_df_PC2$group <- "PC2"
predicted_df_current_infection$group <- "current_infection"
# Merge the data frames
predicted_df <- rbind(predicted_df_PC1, predicted_df_PC2,
predicted_df_current_infection)
# Create partial dependence data for each predictor
pdp_PC1 <- partial(model_2, pred.var = "PC1", grid.resolution = 20, plot = TRUE)
pdp_PC2 <- partial(model_2, pred.var = "PC2", grid.resolution = 20, plot = TRUE)
pdp_current_infection <- partial(model_2, pred.var = "current_infection",
grid.resolution = 20, plot = TRUE)
# Interaction plot for current_infection and PC1
interaction.plot(lab$current_infection, lab$PC1, lab$WL_max,
trace.label = "Current Infection", xlab = "PC1", ylab = "WL_max")
# Interaction plot for current_infection and PC2
interaction.plot(lab$current_infection, lab$PC2, lab$WL_max,
trace.label = "Current Infection", xlab = "PC2", ylab = "WL_max")
# Create the plot for PC1 and PC2
plot1 <- ggplot(predicted_df[predicted_df$group != "current_infection",],
aes(x = x, y = predicted, colour = group)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.3) +
scale_color_brewer(palette = "Set1") +
labs(title = "Predicted Effects of PC1 and PC2 on WL_max",
x = "Predictor",
y = "Predicted WL_max",
color = "Group") +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5, size = 12),
legend.position = "bottom"
)
# Visualize the effect of current_infection separately
plot2 <- ggplot(lab, aes(x = current_infection, y = WL_max)) +
geom_boxplot() +
labs(title = "Effect of current_infection on WL_max",
x = "Current Infection",
y = "WL_max") +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5, size = 12)
)
# Print the plots
print(plot1)
print(plot2)
# Save the plots
ggsave(filename = "figures/PC1_PC2_WL.jpeg", plot = plot1,
width = 12, height = 6, dpi = 600)
ggsave(filename = "figures/CurrentInfection_WL.jpeg", plot = plot2,
width = 12, height = 6, dpi = 600)
model_2 <- lm(WL_max ~ PC1 + PC2 + challenge_infection, data = lab)
summary(model)
anova(model_1, model_2)
model_3 <- lm(WL_max ~ PC1 + PC2, data = lab)
summary(model_3)
anova(model_1, model_2, model_3)
# Generate equation text
eq_text <- paste("WL_max =", round(coef(model)[1], 2),
"+", round(coef(model)[2], 2), "PC1",
"+", round(coef(model)[3], 2), "PC2")
# Calculate R-squared
predicted <- predict(model)
r_squared <- summary(model)$r.squared
r_squared_text <- paste("R-squared =", round(r_squared, 2))
# Plot the data with the equation and R-squared
ggplot(lab, aes(x = predicted, y = WL_max)) +
geom_point(color = "#336699", size = 3, alpha = 0.6) +
geom_smooth(method = "lm", formula = y ~ x, se = TRUE, color = "#990000",
size = 0.8) +
labs(x = "Predicted", y = "Observed") +
ggtitle("PC1 and PC2 predicting weight loss") +
theme_minimal() +
theme(plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.position = "none") +
annotate("text", x = max(predicted), y = min(lab$WL_max),
label = eq_text, hjust = 1, vjust = -0.2,
color = "black", size = 4, fontface = "bold") +
stat_poly_eq(
formula = y ~ x,
label.x = "right", label.y = "bottom",
label = paste("R^2 =", round(r_squared, 2)),
parse = TRUE,
size = 4,
family = "serif",
fontface = "bold",
aes(label = paste("R^2 =", round(summary(model)$r.squared, 2))),
label.x.npc = 0.70, label.y.npc = 0.4
)# -> linear_pc1_pc2_WL
# Tidy model summary
tidy_model <- tidy(model)
# Create a table of model coefficients
coef_table <- tidy_model %>%
mutate(
term = ifelse(term == "(Intercept)", "Intercept", term),
Estimate = round(estimate, 2),
`Std. Error` = round(std.error, 2),
`t value` = round(statistic, 2),
`Pr(>|t|)` = p.value
) %>%
select(term, Estimate, `Std. Error`, `t value`, `Pr(>|t|)`) %>%
rename(`Pr(>|t|)` = `Pr(>|t|)`)
# Print the coefficient table
write.csv(coef_table, "tables/coefficient_table_pc1_pc2_linear.csv",
row.names = FALSE)
ggsave(filename = "figures/linear_pc1_pc2_WL.jpeg", plot = linear_pc1_pc2_WL,
width = 6, height = 4, dpi = 300)
# Calculate residuals
residuals <- lab$WL_max - predicted
# Generate equation text for residuals
eq_text_residuals <- paste("Residuals =", round(coef(model)[1], 2),
"+", round(coef(model)[2], 2), "PC1",
"+", round(coef(model)[3], 2), "PC2")
# Plot the residuals
residuals_pc1_pc2_WL <-
ggplot(lab, aes(x = predicted, y = residuals)) +
geom_point(color = "#336699", size = 3, alpha = 0.6) +
geom_hline(yintercept=0, color = "#990000",
size = 0.8) +
labs(x = "Predicted", y = "Residuals") +
ggtitle("Residual plot of PC1 and PC2 predicting weight loss") +
theme_minimal() +
theme(plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.position = "none") +
annotate("text", x = max(predicted), y = min(residuals),
label = eq_text_residuals, hjust = 1, vjust = -0.2,
color = "black", size = 4, fontface = "bold")
ggsave(filename = "figures/residuals_pc1_pc2_WL.jpeg", plot = residuals_pc1_pc2_WL,
width = 12, height = 6, dpi = 600)
# Create partial dependence data for each predictor
pdp_PC1 <- partial(model_2, pred.var = "PC1", grid.resolution = 20, plot = TRUE)
pdp_PC2 <- partial(model_2, pred.var = "PC2", grid.resolution = 20, plot = TRUE)
pdp_current_infection <- partial(model_2, pred.var = "current_infection", grid.resolution = 20, plot = TRUE)
# Perform linear regression
model <- lm(WL_max ~ PC1 + PC2 + immunization, data = lab)
# Generate equation text
eq_text <- paste("WL_max =", round(coef(model)[1], 2),
"+", round(coef(model)[2], 2), "PC1",
"+", round(coef(model)[3], 2), "PC2")
# Calculate R-squared
predicted <- predict(model)
r_squared <- summary(model)$r.squared
r_squared_text <- paste("R-squared =", round(r_squared, 2))
# Plot the data with the equation and R-squared
linear_pc1_pc2_immunization <-
ggplot(lab, aes(x = predicted, y = WL_max, color = immunization)) +
geom_point(size = 3, alpha = 0.5) +
geom_smooth(method = "lm", formula = y ~ x, se = TRUE, color = "#990000",
size = 0.8) +
labs(x = "Predicted", y = "Observed") +
ggtitle("PC1, PC2, and immunization predicting weight loss") +
theme_minimal() +
theme(plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.position = "right") +
annotate("text", x = max(predicted), y = min(lab$WL_max),
label = eq_text, hjust = 1, vjust = -0.2,
color = "black", size = 4, fontface = "bold") +
annotate("text", x = max(predicted), y = min(lab$WL_max) - 2,
label = r_squared_text, hjust = 1, vjust = -0.2,
color = "black", size = 4, fontface = "bold") +
scale_color_brewer(palette = "Set1")  # Use a color palette from RColorBrewer
ggsave(filename = "figures/linear_pc1_pc2_immunization.jpeg",
plot = linear_pc1_pc2_immunization,
width = 12, height = 6, dpi = 600)
# Calculate residuals
residuals <- lab$WL_max - predicted
# Load the required packages
###PC1 PC2 linear regression
model_1 <- lm(WL_max ~ PC1 + PC2 + infection_intensity + current_infection +
mouse_strain + immunization +
weight_dpi0, data = lab %>%
dplyr::rename(infection_intensity = delta_ct_cewe_MminusE))
summary(model_1)
summary(model_1)
model_1 <- lm(WL_max ~ PC1 + PC2 + current_infection +
mouse_strain + immunization +
weight_dpi0, data = lab)
summary(model_1)
ggplot(., aes(value, WL_max)) +
geom_smooth(method = "lm") +
facet_wrap(~IV, scales = "free_x")
model_1 %>%
broom::augment() %>%
melt(measure.vars = c("PC1", "PC2", "infection_intensity", "current_infection",
"mouse_strain", "immunization", "weight_dpi0"),
variable.name = c("IV")) %>%
ggplot(., aes(value, WL_max)) +
geom_smooth(method = "lm") +
facet_wrap(~IV, scales = "free_x")
model_1 %>%
broom::augment() %>%
melt(measure.vars = c("PC1", "PC2", "infection_intensity", "current_infection",
"mouse_strain", "immunization", "weight_dpi0"),
variable.name = c("IV")) %>%
ggplot(., aes(value, WL_max)) +
geom_smooth(method = "lm") +
facet_wrap(~IV, scales = "free_x")
library(reshape2)
model_1 %>%
broom::augment() %>%
melt(measure.vars = c("PC1", "PC2", "infection_intensity", "current_infection",
"mouse_strain", "immunization", "weight_dpi0"),
variable.name = c("IV")) %>%
ggplot(., aes(value, WL_max)) +
geom_smooth(method = "lm") +
facet_wrap(~IV, scales = "free_x")
model_1 %>%
broom::augment() %>%
melt(measure.vars = c("PC1", "PC2", "delta_ct_cewe_MminusE", "current_infection",
"mouse_strain", "immunization", "weight_dpi0"),
variable.name = c("IV")) %>%
ggplot(., aes(value, WL_max)) +
geom_smooth(method = "lm") +
facet_wrap(~IV, scales = "free_x")
summary(model_1)
# Load the required packages
###PC1 PC2 linear regression
model_1 <- lm(WL_max ~ PC1 + PC2 + delta_ct_cewe_MminusE + current_infection +
mouse_strain + immunization +
weight_dpi0, data = lab) #%>%
summary(model_1)
model_1 <- lm(WL_max ~ PC1 + PC2 + current_infection +
mouse_strain + immunization +
weight_dpi0, data = lab)
model_1 %>%
broom::augment() %>%
melt(measure.vars = c("PC1", "PC2", "delta_ct_cewe_MminusE", "current_infection",
"mouse_strain", "immunization", "weight_dpi0"),
variable.name = c("IV")) %>%
ggplot(., aes(value, WL_max)) +
geom_smooth(method = "lm") +
facet_wrap(~IV, scales = "free_x")
# Load the required packages
###PC1 PC2 linear regression
model_1 <- lm(WL_max ~ PC1 + PC2 + delta_ct_cewe_MminusE + current_infection +
mouse_strain + immunization +
weight_dpi0, data = lab) #%>%
# Load the required packages
###PC1 PC2 linear regression
model_1 <- lm(WL_max ~ PC1 + PC2 + delta_ct_cewe_MminusE + current_infection +
mouse_strain + immunization +
weight_dpi0, data = lab)
summary(model_1)
model_1 <- lm(WL_max ~ PC1 + PC2 + current_infection +
mouse_strain + immunization +
weight_dpi0, data = lab)
model_1 %>%
broom::augment() %>%
melt(measure.vars = c("PC1", "PC2", "delta_ct_cewe_MminusE", "current_infection",
"mouse_strain", "immunization", "weight_dpi0"),
variable.name = c("IV")) %>%
ggplot(., aes(value, WL_max)) +
geom_smooth(method = "lm") +
facet_wrap(~IV, scales = "free_x")
model_1 %>%
broom::augment() %>%
melt(measure.vars = c("PC1", "PC2", "delta_ct_cewe_MminusE", "current_infection",
"mouse_strain", "immunization", "weight_dpi0"),
variable.name = c("IV")) %>%
ggplot(., aes(value, WL_max)) +
geom_smooth(method = "lm") +
facet_wrap(~IV, scales = "free_x")
model_1 %>%
broom::augment() %>%
melt(measure.vars = c("PC1", "PC2", "delta_ct_cewe_MminusE", "current_infection",
"mouse_strain", "immunization", "weight_dpi0"),
variable.name = c("IV")) %>%
ggplot(., aes(value, WL_max)) +
geom_smooth(method = "lm") +
facet_wrap(~IV, scales = "free_x")
# Load the required packages
###PC1 PC2 linear regression
model_1 <- lm(WL_max ~ PC1 + PC2 + delta_ct_cewe_MminusE + current_infection +
mouse_strain + immunization +
weight_dpi0, data = lab)
summary(model_1)
######################################## just immunization
model_immunization <- lm(WL_max ~ immunization, data = lab)
# Generate equation text
eq_text <- paste("WL_max =", round(coef(model_immunization)[1], 2), " + ",
"immunization")
# Calculate R-squared
predicted <- predict(model_immunization)
r_squared <- summary(model_immunization)$r.squared
r_squared_text <- paste("R-squared =", round(r_squared, 2))
# Plot the data with the equation and R-squared
linear_immunization <-
ggplot(lab, aes(x = predicted, y = WL_max, color = immunization)) +
geom_point(size = 3, alpha = 0.5) +
geom_smooth(method = "lm", formula = y ~ x, se = TRUE, color = "#990000",
size = 0.8) +
labs(x = "Predicted", y = "Observed") +
ggtitle("Infection Type predicting weight loss") +
theme_minimal() +
theme(plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.position = "right") +
annotate("text", x = max(predicted), y = min(lab$WL_max),
label = eq_text, hjust = 1, vjust = -0.2,
color = "black", size = 4, fontface = "bold") +
annotate("text", x = max(predicted), y = min(lab$WL_max) - 2,
label = r_squared_text, hjust = 1, vjust = -0.2,
color = "black", size = 4, fontface = "bold") +
scale_color_brewer(palette = "Set1")  # Use a color palette from RColorBrewer
ggsave(filename = "figures/linear_immunization.jpeg",
plot = residuals_pc1_pc2_immunization,
width = 12, height = 6, dpi = 600)
# Calculate residuals
residuals <- lab$WL_max - predicted
# Generate equation text for residuals
eq_text_residuals <- paste("Residuals =", round(coef(model_immunization)[1], 2), " + ",
"immunization")
# Plot the residuals
residuals_immunization <-
ggplot(lab, aes(x = predicted, y = residuals, color = immunization)) +
geom_point(size = 3, alpha = 0.5) +
geom_hline(yintercept=0, color = "#990000",
size = 0.8) +
labs(x = "Predicted", y = "Residuals") +
ggtitle("Residual plot of Infection Type predicting weight loss") +
theme_minimal() +
theme(plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.position = "right") +
annotate("text", x = max(predicted), y = min(residuals),
label = eq_text_residuals, hjust = 1, vjust = -0.2,
color = "black", size = 4, fontface = "bold") +
scale_color_brewer(palette = "Set1")  # Use a color palette from RColorBrewer
# Plot the residuals
#residuals_immunization <-
ggplot(lab, aes(x = predicted, y = residuals, color = immunization)) +
geom_point(size = 3, alpha = 0.5) +
geom_hline(yintercept=0, color = "#990000",
size = 0.8) +
labs(x = "Predicted", y = "Residuals") +
ggtitle("Residual plot of Infection Type predicting weight loss") +
theme_minimal() +
theme(plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.position = "right") +
annotate("text", x = max(predicted), y = min(residuals),
label = eq_text_residuals, hjust = 1, vjust = -0.2,
color = "black", size = 4, fontface = "bold") +
scale_color_brewer(palette = "Set1")  # Use a color palette from RColorBrewer
# Load the required packages
###PC1 PC2 linear regression
model_1 <- lm(WL_max ~ PC1 + PC2 + delta_ct_cewe_MminusE + current_infection +
mouse_strain + immunization +
weight_dpi0, data = lab)
summary(model_1)
model_1 <- lm(WL_max ~ PC1 + PC2 + current_infection +
mouse_strain + immunization +
weight_dpi0, data = lab)
model_1 %>%
broom::augment() %>%
melt(measure.vars = c("PC1", "PC2", "delta_ct_cewe_MminusE", "current_infection",
"mouse_strain", "immunization", "weight_dpi0"),
variable.name = c("IV")) %>%
ggplot(., aes(value, WL_max)) +
geom_smooth(method = "lm") +
facet_wrap(~IV, scales = "free_x")
plot(ggeffect(model_1))
# Load the required packages
###PC1 PC2 linear regression
model_1 <- lm(WL_max ~ PC1 + PC2 + delta_ct_cewe_MminusE + current_infection +
mouse_strain + immunization +
weight_dpi0, data = lab)
summary(model_1)
model_1 <- lm(WL_max ~ PC1 + PC2 + current_infection +
mouse_strain + immunization +
weight_dpi0, data = lab)
plot(ggeffect(model_1))
ggeffect(model_1)
model_1 %>%
broom::augment() %>%
melt(measure.vars = c("PC1", "PC2", "delta_ct_cewe_MminusE", "current_infection",
"mouse_strain", "immunization", "weight_dpi0"),
variable.name = c("IV")) %>%
ggplot(., aes(value, WL_max)) +
geom_smooth(method = "lm") +
facet_wrap(~IV, scales = "free_x")
model_1 %>%
broom::augment() %>%
melt(measure.vars = c("PC1", "PC2", "current_infection",
"mouse_strain", "immunization", "weight_dpi0"),
variable.name = c("IV")) %>%
ggplot(., aes(value, WL_max)) +
geom_smooth(method = "lm") +
facet_wrap(~IV, scales = "free_x")
# Load the required packages
###PC1 PC2 linear regression
model_1 <- lm(WL_max ~ PC1 + PC2 + delta_ct_cewe_MminusE + current_infection +
mouse_strain + immunization +
weight_dpi0, data = lab)
summary(model_1)
model_1 <- lm(WL_max ~ PC1 + PC2 + current_infection +
mouse_strain + immunization +
weight_dpi0, data = lab)
plot(ggeffect(model_1))
ggeffect(model_1)
model_1 %>%
broom::augment() %>%
melt(measure.vars = c("PC1", "PC2", "current_infection",
"mouse_strain", "immunization", "weight_dpi0"),
variable.name = c("IV")) %>%
ggplot(., aes(value, WL_max)) +
geom_smooth(method = "lm") +
facet_wrap(~IV, scales = "free_x")
ggeffect(model_1)
summary(model_1)
# Plot the data with the equation and R-squared
ggplot(lab, aes(x = predicted, y = WL_max)) +
geom_point(color = "#336699", size = 3, alpha = 0.6) +
geom_smooth(method = "lm", formula = y ~ x, se = TRUE, color = "#990000",
size = 0.8) +
labs(x = "Predicted", y = "Observed") +
ggtitle("PC1 and PC2 predicting weight loss") +
theme_minimal() +
theme(plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.position = "none") +
annotate("text", x = max(predicted), y = min(lab$WL_max),
label = eq_text, hjust = 1, vjust = -0.2,
color = "black", size = 4, fontface = "bold") +
stat_poly_eq(
formula = y ~ x,
label.x = "right", label.y = "bottom",
label = paste("R^2 =", round(r_squared, 2)),
parse = TRUE,
size = 4,
family = "serif",
fontface = "bold",
aes(label = paste("R^2 =", round(summary(model)$r.squared, 2))),
label.x.npc = 0.70, label.y.npc = 0.4
)# -> linear_pc1_pc2_WL
plot(effects)
model_1 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE +
mouse_strain + immunization +
weight_dpi0, data = lab)
plot(ggeffect(model_1))
# Load the required packages
###PC1 PC2 linear regression
model_1 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE +
mouse_strain + immunization +
weight_dpi0, data = lab)
summary(model_1)
plot(ggeffect(model_1))
plot(ggpredict(model_1))
plot(effects, terms = c("PC1", "PC2"))
#see the ggefects
effects <- ggeffect(model_1)
plot(effects, terms = c("PC1", "PC2", "mouse_strain"))
