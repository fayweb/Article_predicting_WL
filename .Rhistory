dct_max <- max(df$MPO_dct, na.rm = TRUE)
#fold gene expression
df <- df %>%
mutate(MPO_N = 2^ - (MPO_dct - dct_max)) %>%
mutate(MPO_N = round(MPO_N, digits = 2))
##############  MUC2
df <- df %>%
mutate(MUC2_dct = MUC2 - GAPDH)
# max of dct
dct_max <- max(df$MUC2_dct, na.rm = TRUE)
#fold gene expression
df <- df %>%
mutate(MUC2_N = 2^ - (MUC2_dct - dct_max)) %>%
mutate(MUC2_N = round(MUC2_N, digits = 2))
##############  MUC5AC
df <- df %>%
mutate(MUC5AC_dct = MUC5AC - GAPDH)
# max of dct
dct_max <- max(df$MUC5AC_dct, na.rm = TRUE)
#fold gene expression
df <- df %>%
mutate(MUC5AC_N = 2^ - (MUC5AC_dct - dct_max)) %>%
mutate(MUC5AC_N = round(MUC5AC_N, digits = 2))
##############  MYD88
df <- df %>%
mutate(MYD88_dct = MYD88 - GAPDH)
# max of dct
dct_max <- max(df$MYD88_dct, na.rm = TRUE)
#fold gene expression
df <- df %>%
mutate(MYD88_N = 2^ - (MYD88_dct - dct_max)) %>%
mutate(MYD88_N = round(MYD88_N, digits = 2))
##############  NCR1
df <- df %>%
mutate(NCR1_dct = NCR1 - GAPDH)
# max of dct
dct_max <- max(df$NCR1_dct, na.rm = TRUE)
#fold gene expression
df <- df %>%
mutate(NCR1_N = 2^ - (NCR1_dct - dct_max)) %>%
mutate(NCR1_N = round(NCR1_N, digits = 2))
##############  PRF1
df <- df %>%
mutate(PRF1_dct = PRF1 - GAPDH)
# max of dct
dct_max <- max(df$PRF1_dct, na.rm = TRUE)
#fold gene expression
df <- df %>%
mutate(PRF1_N = 2^ - (PRF1_dct - dct_max)) %>%
mutate(PRF1_N = round(PRF1_N, digits = 2))
##############  RETNLB
df <- df %>%
mutate(RETNLB_dct = RETNLB - GAPDH)
# max of dct
dct_max <- max(df$RETNLB_dct, na.rm = TRUE)
#fold gene expression
df <- df %>%
mutate(RETNLB_N = 2^ - (RETNLB_dct - dct_max)) %>%
mutate(RETNLB_N = round(RETNLB_N, digits = 2))
##############  SOCS1
df <- df %>%
mutate(SOCS1_dct = SOCS1 - GAPDH)
# max of dct
dct_max <- max(df$SOCS1_dct, na.rm = TRUE)
#fold gene expression
df <- df %>%
mutate(SOCS1_N = 2^ - (SOCS1_dct - dct_max)) %>%
mutate(SOCS1_N = round(SOCS1_N, digits = 2))
##############  TICAM1
df <- df %>%
mutate(TICAM1_dct = TICAM1 - GAPDH)
# max of dct
dct_max <- max(df$TICAM1_dct, na.rm = TRUE)
#fold gene expression
df <- df %>%
mutate(TICAM1_N = 2^ - (TICAM1_dct - dct_max)) %>%
mutate(TICAM1_N = round(TICAM1_N, digits = 2))
##############  TNF
df <- df %>%
mutate(TNF_dct = TNF - GAPDH)
# max of dct
dct_max <- max(df$TNF_dct, na.rm = TRUE)
#fold gene expression
df <- df %>%
mutate(TNF_N = 2^ - (TNF_dct - dct_max)) %>%
mutate(TNF_N = round(TNF_N, digits = 2))
df -> df_field
## ---------------------------------------------------------------------------------------------------
################################# lab
# select first the field samples
df_lab <- gene_lab_mouse
############### IFNy
df_lab <- df_lab %>%
mutate(IFNy_dct = IFNy - PPIB)
# max of dct
dct_max <- max(df_lab$IFNy_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(IFNy_N = 2^ - (IFNy_dct - dct_max)) %>%
mutate(IFNy_N = round(IFNy_N, digits = 2))
############### CXCR3
df_lab <- df_lab %>%
mutate(CXCR3_dct = CXCR3 - PPIB)
# max of dct
dct_max <- max(df_lab$CXCR3_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(CXCR3_N = 2^ - (CXCR3_dct - dct_max)) %>%
mutate(CXCR3_N = round(CXCR3_N, digits = 2))
############### IL.6
df_lab <- df_lab %>%
mutate(IL.6_dct = IL.6 - PPIB)
# max of dct
dct_max <- max(df_lab$IL.6_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(IL.6_N = 2^ - (IL.6_dct - dct_max)) %>%
mutate(IL.6_N = round(IL.6_N, digits = 2))
############## IL.13
df_lab <- df_lab %>%
mutate(IL.13_dct = IL.13 - PPIB)
# max of dct
dct_max <- max(df_lab$IL.13_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(IL.13_N = 2^ - (IL.13_dct - dct_max)) %>%
mutate(IL.13_N = round(IL.13_N, digits = 2))
##############  IL1RN
df_lab <- df_lab %>%
mutate(IL1RN_dct = IL1RN - PPIB)
# max of dct
dct_max <- max(df_lab$IL1RN_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(IL1RN_N = 2^ - (IL1RN_dct - dct_max)) %>%
mutate(IL1RN_N = round(IL1RN_N, digits = 2))
##############  CASP1
df_lab <- df_lab %>%
mutate(CASP1_dct = CASP1 - PPIB)
# max of dct
dct_max <- max(df_lab$CASP1_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(CASP1_N = 2^ - (CASP1_dct - dct_max)) %>%
mutate(CASP1_N = round(CASP1_N, digits = 2))
##############  CXCL9
df_lab <- df_lab %>%
mutate(CXCL9_dct = CXCL9 - PPIB)
# max of dct
dct_max <- max(df_lab$CXCL9_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(CXCL9_N = 2^ - (CXCL9_dct - dct_max)) %>%
mutate(CXCL9_N = round(CXCL9_N, digits = 2))
##############  IDO1
df_lab <- df_lab %>%
mutate(IDO1_dct = IDO1 - PPIB)
# max of dct
dct_max <- max(df_lab$IDO1_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(IDO1_N = 2^ - (IDO1_dct - dct_max)) %>%
mutate(IDO1_N = round(IDO1_N, digits = 2))
##############  IRGM1
df_lab <- df_lab %>%
mutate(IRGM1_dct = IRGM1 - PPIB)
# max of dct
dct_max <- max(df_lab$IRGM1_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(IRGM1_N = 2^ - (IRGM1_dct - dct_max)) %>%
mutate(IRGM1_N = round(IRGM1_N, digits = 2))
##############  MPO
df_lab <- df_lab %>%
mutate(MPO_dct = MPO - PPIB)
# max of dct
dct_max <- max(df_lab$MPO_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(MPO_N = 2^ - (MPO_dct - dct_max)) %>%
mutate(MPO_N = round(MPO_N, digits = 2))
##############  MUC2
df_lab <- df_lab %>%
mutate(MUC2_dct = MUC2 - PPIB)
# max of dct
dct_max <- max(df_lab$MUC2_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(MUC2_N = 2^ - (MUC2_dct - dct_max)) %>%
mutate(MUC2_N = round(MUC2_N, digits = 2))
##############  MUC5AC
df_lab <- df_lab %>%
mutate(MUC5AC_dct = MUC5AC - PPIB)
# max of dct
dct_max <- max(df_lab$MUC5AC_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(MUC5AC_N = 2^ - (MUC5AC_dct - dct_max)) %>%
mutate(MUC5AC_N = round(MUC5AC_N, digits = 2))
##############  MYD88
df_lab <- df_lab %>%
mutate(MYD88_dct = MYD88 - PPIB)
# max of dct
dct_max <- max(df_lab$MYD88_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(MYD88_N = 2^ - (MYD88_dct - dct_max)) %>%
mutate(MYD88_N = round(MYD88_N, digits = 2))
##############  NCR1
df_lab <- df_lab %>%
mutate(NCR1_dct = NCR1 - PPIB)
# max of dct
dct_max <- max(df_lab$NCR1_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(NCR1_N = 2^ - (NCR1_dct - dct_max)) %>%
mutate(NCR1_N = round(NCR1_N, digits = 2))
##############  PRF1
df_lab <- df_lab %>%
mutate(PRF1_dct = PRF1 - PPIB)
# max of dct
dct_max <- max(df_lab$PRF1_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(PRF1_N = 2^ - (PRF1_dct - dct_max)) %>%
mutate(PRF1_N = round(PRF1_N, digits = 2))
##############  RETNLB
df_lab <- df_lab %>%
mutate(RETNLB_dct = RETNLB - PPIB)
# max of dct
dct_max <- max(df_lab$RETNLB_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(RETNLB_N = 2^ - (RETNLB_dct - dct_max)) %>%
mutate(RETNLB_N = round(RETNLB_N, digits = 2))
##############  SOCS1
df_lab <- df_lab %>%
mutate(SOCS1_dct = SOCS1 - PPIB)
# max of dct
dct_max <- max(df_lab$SOCS1_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(SOCS1_N = 2^ - (SOCS1_dct - dct_max)) %>%
mutate(SOCS1_N = round(SOCS1_N, digits = 2))
##############  TICAM1
df_lab <- df_lab %>%
mutate(TICAM1_dct = TICAM1 - PPIB)
# max of dct
dct_max <- max(df_lab$TICAM1_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(TICAM1_N = 2^ - (TICAM1_dct - dct_max)) %>%
mutate(TICAM1_N = round(TICAM1_N, digits = 2))
##############  TNF
df_lab <- df_lab %>%
mutate(TNF_dct = TNF - PPIB)
# max of dct
dct_max <- max(df_lab$TNF_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(TNF_N = 2^ - (TNF_dct - dct_max)) %>%
mutate(TNF_N = round(TNF_N, digits = 2))
## ---------------------------------------------------------------------------------------------------
#df_lab <- df_lab %>%
#  dplyr::select(-c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
#"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",   "MUC2", "MUC5AC", "MYD88",
#"NCR1", "PRF1", "RETNLB", "SOCS1",   "TICAM1", "TNF", PPIB, contains("_dct")))
# remove ending _N
#df_lab <- df_lab %>%
#  rename_with(~str_remove(.x, "_N"))
#df_field <- df_field %>%
#  dplyr::select(-c(all_of(Genes_wild), GAPDH, contains("_dct")))
# remove ending _N
#df_field <- df_field %>%
# rename_with(~str_remove(.x, "_N"))
###################### let's try just using DCT
df_lab <- df_lab %>%
dplyr::select(-c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10", "IL1RN","CASP1",
"CXCL9", "IDO1", "IRGM1", "MPO", "MUC2", "MUC5AC", "MYD88",
"NCR1", "PRF1", "RETNLB", "SOCS1",  "TICAM1", "TNF", "PPIB",
contains("_N")))
# remove ending _dct
df_lab <- df_lab %>%
rename_with(~str_remove(.x, "_dct"))
df_field <- df_field %>%
dplyr::select(-c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10", "IL1RN","CASP1",
"CXCL9", "IDO1", "IRGM1", "MPO", "MUC2", "MUC5AC", "MYD88",
"NCR1", "PRF1", "RETNLB", "SOCS1",  "TICAM1", "TNF", "GAPDH",
contains("_N")))
# remove ending
df_field <- df_field %>%
rename_with(~str_remove(.x, "_dct"))
View(lab)
View(lab)
source("~/GitHub/Article_predicting_WL/R/Scripts/1.Data_prep.R")
library(dplyr)
library(janitor)
library(visdat)
## ---------------------------------------------------------------------------------------------------
Challenge <- read.csv("Data/Data_input/Challenge_infections.csv")
SOTA <- read.csv("Data/Data_input/SOTA_Data_Product.csv")
library(dplyr)
library(janitor)
library(visdat)
## ---------------------------------------------------------------------------------------------------
Challenge <- read.csv("Data/Data_input/Challenge_infections.csv")
SOTA <- read.csv("Data/Data_input/SOTA_Data_Product.csv")
# Vectors for selecting genes
#Lab genes
# The measurements of IL.12 and IRG6 are done with an other assay and will
#ignore for now
Gene_lab   <- c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF") #"IL.12", "IRG6")
Genes_wild   <- c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF") #, "IL.12", "IRG6")
Facs_lab <- c("Position", "CD4", "Treg", "Div_Treg", "Treg17", "Th1",
"Div_Th1", "Th17", "Div_Th17", "CD8", "Act_CD8",
"Div_Act_CD8", "IFNy_CD4", "IFNy_CD8","Treg_prop",
"IL17A_CD4")
Facs_wild <- c( "Treg", "CD4", "Treg17", "Th1", "Th17", "CD8",
"Act_CD8", "IFNy_CD4", "IL17A_CD4", "IFNy_CD8")
## ---- echo = FALSE----------------------------------------------------------------------------------
Challenge <- Challenge %>%
dplyr::mutate(Parasite_primary = case_when(
primary_infection == "E64" ~ "E_ferrisi",
primary_infection == "E88" ~ "E_falciformis",
primary_infection == "Eflab" ~ "E_falciformis",
primary_infection == "E139" ~ "E_ferrisi",
primary_infection == "UNI" ~ "uninfected",
TRUE ~ ""))
Challenge <- Challenge %>%
dplyr::mutate(Parasite_challenge = case_when(
challenge_infection == "E64" ~ "E_ferrisi",
challenge_infection == "E88" ~ "E_falciformis",
challenge_infection == "Eflab" ~ "E_falciformis",
challenge_infection == "E139" ~ "E_ferrisi",
challenge_infection == "UNI" ~ "uninfected",
TRUE ~ ""))
Challenge <- Challenge %>%
dplyr::mutate(infection_history = case_when(
Parasite_primary == "uninfected" &
Parasite_challenge == "uninfected" ~ "uninfected",
Parasite_primary == "uninfected" &
Parasite_challenge == "E_ferrisi" ~ "uninfected_ferrisi",
Parasite_primary == "uninfected" &
Parasite_challenge == "E_falciformis" ~ "uninfected_falciformis",
Parasite_primary == "E_falciformis" &
Parasite_challenge == "E_falciformis" ~ "falciformis_falciformis",
Parasite_primary == "E_falciformis" &
Parasite_challenge == "E_ferrisi" ~ "falciformis_ferrisi",
Parasite_primary == "E_falciformis" &
Parasite_challenge == "uninfected" ~ "falciformis_uninfected",
Parasite_primary == "E_ferrisi" &
Parasite_challenge == "E_falciformis" ~ "ferrisi_falciformis",
Parasite_primary == "E_ferrisi" &
Parasite_challenge == "E_ferrisi" ~ "ferrisi_ferrisi",
Parasite_primary == "E_ferrisi" &
Parasite_challenge == "uninfected" ~ "ferrisi_uninfected",
TRUE ~ ""))
### Add the variable end weight (relative weight at day of sacrifice)
# start by adding the variable dpi_max which inficates the last day of each mouse
Challenge <- Challenge %>%
dplyr::filter(!weight == "NA") %>%
dplyr::group_by(EH_ID, infection) %>%
dplyr::mutate(dpi_max = max(dpi), WL_max = (min(relative_weight) - 100))
#somehow case when dplyr ways didn't work for me and this is the only solution
#that is functional
#let's filter for the challenge mice
chal <- Challenge %>% filter(infection == "challenge")
#now only select the rows where the dpi is equal to the dpi max for each mouse
chal <- chal[chal$dpi == chal$dpi_max, ]
#now we can easily add the variable end weight to each mouse (which in now equal
#to the weight on the dpi = dpi_max)
chal <- chal %>% dplyr::mutate(end_rel_weight = (weight/weight_dpi0) * 100)
#let'repeat for the prim
#let's filter for the challenge mice
prim <- Challenge %>% filter(infection == "primary")
#now only select the rows where the dpi is equal to the dpi max for each mouse
prim <- prim[prim$dpi == prim$dpi_max, ]
View(prim)
#now we can easily add the variable end weight to each mouse (which in now equal
#to the weight on the dpi = dpi_max)
prim <- prim %>%
dplyr::mutate(end_rel_weight = (weight/weight_dpi0) * 100)
c <- rbind(chal, prim)
Challenge <- Challenge %>%
left_join(c %>%
dplyr::select(EH_ID, end_rel_weight), relationship = "many-to-many")
Challenge <- unique(Challenge)
Challenge <- unique(Challenge)
#There are two measuremts for CXCR3
# We want to here keep the CXCR3_bio
Challenge <- Challenge %>%
dplyr::select(-CXCR3)
#Now rename the CXCR3_bio to CXCR3
Challenge <- Challenge %>%
dplyr::rename(CXCR3 = CXCR3_bio)
rm(c, chal, prim)
## ---- message = FALSE, echo = FALSE-----------------------------------------------------------------
length(intersect(colnames(Challenge), colnames(SOTA)))
#37 intersecting columns
# create a function that is the opposite of intersect
outersect <- function(x, y) {
sort(c(setdiff(x, y),
setdiff(y, x)))
}
length(outersect(colnames(Challenge), colnames(SOTA)))
# 149 dissimilar columns
# add a column that indicates where the samples are from
Challenge <- Challenge %>%
dplyr::mutate(origin = "Lab")
SOTA <- SOTA %>%
dplyr::mutate(origin = "Field")
# Adjust the parasite names to fit the lab
SOTA <- SOTA %>%
dplyr::mutate(eimeriaSpecies = case_when(
eimeriaSpecies == "Negative" ~ "uninfected",
eimeriaSpecies == "" ~ "NA",
TRUE ~ eimeriaSpecies))
# Rename column names to match each other
Challenge <- Challenge %>%
dplyr::rename(Mouse_ID = EH_ID, delta_ct_cewe_MminusE = delta,
MC.Eimeria = Eim_MC, Feces_Weight = feces_weight)
# current_falciformis
# According to the melting curve for eimeria
Challenge <- Challenge %>%
dplyr::mutate(current_infection = case_when(
infection == "E_ferrisi" & MC.Eimeria == "TRUE" ~ "E_ferrisi",
infection == "E_ferrisi" & MC.Eimeria == "FALSE" ~ "uninfected",
infection == "E_falciformis" & MC.Eimeria == "TRUE" ~ "E_falciformis",
infection == "E_falciformis" & MC.Eimeria == "FALSE" ~ "uninfected",
infection == "uninfected" & MC.Eimeria == "TRUE" ~ "E_falciformis",
infection == "uninfected" & MC.Eimeria == "FALSE" ~ "uninfected",
TRUE ~ ""
),
immunization = case_when(
infection_history == "falciformis_ferrisi" ~ "heterologous",
infection_history == "ferrisi_falciformis" ~ "heterologous",
infection_history == "falciformis_uninfected" ~ "uninfected",
infection_history == "ferrisi_uninfected" ~ "uninfected",
infection_history == "ferrisi_ferrisi" ~ "homologous",
infection_history == "falciformis_falciformis" ~ "homologous",
infection_history == "uninfected_falciformis" ~ "naive",
infection_history == "uninfected_ferrisi" ~ "naive",
infection_history == "uninfected" ~ "uninfected",
TRUE ~ "NA"
))
# now join the two data sets
data <- full_join(Challenge, SOTA,
by = intersect(colnames(SOTA), colnames(Challenge)))
2742 + 1921
data <- data %>%
dplyr::select(-ends_with("_N"))
write.csv(data, "Data/Data_output/1.MICE_cleaned_data.csv", row.names = FALSE)
View(Challenge)
source("R/Scripts/1.Data_prep.R")
## ---------------------------------------------------------------------------------------------------
library(mice)
library(tidyr)
library(dplyr)
library(stringr)
## ---------------------------------------------------------------------------------------------------
hm <- data
## ---------------------------------------------------------------------------------------------------
# Vectors for selecting genes
#Lab genes
# The measurements of IL.12 and IRG6 are done with an other assay and will
#ignore for now
Gene_lab   <- c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF") #"IL.12", "IRG6")
Genes_wild   <- c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF") #, "IL.12", "IRG6")
## ----imputing_mice----------------------------------------------------------------------------------
hm$Mouse_ID <- str_replace(hm$Mouse_ID, "_", "")
field <- hm %>%
dplyr::filter(origin == "Field")
field <- unique(field)
genes_mouse_field <- field %>%
dplyr::select(c(Mouse_ID, all_of(Genes_wild), GAPDH))
genes_field <- genes_mouse_field  %>%
dplyr::select(-Mouse_ID)
#remove rows with only nas
genes_field <- genes_field[,colSums(is.na(genes_field))<nrow(genes_field)]
#remove colums with only nas
genes_field <- genes_field[rowSums(is.na(genes_field)) != ncol(genes_field), ]
genes_mouse_field <- genes_mouse_field[row.names(genes_field), ]
##select same rows in the first table
field <- field[row.names(genes_field), ]
###############lab
#select the genes and lab muce
lab <- hm %>%
dplyr::filter(origin == "Lab", Position == "mLN") #selecting for mln to avoid
# duplicates
lab <- unique(lab)
gene_lab_mouse <- lab %>%
dplyr::select(c(Mouse_ID, "IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF", PPIB))
###############lab
#select the genes and lab muce
lab <- hm %>%
dplyr::filter(origin == "Lab", Position == "mLN") #selecting for mln to avoid
View(lab)
