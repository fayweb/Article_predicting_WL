theme(legend.position = "none") +
# labs(title = "PCA graph of variabes") +
# Coloring for the 19 genes
scale_color_manual(values = color_palette)
print(pca_variables)
# Create the scatter plot
residuals_vs_fitted <-
ggplot(data_df, aes(x = fitted_values, y = residuals)) +
geom_point(color = "blue") +
ggtitle("Residuals vs Fitted Values") +
xlab("Fitted Values") +
ylab("Residuals") +
theme_minimal()
residuals_vs_fitted
ggsave(filename = "figures/residuals_vs_fitted.jpeg",
plot = residuals_vs_fitted,
width = 12, height = 6, dpi = 600)
#########
# without parasite data
model_2 <- lm(WL_max ~ PC1 + PC2 + mouse_strain + weight_dpi0, data = lab)
summary(model_2)
# without host data
model_3 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE +
immunization + weight_dpi0, data = lab)
summary(model_3)
# only pc1 + pc2
model_4 <- lm(WL_max ~ PC1 + PC2 , data = lab)
summary(model_4)
tab_model(model_4, file = "tables/pc1_pc2_lm.doc")
## Please cite as:
##  Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
stargazer(model_1, model_2, model_3, model_4,
type = "html", out = "figures/predictors_weightloss.html",
title = "Linear models - Predicting maximum weight loss")
#correcting for nas in delta ct
model_2 <- lm(WL_max ~ PC1 + PC2 + mouse_strain + weight_dpi0, data = lab %>%
drop_na(delta_ct_cewe_MminusE))
# Contributions of variables to PC1
fviz_contrib(res.pca, choice = "var", axes = 1, top = 18,
title = "Contribution of immune genes to the first dimension of the PCA",
fill =  "seagreen2") -> contributions_pc1
contributions_pc1
ggsave(filename = "figures/contributions_pc1.jpeg", plot = contributions_pc1,
width = 6, height = 4, dpi = 1000)
## Contributions of variables to PC2
fviz_contrib(res.pca, choice = "var", axes = 2, top = 18,
title = "Contribution of immune genes to the second dimension of the PCA",
fill =  "seagreen2") -> contributions_pc2
contributions_pc2
ggsave(filename = "figures/contributions_pc2.jpeg", plot = contributions_pc2,
width = 6, height = 4, dpi = 1000)
figure_panel_1 <- ggarrange(pca_variables, pca_individuals,
contributions_pc1, contributions_pc2,
pc1_current_infection, pc2_current_infection,
pc1_WL_current_infection, pc2_WL_current_infection,
labels = c("A", "B", "C", "D", "E", "F", "G", "H"),
ncol = 2, nrow = 4)
# Adding the title "Figure 1" to the entire arrangement
figure_panel_1 <- annotate_figure(figure_panel_1,
top = text_grob("Figure 1", size = 14,
face = "bold"))
print(figure_panel_1)
ggsave("figure_panels/figure_panel_1.jpeg", figure_panel_1,
width = 16, height = 16, dpi = 1000)
ggsave("figure_panels/figure_panel_1.jpeg", figure_panel_1,
width = 18, height = 18, dpi = 1000)
ggsave("figure_panels/figure_panel_1.jpeg", figure_panel_1,
width = 18, height = 18, dpi = 1000)
ggsave("figure_panels/figure_panel_1.jpeg", figure_panel_1,
width = 20, height = 20, dpi = 1000)
print(figure_panel_1)
ggsave("figure_panels/figure_panel_1.jpeg", figure_panel_1,
width = 20, height = 20, dpi = 300)
pca_variables
pca_variables
ggsave("figure_panels/figure_panel_1.jpeg", figure_panel_1,
width = 20, height = 22, dpi = 300)
ggsave("figure_panels/figure_panel_1.jpeg", figure_panel_1,
width = 20, height = 24, dpi = 300)
ggsave("figure_panels/figure_panel_1.jpeg", figure_panel_1,
width = 20, height = 22, dpi = 300)
fviz_pca_biplot(res.pca,
col.ind = lab$current_infection, palette = "jco",
addEllipses = TRUE, label = "var",
col.var = "black", repel = TRUE,
legend.title = "Infection groups",
title = "")
#Determine the Number of Clusters Using the Elbow Method:
# unsupervised learning technique
#K-means clustering
# ++++++++++++++++++++
# scale the data to have a more balanced data set
pc_scale <- scale(lab %>% dplyr::select(pc1,pc2))
#if (!require("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
#BiocManager::install("org.Mm.eg.db")
# BiocManager::install("clusterProfiler")
library(FactoMineR)
library(reshape2)
library(corrplot)
library(factoextra)
library(lmtest)
library(ggpubr)
library(janitor)
library(pheatmap)
library(visdat)
library(scatterplot3d)
library(clusterProfiler) # gene enrichment analysis
library(org.Mm.eg.db) # gene ids identifiers Mus musculus
library(viridis)
library(tidyr)
library(dplyr)
hm <- read.csv("Data/Data_output/imputed_clean_data.csv")
# WOrking with laboratory data only
# Select genes
lab <- hm %>%
dplyr::filter(origin == "Lab")
Genes_v   <- c("IFNy", "CXCR3", "IL.6", "IL.13", #"IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF") #"IL.12", "IRG6")
genes <- lab[ ,colnames(lab) %in% Genes_v]
# PCA
## we can now run a normal pca on the complete data set
res.pca <- PCA(genes)
## How much does each dimension contribute to variance?
fviz_eig(res.pca, addlabels = TRUE, ylim = c(0, 70), barfill = "seagreen2") ->
variance_contrib
variance_contrib
ggsave(filename = "figures/contributions_all_dimentsions.jpeg", plot = variance_contrib,
width = 6, height = 4, dpi = 1000)
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#DB6212", "#CC8733", "#5f25e6", "#073DA8"),
repel = TRUE, title = "") -> pca_col
ggsave(filename = "figures/pca_fviz_package.jpeg", plot = pca_col,
width = 10, height = 5, dpi = 300)
fviz_pca_ind(res.pca, col.ind = "cos2",
gradient.cols = c("#DB6212", "#CC8733", "#5f25e6", "#073DA8"),
repel = TRUE, title = "")
## Description of the dimensions
## We get a correlation between each variable and the first dimension
dimdesc(res.pca)
# Convert mouse_id to a data frame
mouse <- data.frame(Mouse_ID = lab[,1])
mouse_id <- data.frame(Mouse_ID = lab[,1])
# Add the new column pc1 to the mouse_id data frame
mouse$pc1 <- res.pca$ind$coord[, 1]
mouse$pc2 <- res.pca$ind$coord[, 2]  # indexing the second column
mouse$pc3 <-  res.pca$ind$coord[, 3]
mouse$pc4 <-  res.pca$ind$coord[, 4]
mouse$pc5 <-  res.pca$ind$coord[, 5]
lab <- lab %>%
left_join(mouse, by = "Mouse_ID")
## We also need to extract the data for the variable contributions to each of
## the pc axes.
pca.vars <- res.pca$var$coord %>% data.frame
pca.vars$vars <- rownames(pca.vars)
pca.vars.m <- melt(pca.vars, id.vars = "vars")
source("R/Functions/circle_fun.R")
circ <- circleFun(c(0,0),2,npoints = 500)
#Itâ€™s possible to use the function corrplot() [corrplot package] to highlight
#the most contributing variables for each dimension:
var.contrib <- as.data.frame(res.pca$var$contrib)
var.contrib.matrix <- data.matrix(var.contrib)
corrplot(var.contrib.matrix, is.corr=FALSE)
pca_var <- as.data.frame(pca.vars)
### Contributions to the first dimension
# Contributions of variables to PC1
fviz_contrib(res.pca, choice = "var", axes = 1, top = 18,
title = "Contribution of immune genes to the first dimension of the PCA",
fill =  "seagreen2") -> contributions_pc1
contributions_pc1
ggsave(filename = "figures/contributions_pc1.jpeg", plot = contributions_pc1,
width = 6, height = 4, dpi = 1000)
# res.pca$var$contrib
### Contributions to the second dimension
## Contributions of variables to PC2
fviz_contrib(res.pca, choice = "var", axes = 2, top = 18,
title = "Contribution of immune genes to the second dimension of the PCA",
fill =  "seagreen2") -> contributions_pc2
contributions_pc2
ggsave(filename = "figures/contributions_pc2.jpeg", plot = contributions_pc2,
width = 6, height = 4, dpi = 1000)
fviz_contrib(res.pca, choice = "var", axes = 1:2, top = 18)
# Total contribution on PC1 and PC2
fviz_contrib(res.pca, choice = "ind", axes = 1:2)
#select same rows in the first table
lab <- lab[row.names(genes), ]
fviz_pca_biplot(res.pca,
col.ind = lab$current_infection, palette = "jco",
addEllipses = TRUE, label = "var",
col.var = "black", repel = TRUE,
legend.title = "Infection groups",
title = "")
#Determine the Number of Clusters Using the Elbow Method:
# unsupervised learning tec
#Determine the Number of Clusters Using the Elbow Method:
# unsupervised learning technique
#K-means clustering
# ++++++++++++++++++++
# scale the data to have a more balanced data set
pc_scale <- scale(lab %>% dplyr::select(pc1,pc2))
pc_scale_dist <- dist(pc_scale)
fviz_nbclust(pc_scale, kmeans, method = "wss") +
labs(subtitle = "Elbow method")
km.out <- kmeans(pc_scale, 3, nstart = 100)
# Visualize kmeans clustering
km.cluster <- km.out$cluster
rownames(pc_scale) <- paste(lab$current_infection, 1:dim(lab)[1], sep = "_")
fviz_cluster(km.res, pc_scale,
ellipse.type = "convex", repel = "TRUE")
table(km.cluster, lab$current_infection)
#Determine the Number of Clusters Using the Elbow Method:
# unsupervised learning technique
#K-means clustering
# ++++++++++++++++++++
# scale the data to have a more balanced data set
pc_scale <- scale(lab %>% dplyr::select(pc1,pc2))
pc_scale_dist <- dist(pc_scale)
fviz_nbclust(pc_scale, kmeans, method = "wss") +
labs(subtitle = "Elbow method")
km.out <- kmeans(pc_scale, 3, nstart = 100)
# Visualize kmeans clustering
km.cluster <- km.out$cluster
rownames(pc_scale) <- paste(lab$current_infection, 1:dim(lab)[1], sep = "_")
fviz_cluster(km.res, pc_scale,
ellipse.type = "convex", repel = "TRUE")
###################clustering pca results
df <- lab %>%
dplyr::select(pc1, pc2, current_infection)
set.seed(123)  # Setting seed for reproducibility
wss <- (nrow(df) - 1) * sum(apply(df[,1:2], 2, var))
for (i in 2:15) wss[i] <- sum(kmeans(df[,1:2], centers=i)$tot.withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
# Choose a number of clusters based on the elbow plot
k <- 3  # Replace 3 with the optimal number you observe from the elbow method
km <- kmeans(df[,1:2], centers=k, nstart=25)
df$cluster <- as.factor(km$cluster)
ggplot(df, aes(x=pc1, y=pc2, color=cluster, shape = current_infection)) +
geom_point(alpha=0.6, size=3) +
theme_minimal() +
labs(title="K-means Clustering of PCA Results", color="Cluster")
table(km$cluster)
#Determine the Number of Clusters Using the Elbow Method:
# unsupervised learning technique
#K-means clustering
# ++++++++++++++++++++
# scale the data to have a more balanced data set
pc_scale <- scale(lab %>% dplyr::select(pc1,pc2))
pc_scale_dist <- dist(pc_scale)
kmeans <- kmeans(pc_scale)
fviz_nbclust(pc_scale, kmeans, method = "wss") +
labs(subtitle = "Elbow method")
km.out <- kmeans(pc_scale, 3, nstart = 100)
# Visualize kmeans clustering
km.cluster <- km.out$cluster
rownames(pc_scale) <- paste(lab$current_infection, 1:dim(lab)[1], sep = "_")
fviz_cluster(km.res, pc_scale,
ellipse.type = "convex", repel = "TRUE")
table(km.cluster, lab$current_infection)
table(km$cluster)
library(ggrepel)
library(tidyverse)
library(tidyr)
library(dplyr)
library(scales)
library(cowplot)
library(ggthemes)
library(grid)
library(ggplot2)
library(ggpmisc)
library(broom)
library(knitr)
library(kableExtra)
library(webshot)
library(RColorBrewer)
library(ggeffects)
library(pheatmap)
library(pdp)
library(broom)
library(reshape2)
library(knitr)
library(stargazer)
library(kableExtra)
library(sjmisc)
library(sjlabelled)
library(jtools)
library(sjPlot)
library(FactoMineR)
library(Polychrome)
library(gridExtra)
library(cowplot)
library(patchwork)
library(ggpubr)
hm <- read.csv("Data/Data_output/imputed_clean_data.csv")
# WOrking with laboratory data only
# Select genes
lab <- hm %>%
dplyr::filter(origin == "Lab")
Genes_v   <- c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF") #"IL.12", "IRG6")
genes <- lab[ ,colnames(lab) %in% Genes_v]
# PCA
## we can now run a normal pca on the complete data set
res.pca <- PCA(genes)
# Convert mouse_id to a data frame
mouse <- data.frame(Mouse_ID = lab[,1])
# Add the new column pc1 to the mouse_id data frame
mouse$PC1 <- res.pca$ind$coord[, 1]
mouse$PC2 <- res.pca$ind$coord[, 2]  # indexing the second column
lab <- lab %>%
left_join(mouse, by = "Mouse_ID")
## We also need to extract the data for the variable contributions to each of
## the pc axes.
pca.vars <- res.pca$var$coord %>% data.frame
pca.vars$vars <- rownames(pca.vars)
# variance explained
vpg <- as.data.frame(pca.vars)
# read the variance explained by each gene for the pca
vpg <- read.csv("Data/Data_output/variance_contr_gene_lab.csv")
# Change the first column of the variance contribution of variables to the gene
# names
vpg <- vpg %>%
dplyr::rename(Variable = vars, PC1 = Dim.1, PC2 = Dim.2)
# add cos2 to lab
lab <- lab %>% mutate(cos2 = lab$PC1^2 + lab$PC2^2)
# Then, define the color for each level of infection
color_mapping <- c("E_falciformis" = "salmon",
"E_ferrisi" = "forestgreen",
"uninfected" = "cornflowerblue")
# PCA graph of individuals
pca_individuals <-
ggplot(lab, aes(x = PC1, y = PC2, color = current_infection)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
geom_point(size = 5, alpha = 0.5, color = "black",  shape = 21, aes(fill = current_infection)) +
labs(x = "PC1 (34.37%)", y = "PC2 (16.03%)",# title = "PCA graph of individuals",
colour = "Current infection") +
theme_minimal() +
theme(#plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position = "right") +
scale_color_manual(values = color_mapping) +
guides(color = guide_legend(override.aes = list(size = 4)))
pca_individuals
ggsave(filename = "figures/pca_individuals.jpeg", plot = pca_individuals,
width = 6, height = 4, dpi = 300)
####### PCA graph of variables
# Add cos2 variable to the dataframe
vpg$cos2 <- with(vpg, PC1^2 + PC2^2)
# Define custom gradient colors
gradient_colors <- c("#B00B69", "#A55EA7", "#1D1CC9")
# Define the breaks and labels for the color legend
breaks <- c(0, 50, 100, 150)
labels <- c("0", "50", "100", "150")
# Plotting the factor map
pca_variables <-
ggplot(vpg, aes(x = PC1, y = PC2, color = cos2)) +
geom_segment(aes(xend = 0, yend = 0), color = "gray50") +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
geom_point(size = 3) +
geom_label_repel(aes(label = Variable), size = 3, box.padding = 0.5, max.overlaps = Inf) +
coord_equal() +
xlab("PC1 (34.37%)") +
ylab("PC2 (16.03%") +
#ggtitle("PCA Plot of Variables") +
theme_minimal() +
#theme(legend.position = "right",
#plot.title = element_text(size = 12, face = "bold")) +
guides(color = guide_colorbar(title = "Squared Distance from Origin")) +
scale_color_gradientn(colors = gradient_colors, guide = "none")
pca_variables
################################################################
# Create a custom color palette for 19 genes
# build-in color palette
display.brewer.all(colorblindFriendly = TRUE)
color_palette <- colorRampPalette(brewer.pal(12, "Paired"))(19)
pca_variables <-
ggplot(vpg, aes(x = PC1, y = PC2, color = Variable)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
# Segment and points
geom_segment(aes(xend = 0, yend = 0), color = "gray50") +
geom_point(size = 3,  color = "black", shape = 21, aes(fill = Variable)) +
# Labels
geom_label_repel(
aes(label = Variable, fill = Variable), size = 3.5, box.padding = 0.5,
max.overlaps = Inf,
color = "white",  # Color for the text inside the label
segment.color = "black") +  # Color for the connecting lines
# Axes and theme
coord_equal() +
xlab("PC1 (34.37%)") +
ylab("PC2 (16.03%)") +
theme_minimal() +
theme(legend.position = "none") +
# labs(title = "PCA graph of variabes") +
# Coloring for the 19 genes
scale_color_manual(values = color_palette)
print(pca_variables)
ggsave(filename = "figures/pca_variables.jpeg", plot = pca_variables,
width = 12, height = 6, dpi = 600)
fviz_pca_biplot(res.pca,
col.ind = lab$current_infection, palette = "jco",
addEllipses = TRUE, label = "var",
col.var = "black", repel = TRUE,
legend.title = "Infection groups",
title = "")
fviz_pca_biplot(res.pca,
col.ind = lab$current_infection, palette = color_palette,
addEllipses = TRUE, label = "var",
col.var = "black", repel = TRUE,
legend.title = "Infection groups",
title = "")
?fviz_pca_biplot
fviz_pca_biplot(res.pca,
col.ind = lab$current_infection, palette = NULL,
addEllipses = TRUE, label = "var",
col.var = "black", repel = TRUE,
legend.title = "Infection groups",
title = "")
# Contributions of variables to PC1
fviz_contrib(res.pca, choice = "var", axes = 1, top = 18,
title = "Contribution of immune genes to the first dimension of the PCA",
fill =  "seagreen2") -> contributions_pc1
fviz_pca_biplot(res.pca,
col.ind = lab$current_infection, palette = NULL,
addEllipses = TRUE, label = "var",
col.var = "black", repel = TRUE,
legend.title = "Infection groups",
title = "")
fviz_pca_biplot(res.pca,
col.ind = lab$current_infection, palette = c("E_falciformis" = "salmon",
"E_ferrisi" = "forestgreen",
"uninfected" = "cornflowerblue"),
addEllipses = TRUE, label = "var",
col.var = "black", repel = TRUE,
legend.title = "Infection groups",
title = "") -> biplot
biplot
figure_panel_1 <- ggarrange(pca_variables, biplot,
contributions_pc1, contributions_pc2,
pc1_current_infection, pc2_current_infection,
pc1_WL_current_infection, pc2_WL_current_infection,
labels = c("A", "B", "C", "D", "E", "F", "G", "H"),
ncol = 2, nrow = 4)
# Adding the title "Figure 1" to the entire arrangement
figure_panel_1 <- annotate_figure(figure_panel_1,
top = text_grob("Figure 1", size = 14,
face = "bold"))
print(figure_panel_1)
ggsave("figure_panels/figure_panel_1.jpeg", figure_panel_1,
width = 20, height = 22, dpi = 300)
?fviz_ca_biplot
?fviz_pca_biplot
source("~/GitHub/Article_predicting_WL/R/Scripts/2.Lab_pca_linear_models.R")
####################  MUC5AC, IL1Rn, MPO
gene_ens <- c("ENSMUSG00000026981", #IL1RN
"ENSMUSG00000009350") #MPO"
# Perform gene ontology enrichment analysis
enrich_result <- enrichGO(gene = gene_ens,
OrgDb = org.Mm.eg.db,
ont = "BP",
keyType = "ENSEMBL")
# View the enrichment result
enrich_result
# Extract the relevant columns from the enrichment table
enriched_terms <- enrich_result$Description
p_values <- enrich_result$p.adjust
gene_ratio <- enrich_result$GeneRatio
# Sort the enriched terms based on p-values
sorted_terms <- as.data.frame(enriched_terms[order(p_values)])
# Define the vector of values for which you want to filter
filter_terms <- c("interleukin-1-mediated signaling pathway",
"negative regulation of cytokine-mediated signaling pathway",
"inflammatory response to antigenic stimulus",
"negative regulation of response to cytokine stimulus",
"acute inflammatory response")
# Sort the enriched terms based on p-values
sorted_terms <- as.data.frame(enriched_terms[order(p_values)])
sorted_terms
View(sorted_terms)
# Define the vector of values for which you want to filter
filter_terms <- c("interleukin-1-mediated signaling pathway",
"negative regulation of cytokine-mediated signaling pathway",
"inflammatory response to antigenic stimulus",
"negative regulation of response to cytokine stimulus",
"acute inflammatory response")
# Filter the dataframe based on the column values
sorted_terms <- sorted_terms %>%
filter(`enriched_terms[order(p_values)]` %in% filter_terms)
# Create a data frame for the bar plot
bar_data <- data.frame(GO_Term = sorted_terms[1:5,], p_value = -log10(p_values[1:5]))
# Sort the data frame in ascending order
bar_data <- bar_data[order(bar_data$p_value), ]
# Create the bar plot using ggplot2
ggplot(bar_data, aes(x = reorder(GO_Term, p_value), y = p_value, fill = p_value)) +
geom_segment(aes(xend = GO_Term, yend = 0), color = "mediumvioletred", size = 1.5) +
geom_point(size = 3, shape = 19, color = "mediumvioletred", fill = "white") +
coord_flip() +
labs(x = "Enriched GO Terms", y = "-log10(p-value)",
title = "Gene Ontology Enrichment Analysis, MUC5AC, IL1RN, MPO") +
theme_minimal() -> plotB
plotB
bar data_df
bar_data
