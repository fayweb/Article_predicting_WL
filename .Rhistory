## ----predicting_weight_loss_model---
set.seed(333)
#train the model
WL_predict_gene <- randomForest(WL_max ~., data = train.data,
proximity = TRUE, ntree = 1000)
# ntree = number of trees
# save the model
save(WL_predict_gene, file =  "R/Models/WL_predict_gene.RData")
print(WL_predict_gene)
predict_WL_cv <- rf.crossValidation(x = WL_predict_gene, xdata = train.data,
p = 0.10, n = 99, ntree = 501)
predict_WL_cv$fit.var.exp
par(mfrow=c(2,2))
##################
##################
########## Plots
dev.off()
root_mean <- plot(predict_WL_cv)
# Root Mean Squared Error (observed vs. predicted) from each Bootstrap
# iteration (cross-validation)
mean_error <- plot(predict_WL_cv, stat = "mse")
#Percent variance explained from specified fit model
model_var <- plot(predict_WL_cv, stat = "var.exp")
#Mean Absolute Error from each Bootstrapped model
abs_error <- plot(predict_WL_cv, stat = "mae")
#d# ---------------------------------------------------------------------------------------------------
error_random  <- plot(WL_predict_gene)
## ---------------------------------------------------------------------------------------------------
# number of trees with lowest MSE
which.min(WL_predict_gene$mse)
# RMSE of this optimal random forest
sqrt(WL_predict_gene$mse[which.min(WL_predict_gene$mse)])
WL_predict_gene$mtry
oob_error_rate <- WL_predict_gene$mse[WL_predict_gene$ntree]
oob_error_rate <- 1 - sum(diag(WL_predict_gene$confusion)) / sum(WL_predict_gene$confusion)
### Visualize variable importance ---
#Call importance() function on the model model to check how the attributes used
# as predictors affect our WL_predict_gene
ImpData <- as.data.frame(importance(WL_predict_gene))
ImpData$Var.Names <- row.names(ImpData)
varImp(WL_predict_gene)
var_imp <- as.data.frame(varImp(WL_predict_gene))
var_imp$Genes <- row.names(var_imp)
var_imp <- var_imp %>%
rename(Importance = Overall)
# Assuming var_imp is your data frame with variables 'Importance' and 'Genes'
var_imp <- var_imp %>%
mutate(Genes = factor(Genes, levels = Genes[order(-Importance)])) # Reorder Genes by decreasing Importance
# Create the plot with a color scale
importance_plot <-
ggplot(var_imp, aes(x = reorder(Genes, Importance), y = Importance, fill = Importance)) +
geom_col() + # Use geom_col for a bar plot; it's more appropriate for importance scores
coord_flip() + # Flip the coordinates to make it easier to read
labs(x = "Genes", y = "IncNodePurity") +#, title = "Variable Importance of Genes") +
theme_minimal() + # A clean, minimal theme
theme(axis.text.x = element_text(angle = 45, hjust = 1), # Adjust text angle for x-axis labels if needed
legend.title = element_blank()) + # Remove the legend title if desired
scale_fill_viridis_c(option = "magma", direction = -1) # Apply a Viridis color scale with the 'magma' option
importance_plot
## S3 method for class 'randomForest'
plot(WL_predict_gene, type = "l", main=deparse(substitute(x)))
variable_importance <- varImpPlot(WL_predict_gene)
ggsave(filename = "figures/variable_imporance_random.jpeg", width = 10, height = 8, dpi = 300)
# Get variable importance from the WL_predict_gene fit
ImpData <- as.data.frame(importance(WL_predict_gene))
#The predict() function in R is used to predict the values based on the
# input data.
predictions <- predict(WL_predict_gene, test.data)
# assign test.data to a new object, so that we can make changes
result <- test.data
#add the new variable of predictions to the result object
result <- cbind(result, predictions)
# what is the correlation between predicted and actual data?
cor(result$WL_max, result$predictions,
method = c("pearson", "kendall", "spearman"))
cor.test(result$WL_max, result$predictions)
test_lab <- lab %>%
left_join(result, by = c("WL_max", "IFNy", "CXCR3", "IL.6", "IL.13", #"IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF"))
test_lab <- test_lab %>%
drop_na(predictions)
# what is the correlation between predicted and actual data?
cor(result$WL_max, result$predictions,
method = c("pearson", "kendall", "spearman"))
model <- lm(predictions ~ WL_max, data = test_lab)
summary(model)
ggpredict(model, terms = c("WL_max")) %>%
plot(colors = "blue") +
labs(title = NULL) +  # This removes the title
# ggtitle("Effect of PC2 on Predicted Weight Loss") +
xlab("Observed maximum weight loss during infections") +
ylab("Predicted maximum weight loss during infections") +
theme_minimal() +
theme(
plot.title = element_text(size = 16, hjust = 0.5),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12))-> lm_short
lm_short
model <- lm(predictions ~ WL_max * current_infection, data = test_lab)
summary(model)
#### Plotting
# Then, define the color for each level of infection
color_mapping <- c("E_falciformis" = "salmon",
"E_ferrisi" = "forestgreen",
"uninfected" = "cornflowerblue")
ggpredict(model, terms = c("WL_max", "current_infection")) %>%
plot(colors = "darkorchid") +
labs(title = NULL) +  # This removes the title
# ggtitle("Effect of PC2 on Predicted Weight Loss") +
xlab("Observed maximum weight loss during infections") +
ylab("Predicted maximum weight loss during infections") +
theme_minimal() +
scale_color_manual(values = color_mapping) +
scale_fill_manual(values = color_mapping) +
theme(
plot.title = element_text(size = 16, hjust = 0.5),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12)
) -> lm_weight_loss_predictions
lm_weight_loss_predictions
model <- lm(predictions ~ WL_max * delta_ct_cewe_MminusE , data = test_lab)
summary(model)
ggpredict(model, terms = c("WL_max", "delta_ct_cewe_MminusE"), interactive=TRUE) %>%
plot() +
labs(title = NULL) +  # This removes the title
# ggtitle("Effect of PC2 on Predicted Weight Loss") +
xlab("Observed maximum weight loss during infections") +
ylab("Predicted maximum weight loss during infections") +
theme_minimal() +
scale_color_manual(values = c("darkred", "gold", "violet")) +
scale_fill_manual(values = c("darkred", "gold", "violet")) +
theme(
plot.title = element_text(size = 16, hjust = 0.5),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12))-> lm_short
lm_short
### plotting
test_lab %>%
ggplot(aes(x = predictions, y = WL_max, color = current_infection)) +
geom_point(aes(size = delta_ct_cewe_MminusE), alpha = 0.7) +
labs(
x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss",
#  title = "Relationship between Predicted and Observed Weight Loss",
#subtitle = "Grouped by Current Infection and Sized by Delta CT Value",
color = "Treatment group",
size = "Caecal infection intensities,
Delta Ct value",
shape = "Delta Ct treshold"
) +
theme_minimal() +
theme(
legend.position = "right",
legend.title = element_text(face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
panel.grid.major = element_line(color = "gray90"),
panel.grid.minor = element_blank()
) +
scale_color_manual(values = c(E_falciformis = "salmon",
E_ferrisi = "forestgreen",
uninfected = "deepskyblue")) +
scale_size_continuous(range = c(2, 10)) -> predictions_random_for_lab
predictions_random_for_lab
ggsave(plot = predictions_random_for_lab,
filename = "figures/predictions_random_for_lab.jpeg", width = 8, height = 5,
dpi = 1000)
combi_plot <- importance_plot | predictions_random_for_lab
combi_p
combi_plot
# Calculate the linear model
lm_fit <- lm(WL_max ~ predictions, data = test_lab)
combi_plot <- importance_plot | predictions_random_for_lab +
plot_layout(guides = 'collect') + # Collect all legends into a single legend
plot_annotation(tag_levels = 'A') # Add labels (A, B, C, etc.)
combi_plot
# Add a figure title
map_plot <- map_plot +
plot_annotation(title = 'Fig. 3',
theme = theme(plot.title = element_text(size = 13, hjust = 0)))
# Add a figure title
combi_plot <- combi_plot +
plot_annotation(title = 'Fig. 3',
theme = theme(plot.title = element_text(size = 13, hjust = 0)))
# Display the panel figure
print(combi_plot)
combi_plot <- importance_plot | predictions_random_for_lab +
plot_layout(guides = 'collect') + # Collect all legends into a single legend
plot_annotation(tag_levels = 'A') # Add labels (A, B, C, etc.)
combi_plot
combi_plot
# Add a figure title
combi_plot <- combi_plot +
plot_annotation(title = 'Fig. 3',
theme = theme(plot.title = element_text(size = 13, hjust = 0)))
ggsave(plot = combi_plot,
filename = "figure_panels/variableimp_rand_results_lab.jpeg", width = 14,
height = 5, dpi = 1000)
################## Linear models: Predicting weight loss with the PCA eigenvectors
# predicting weight loss with the pc1 and pc2
model_1_pc1_pc2 <- lm(WL_max ~ pc1 + pc2, data = lab)
#if (!require("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
#BiocManager::install("org.Mm.eg.db")
# BiocManager::install("clusterProfiler")
library(FactoMineR)
library(reshape2)
library(corrplot)
library(factoextra)
library(lmtest)
library(ggpubr)
library(janitor)
library(pheatmap)
library(visdat)
library(scatterplot3d)
library(clusterProfiler) # gene enrichment analysis
library(org.Mm.eg.db) # gene ids identifiers Mus musculus
library(viridis)
library(tidyr)
library(dplyr)
hm <- read.csv("Data/Data_output/imputed_clean_data.csv")
# WOrking with laboratory data only
# Select genes
lab <- hm %>%
dplyr::filter(origin == "Lab")
Genes_v   <- c("IFNy", "CXCR3", "IL.6", "IL.13", #"IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF") #"IL.12", "IRG6")
genes <- lab[ ,colnames(lab) %in% Genes_v]
# PCA
## we can now run a normal pca on the complete data set
res.pca <- PCA(genes)
## How much does each dimension contribute to variance?
fviz_eig(res.pca, addlabels = TRUE, ylim = c(0, 70), barfill = "seagreen2") ->
variance_contrib
variance_contrib
ggsave(filename = "figures/contributions_all_dimentsions.jpeg", plot = variance_contrib,
width = 6, height = 4, dpi = 1000)
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#DB6212", "#CC8733", "#5f25e6", "#073DA8"),
repel = TRUE, title = "") -> pca_col
ggsave(filename = "figures/pca_fviz_package.jpeg", plot = pca_col,
width = 10, height = 5, dpi = 300)
fviz_pca_ind(res.pca, col.ind = "cos2",
gradient.cols = c("#DB6212", "#CC8733", "#5f25e6", "#073DA8"),
repel = TRUE, title = "")
## Description of the dimensions
## We get a correlation between each variable and the first dimension
dimdesc(res.pca)
# Convert mouse_id to a data frame
mouse <- data.frame(Mouse_ID = lab[,1])
mouse_id <- data.frame(Mouse_ID = lab[,1])
# Add the new column pc1 to the mouse_id data frame
mouse$pc1 <- res.pca$ind$coord[, 1]
mouse$pc2 <- res.pca$ind$coord[, 2]  # indexing the second column
mouse$pc3 <-  res.pca$ind$coord[, 3]
mouse$pc4 <-  res.pca$ind$coord[, 4]
mouse$pc5 <-  res.pca$ind$coord[, 5]
lab <- lab %>%
left_join(mouse, by = "Mouse_ID")
## We also need to extract the data for the variable contributions to each of
## the pc axes.
pca.vars <- res.pca$var$coord %>% data.frame
pca.vars$vars <- rownames(pca.vars)
pca.vars.m <- melt(pca.vars, id.vars = "vars")
source("R/Functions/circle_fun.R")
circ <- circleFun(c(0,0),2,npoints = 500)
#It’s possible to use the function corrplot() [corrplot package] to highlight
#the most contributing variables for each dimension:
var.contrib <- as.data.frame(res.pca$var$contrib)
var.contrib.matrix <- data.matrix(var.contrib)
corrplot(var.contrib.matrix, is.corr=FALSE)
pca_var <- as.data.frame(pca.vars)
### Contributions to the first dimension
# Contributions of variables to PC1
fviz_contrib(res.pca, choice = "var", axes = 1, top = 18,
title = "Contribution of immune genes to the first dimension of the PCA",
fill =  "seagreen2") -> contributions_pc1
contributions_pc1
ggsave(filename = "figures/contributions_pc1.jpeg", plot = contributions_pc1,
width = 6, height = 4, dpi = 1000)
# res.pca$var$contrib
### Contributions to the second dimension
## Contributions of variables to PC2
fviz_contrib(res.pca, choice = "var", axes = 2, top = 18,
title = "Contribution of immune genes to the second dimension of the PCA",
fill =  "seagreen2") -> contributions_pc2
contributions_pc2
ggsave(filename = "figures/contributions_pc2.jpeg", plot = contributions_pc2,
width = 6, height = 4, dpi = 1000)
fviz_contrib(res.pca, choice = "var", axes = 1:2, top = 18)
# Total contribution on PC1 and PC2
fviz_contrib(res.pca, choice = "ind", axes = 1:2)
#select same rows in the first table
lab <- lab[row.names(genes), ]
fviz_pca_biplot(res.pca,
col.ind = lab$current_infection, palette = "jco",
addEllipses = TRUE, label = "var",
col.var = "black", repel = TRUE,
legend.title = "Infection groups",
title = "")
################## Linear models: Predicting weight loss with the PCA eigenvectors
# predicting weight loss with the pc1 and pc2
model_1_pc1_pc2 <- lm(WL_max ~ pc1 + pc2, data = lab)
summary(model_1_pc1_pc2)
# Load libraries
library(tidyverse)
library(tidyr)
library(dplyr)
library(cowplot)
library(randomForest)
library(varImp)
library(ggplot2)
library(gridGraphics)
library(ggpmisc)
library(caret)
library(ggpubr)
library(viridis) # For viridis color scales
library(ggiraphExtra)
library(patchwork)
library(ggeffects)
library(rfUtilities) # Implements a permutation test cross-validation for
# Random Forests models
#import data
hm <- read.csv("Data/Data_output/imputed_clean_data.csv")
#vectors for gene selection
Gene_v   <- c("IFNy", "CXCR3", "IL.6", "IL.13", #"IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF") #"IL.12", "IRG6")
# prepare the lab data
lab <- hm %>%
dplyr::filter(origin == "Lab")
#select the imputed gene columns
gene_m <-  lab %>%
dplyr::select(c(Mouse_ID, all_of(Gene_v), WL_max))
# select only the genes
genes <- gene_m %>%
dplyr::select(-Mouse_ID)
# select the genes and the weight loss
gene_W <- lab  %>%
dplyr::select(c(all_of(Gene_v), WL_max))
repeat_cv <- trainControl(method = "repeatedcv", #repeated cross validation
number = 5, # 5 fold cross validation
repeats = 3)
# split data into training and test
set.seed(333) # this will help us reproduce this random assignment
# in this way we can pick the random numbers
training.samples <- createDataPartition(y = gene_W$WL_max, p = .7, list = FALSE)
# this is the partiicition! In this case 0.7 = training data and 0.3 = testing
# we don't want to get a list in return
train.data <- gene_W[training.samples, ]
test.data <- gene_W[-training.samples, ]
## ----predicting_weight_loss_model---
set.seed(333)
#train the model
WL_predict_gene <- randomForest(WL_max ~., data = train.data,
proximity = TRUE, ntree = 1000)
# ntree = number of trees
# save the model
save(WL_predict_gene, file =  "R/Models/WL_predict_gene.RData")
print(WL_predict_gene)
predict_WL_cv <- rf.crossValidation(x = WL_predict_gene, xdata = train.data,
p = 0.10, n = 99, ntree = 501)
predict_WL_cv$fit.var.exp
par(mfrow=c(2,2))
##################
##################
########## Plots
dev.off()
root_mean <- plot(predict_WL_cv)
# Root Mean Squared Error (observed vs. predicted) from each Bootstrap
# iteration (cross-validation)
mean_error <- plot(predict_WL_cv, stat = "mse")
#Percent variance explained from specified fit model
model_var <- plot(predict_WL_cv, stat = "var.exp")
#Mean Absolute Error from each Bootstrapped model
abs_error <- plot(predict_WL_cv, stat = "mae")
#d# ---------------------------------------------------------------------------------------------------
error_random  <- plot(WL_predict_gene)
## ---------------------------------------------------------------------------------------------------
# number of trees with lowest MSE
which.min(WL_predict_gene$mse)
# RMSE of this optimal random forest
sqrt(WL_predict_gene$mse[which.min(WL_predict_gene$mse)])
WL_predict_gene$mtry
oob_error_rate <- WL_predict_gene$mse[WL_predict_gene$ntree]
oob_error_rate <- 1 - sum(diag(WL_predict_gene$confusion)) / sum(WL_predict_gene$confusion)
### Visualize variable importance ---
#Call importance() function on the model model to check how the attributes used
# as predictors affect our WL_predict_gene
ImpData <- as.data.frame(importance(WL_predict_gene))
ImpData$Var.Names <- row.names(ImpData)
varImp(WL_predict_gene)
var_imp <- as.data.frame(varImp(WL_predict_gene))
var_imp$Genes <- row.names(var_imp)
var_imp <- var_imp %>%
rename(Importance = Overall)
# Assuming var_imp is your data frame with variables 'Importance' and 'Genes'
var_imp <- var_imp %>%
mutate(Genes = factor(Genes, levels = Genes[order(-Importance)])) # Reorder Genes by decreasing Importance
# Create the plot with a color scale
importance_plot <-
ggplot(var_imp, aes(x = reorder(Genes, Importance), y = Importance, fill = Importance)) +
geom_col() + # Use geom_col for a bar plot; it's more appropriate for importance scores
coord_flip() + # Flip the coordinates to make it easier to read
labs(x = "Genes", y = "IncNodePurity") +#, title = "Variable Importance of Genes") +
theme_minimal() + # A clean, minimal theme
theme(axis.text.x = element_text(angle = 45, hjust = 1), # Adjust text angle for x-axis labels if needed
legend.title = element_blank()) + # Remove the legend title if desired
scale_fill_viridis_c(option = "magma", direction = -1) # Apply a Viridis color scale with the 'magma' option
importance_plot
## S3 method for class 'randomForest'
plot(WL_predict_gene, type = "l", main=deparse(substitute(x)))
variable_importance <- varImpPlot(WL_predict_gene)
ggsave(filename = "figures/variable_imporance_random.jpeg", width = 10, height = 8, dpi = 300)
# Get variable importance from the WL_predict_gene fit
ImpData <- as.data.frame(importance(WL_predict_gene))
#The predict() function in R is used to predict the values based on the
# input data.
predictions <- predict(WL_predict_gene, test.data)
# assign test.data to a new object, so that we can make changes
result <- test.data
#add the new variable of predictions to the result object
result <- cbind(result, predictions)
# what is the correlation between predicted and actual data?
cor(result$WL_max, result$predictions,
method = c("pearson", "kendall", "spearman"))
cor.test(result$WL_max, result$predictions)
test_lab <- lab %>%
left_join(result, by = c("WL_max", "IFNy", "CXCR3", "IL.6", "IL.13", #"IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF"))
test_lab <- test_lab %>%
drop_na(predictions)
# what is the correlation between predicted and actual data?
cor(result$WL_max, result$predictions,
method = c("pearson", "kendall", "spearman"))
model <- lm(predictions ~ WL_max, data = test_lab)
summary(model)
ggpredict(model, terms = c("WL_max")) %>%
plot(colors = "blue") +
labs(title = NULL) +  # This removes the title
# ggtitle("Effect of PC2 on Predicted Weight Loss") +
xlab("Observed maximum weight loss during infections") +
ylab("Predicted maximum weight loss during infections") +
theme_minimal() +
theme(
plot.title = element_text(size = 16, hjust = 0.5),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12))-> lm_short
lm_short
model <- lm(predictions ~ WL_max * current_infection, data = test_lab)
summary(model)
#### Plotting
# Then, define the color for each level of infection
color_mapping <- c("E_falciformis" = "salmon",
"E_ferrisi" = "forestgreen",
"uninfected" = "cornflowerblue")
ggpredict(model, terms = c("WL_max", "current_infection")) %>%
plot(colors = "darkorchid") +
labs(title = NULL) +  # This removes the title
# ggtitle("Effect of PC2 on Predicted Weight Loss") +
xlab("Observed maximum weight loss during infections") +
ylab("Predicted maximum weight loss during infections") +
theme_minimal() +
scale_color_manual(values = color_mapping) +
scale_fill_manual(values = color_mapping) +
theme(
plot.title = element_text(size = 16, hjust = 0.5),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12)
) -> lm_weight_loss_predictions
lm_weight_loss_predictions
# what is the correlation between predicted and actual data?
cor(result$WL_max, result$predictions,
method = c("pearson", "kendall", "spearman"))
model <- lm(predictions ~ WL_max, data = test_lab)
summary(model)
# what is the correlation between predicted and actual data?
cor(result$WL_max, result$predictions,
method = c("pearson", "kendall", "spearman"))
cor(result$WL_max, result$predictions,
method = "spearman")
cor(result$WL_max, result$predictions,
method = "pearson")
