#, title = "Coefficient Estimates by Gene Expression") +
theme(legend.title = element_blank(),
legend.position = "none") -> coef_mmr
print(coef_mmr)
ggsave(filename = "~/GitHub/Article_predicting_WL/figures/coef_plot_lab_genes.jpeg",
plot = coef_mmr, width = 6, height = 4, dpi = 300)
lab$current_infection <- gsub(pattern = "_", replacement = ". ", lab$current_infection)
color_mapping <- c("E. falciformis" = "salmon",
"E. ferrisi" = "forestgreen",
"uninfected" = "skyblue")
lab %>%
pivot_longer(cols = all_of(dependent_vars),
names_to = "Genes", values_to = "Expression") %>%
ggplot(aes(x = Expression, fill = current_infection)) +
ggdist::stat_halfeye(
adjust = .5,
width = .6,
alpha = 0.5,
.width = 0,
justification = -.2,
point_colour = NA,
orientation = "y"  # Set orientation to y
) +
geom_boxplot(position = "dodge2",
width = .5,
outlier.shape = NA,
orientation = "y"  # Set orientation to y
) +
facet_wrap(~Genes,  scales = 'free', ncol = 4) +
labs(x = "Expression Level", y = "Density") +
theme_minimal() +
scale_fill_manual(values = color_mapping)  +
theme_minimal() +
labs(y = "Density",
x = "Gene expression level") -> density_imm
density_imm
ggsave(filename = "~/GitHub/Article_predicting_WL/figures/density_immune_genes.jpeg",
plot = density_imm, width = 10, height = 8, dpi = 300)
lab %>%
pivot_longer(cols = all_of(dependent_vars),
names_to = "Genes", values_to = "Expression") %>%
ggplot(aes(x = Expression, fill = current_infection)) +
ggdist::stat_halfeye(
adjust = .5,
width = .6,
alpha = 0.5,
.width = 0,
justification = -.2,
point_colour = NA,
orientation = "y"  # Set orientation to y
) +
geom_boxplot(position = "dodge2",
width = .5,
outlier.shape = NA,
orientation = "y"  # Set orientation to y
) +
facet_wrap(~Genes,  scales = 'free', ncol = 4) +
labs(x = "Expression Level", y = "Density") +
theme_minimal() +
scale_fill_manual(values = color_mapping)  +
theme(legend.title = element_blank())+
labs(y = "Density",
x = "Gene expression level") -> density_imm
density_imm
ggsave(filename = "~/GitHub/Article_predicting_WL/figures/density_immune_genes.jpeg",
plot = density_imm, width = 10, height = 8, dpi = 300)
#######################
# combine
comb <- (density_imm | coef_mmr) +
plot_layout(guides = 'collect') + # Collect all legends into a single legend
plot_annotation(tag_levels = 'A') # Add labels (A, B, C, etc.)
# Add a figure title
comb <- comb +
plot_annotation(title = 'Fig. 2',
theme = theme(plot.title = element_text(size = 20, hjust = 0)))
comb <- comb +
plot_layout(heights = c(1, 1),
widths = c(2, 1))
# Display the panel figure
print(comb)
# Save the panel figure
ggsave('figure_panels/Fig_2_immune_gene_expression_lab.jpeg',
comb, width = 12, height = 6, dpi = 300)
# Assuming 'lab' is your dataframe
lab$mouse_strain <- as.factor(lab$mouse_strain)
################################################
################################################
################################################
################################################
# List of dependent variables
dependent_vars <- c("IFNy", "CXCR3", "IL.6", "IL.13",# "IL.10",
"IL1RN", "CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF")
# Assuming 'lab' is your dataframe
lab$mouse_strain <- as.factor(lab$mouse_strain)
lm_formula <- as.formula(paste(var, "~ mouse_strain", sep = " "))
# Perform regressions
results <- lapply(dependent_vars, function(var) {
lm_formula <- as.formula(paste(var, "~ mouse_strain", sep = " "))
lm(lm_formula, data = lab)
})
names(results) <- dependent_vars  # Name each regression with the name of the dependent variable
# Correctly add 'model' column to each tidied model's dataframe
tidy_models <- do.call(rbind, lapply(names(results), function(name) {
model_df <- tidy(results[[name]], conf.int = TRUE)
model_df$model <- name  # Add model name as a new column
return(model_df)
}))
# Create the coefficient plot
ggplot(tidy_models, aes(x = model, y = estimate, color = term)) +
coord_flip() +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2, position = position_dodge(width = 0.5)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
theme_classic() +
theme(axis.text.y = element_text(angle = 45, hjust = 1)) +
labs(x = "Coefficient Estimate", y = "Gene expression level") +
#, title = "Coefficient Estimates by Gene Expression") +
theme(legend.title = element_blank(),
legend.position = "none") -> coef_mice
print(coef_mice)
library(FactoMineR)
library(reshape2)
library(corrplot)
library(factoextra)
library(lmtest)
library(ggpubr)
library(janitor)
library(pheatmap)
library(visdat)
library(scatterplot3d)
library(clusterProfiler) # gene enrichment analysis
library(org.Mm.eg.db) # gene ids identifiers Mus musculus
library(viridis)
library(tidyr)
library(dplyr)
hm <- read.csv("Data/Data_output/imputed_clean_data.csv")
# WOrking with laboratory data only
# Select genes
lab <- hm %>%
dplyr::filter(origin == "Lab")
Genes_v   <- c("IFNy", "CXCR3", "IL.6", "IL.13", #"IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF") #"IL.12", "IRG6")
genes <- lab[ ,colnames(lab) %in% Genes_v]
# PCA
## we can now run a normal pca on the complete data set
res.pca <- PCA(genes)
## How much does each dimension contribute to variance?
dev.off()
fviz_eig(res.pca, addlabels = TRUE, ylim = c(0, 70), barfill = "seagreen2") ->
variance_contrib
variance_contrib
ggsave(filename = "figures/contributions_all_dimentsions.jpeg", plot = variance_contrib,
width = 6, height = 4, dpi = 1000)
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#DB6212", "#CC8733", "#5f25e6", "#073DA8"),
repel = TRUE, title = "") -> pca_col
pca_col
ggsave(filename = "figures/pca_fviz_package.jpeg", plot = pca_col,
width = 10, height = 5, dpi = 300)
dev.off()
## Description of the dimensions
## We get a correlation between each variable and the first dimension
dimdesc(res.pca)
# Convert mouse_id to a data frame
mouse <- data.frame(Mouse_ID = lab[,1])
mouse_id <- data.frame(Mouse_ID = lab[,1])
# Add the new column pc1 to the mouse_id data frame
mouse$pc1 <- res.pca$ind$coord[, 1]
mouse$pc2 <- res.pca$ind$coord[, 2]  # indexing the second column
mouse$pc3 <-  res.pca$ind$coord[, 3]
mouse$pc4 <-  res.pca$ind$coord[, 4]
mouse$pc5 <-  res.pca$ind$coord[, 5]
lab <- lab %>%
left_join(mouse, by = "Mouse_ID")
## We also need to extract the data for the variable contributions to each of
## the pc axes.
pca.vars <- res.pca$var$coord %>% data.frame
pca.vars$vars <- rownames(pca.vars)
pca.vars.m <- melt(pca.vars, id.vars = "vars")
source("R/Functions/circle_fun.R")
circ <- circleFun(c(0,0),2,npoints = 500)
#Itâ€™s possible to use the function corrplot() [corrplot package] to highlight
#the most contributing variables for each dimension:
var.contrib <- as.data.frame(res.pca$var$contrib)
var.contrib.matrix <- data.matrix(var.contrib)
corrplot(var.contrib.matrix, is.corr=FALSE)
pca_var <- as.data.frame(pca.vars)
# Contributions of variables to PC1
fviz_contrib(res.pca, choice = "var", axes = 1, top = 18,
title = "Contribution of immune genes to the first dimension of the PCA",
fill =  "seagreen2") -> contributions_pc1
contributions_pc1
ggsave(filename = "figures/contributions_pc1.jpeg", plot = contributions_pc1,
width = 6, height = 4, dpi = 1000)
## Contributions of variables to PC2
fviz_contrib(res.pca, choice = "var", axes = 2, top = 18,
title = "Contribution of immune genes to the second dimension of the PCA",
fill =  "seagreen2") -> contributions_pc2
contributions_pc2
ggsave(filename = "figures/contributions_pc2.jpeg", plot = contributions_pc2,
width = 6, height = 4, dpi = 1000)
fviz_contrib(res.pca, choice = "var", axes = 1:2, top = 18)
# Total contribution on PC1 and PC2
fviz_contrib(res.pca, choice = "ind", axes = 1:2)
#select same rows in the first table
lab <- lab[row.names(genes), ]
dev.off()
###################clustering pca results
df <- lab %>%
dplyr::select(pc1, pc2, current_infection)
set.seed(123)  # Setting seed for reproducibility
wss <- (nrow(df) - 1) * sum(apply(df[,1:2], 2, var))
for (i in 2:15) wss[i] <- sum(kmeans(df[,1:2], centers=i)$tot.withinss)
pca_var <- as.data.frame(pca.vars)
pca_var <- as.data.frame(pca.vars)
# PCA
## we can now run a normal pca on the complete data set
res.pca <- PCA(genes)
library(ggrepel)
library(tidyverse)
library(tidyr)
library(dplyr)
library(scales)
library(cowplot)
library(ggthemes)
library(grid)
library(ggplot2)
library(ggpmisc)
library(broom)
library(knitr)
library(kableExtra)
library(webshot)
library(RColorBrewer)
library(ggeffects)
library(pheatmap)
library(pdp)
library(gt)
library(ggdist)
library(broom)
library(reshape2)
library(knitr)
library(stargazer)
library(kableExtra)
library(sjmisc)
library(sjlabelled)
library(jtools)
library(sjPlot)
library(FactoMineR)
library(ggridges)
library(Polychrome)
library(patchwork)
library(gridExtra)
library(cowplot)
library(patchwork)
library(ggpubr)
library(factoextra)
library(jtools)
# read the data
hm <- read.csv("Data/Data_output/imputed_clean_data.csv")
# Select laboratory data
# Select genes
lab <- hm %>%
dplyr::filter(origin == "Lab")
# create a vector to select genes
Genes_v   <- c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF") #"IL.12", "IRG6")
# create a data frame containing the continuous gene expression variables
genes <- lab[ ,colnames(lab) %in% Genes_v]
# increase maximum overlaps
options(ggrepel.max.overlaps = Inf)
# PCA
## we can now run a normal pca on the complete data set
res.pca <- PCA(genes)
# Convert mouse_id to a data frame (to facilitate data joining)
mouse <- data.frame(Mouse_ID = lab[,1])
# Add the new column pc1 to the mouse_id data frame
mouse$PC1 <- res.pca$ind$coord[, 1]
mouse$PC2 <- res.pca$ind$coord[, 2]  # indexing the second column
# join the coordinates
lab <- lab %>%
left_join(mouse, by = "Mouse_ID")
# read the variance explained by each gene for the pca
vpg <- read.csv("Data/Data_output/variance_contr_gene_lab.csv")
# Change the first column of the variance contribution of variables to the gene
# names
vpg <- vpg %>%
dplyr::rename(Variable = vars, PC1 = Dim.1, PC2 = Dim.2)
# add cos2 to lab
lab <- lab %>% mutate(cos2 = lab$PC1^2 + lab$PC2^2)
# Then, define the color for each level of infection
color_mapping <- c("E_falciformis" = "salmon",
"E_ferrisi" = "forestgreen",
"uninfected" = "cornflowerblue")
# PCA graph of individuals
pca_individuals <-
ggplot(lab, aes(x = PC1, y = PC2, color = current_infection)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
geom_point(size = 5, alpha = 0.5, color = "black",  shape = 21, aes(fill = current_infection)) +
labs(x = "PC1 (34.37%)", y = "PC2 (16.03%)",# title = "PCA graph of individuals",
colour = "Current infection") +
theme_minimal() +
theme(#plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position = "right") +
scale_color_manual(values = color_mapping)# +
pca_individuals
ggsave(filename = "figures/pca_individuals.jpeg", plot = pca_individuals,
width = 6, height = 4, dpi = 300)
# Add cos2 variable to the dataframe
vpg$cos2 <- with(vpg, PC1^2 + PC2^2)
# Define custom gradient colors
gradient_colors <- c("#B00B69", "#A55EA7", "#1D1CC9")
# Define the breaks and labels for the color legend
breaks <- c(0, 50, 100, 150)
labels <- c("0", "50", "100", "150")
# Plotting the factor map
pca_variables <-
ggplot(vpg, aes(x = PC1, y = PC2, color = cos2)) +
geom_segment(aes(xend = 0, yend = 0), color = "gray50") +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
geom_point(size = 3) +
geom_label_repel(aes(label = Variable), size = 2, box.padding = 0.5, max.overlaps = Inf) +
coord_equal() +
xlab("PC1 (34.37%)") +
ylab("PC2 (16.03%") +
#ggtitle("PCA Plot of Variables") +
theme_minimal()  +
scale_color_gradient(low = "blue", high = "orange")+
labs(color = "Squared distance to origin")
pca_variables
ggsave(filename = "figures/pca_variables.jpeg", plot = pca_variables,
width = 5, height = 6, dpi = 300)
color_palette <- colorRampPalette(brewer.pal(12, "Paired"))(19)
#pca_variables <-
ggplot(vpg, aes(x = PC1, y = PC2, color = Variable)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
# Segment and points
geom_segment(aes(xend = 0, yend = 0), color = "gray50") +
geom_point(size = 3,  color = "black", shape = 21, aes(fill = Variable)) +
# Labels
geom_label_repel(
aes(label = Variable, fill = Variable), size = 3.5, box.padding = 0.5,
max.overlaps = Inf,
color = "white",  # Color for the text inside the label
segment.color = "black") +  # Color for the connecting lines
# Axes and theme
coord_equal() +
xlab("PC1 (34.37%)") +
ylab("PC2 (16.03%)") +
theme_minimal() +
theme(legend.position = "none") +
# labs(title = "PCA graph of variabes") +
# Coloring for the 19 genes
scale_color_manual(values = color_palette)
fviz_pca_biplot(res.pca,
col.ind = lab$current_infection, palette = c("E_falciformis" = "salmon",
"E_ferrisi" = "forestgreen",
"uninfected" = "cornflowerblue"),
addEllipses = TRUE, label = "var",
col.var = "black", repel = TRUE,
legend.title = "Infection groups",
title = "") -> biplot
biplot
ggsave(filename = "figures/biplot.jpeg", plot = biplot,
width = 12, height = 6, dpi = 600)
# Contributions of variables to PC1
fviz_contrib(res.pca, choice = "var", axes = 1, top = 18,
title = "Contribution of immune genes to the first dimension of the PCA",
fill =  "seagreen2") -> contributions_pc1
contributions_pc1
ggsave(filename = "figures/contributions_pc1.jpeg", plot = contributions_pc1,
width = 6, height = 4, dpi = 1000)
## Contributions of variables to PC2
fviz_contrib(res.pca, choice = "var", axes = 2, top = 18,
title = "Contribution of immune genes to the second dimension of the PCA",
fill =  "seagreen2") -> contributions_pc2
contributions_pc2
ggsave(filename = "figures/contributions_pc2.jpeg", plot = contributions_pc2,
width = 6, height = 4, dpi = 1000)
# Load the required packages
###PC1 PC2 linear regression
model_1 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE +
mouse_strain + immunization +
weight_dpi0, data = lab )
summary(model_1)
tab_model(model_1)
stargazer(model_1,
type = "text", out = "tables/predictors_weightloss.txt",
title = "Linear models - Predicting maximum weight loss")
# Extract the residuals from the model
residuals <- resid(model_1)
# Create a data frame with the residuals
residuals_df <- data.frame(residuals = residuals)
# Create the QQ plot
residuals_1 <-
ggplot(residuals_df, aes(sample = residuals)) +
stat_qq(color = "blue") +
ggtitle("QQ Plot of Residuals") +
xlab("Theoretical Quantiles") +
ylab("Sample Quantiles") +
theme_minimal()
residuals_1
ggsave(filename = "figures/residuals_model_1.jpeg",
plot = residuals_1,
width = 12, height = 6, dpi = 600)
# Extract the fitted values from the model
fitted_values <- fitted(model_1)
# Create a data frame with the residuals and the fitted values
data_df <- data.frame(residuals = residuals, fitted_values = fitted_values)
# Create the scatter plot
residuals_vs_fitted <-
ggplot(data_df, aes(x = fitted_values, y = residuals)) +
geom_point(color = "blue") +
ggtitle("Residuals vs Fitted Values") +
xlab("Fitted Values") +
ylab("Residuals") +
theme_minimal()
residuals_vs_fitted
ggsave(filename = "figures/residuals_vs_fitted.jpeg",
plot = residuals_vs_fitted,
width = 12, height = 6, dpi = 600)
# without host data
model_2 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE +
immunization, data = lab)
summary(model_2)
# without host data
model_2 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE +
immunization, data = lab)
summary(model_2)
# only pc1 + pc2
model_3 <- lm(WL_max ~ PC1 + PC2 , data = lab)
summary(model_3)
plot_coefs(model_4, colors = "pink", plot.distributions = TRUE) -> coef_pc1_pc2
ggsave(filename = "figures/Coef_pc1_pc2.jpeg", coef_pc1_pc2, width = 6,
height = 4, dpi = 300)
tab_model(model_4, file = "tables/pc1_pc2_lm.doc")
plot_coefs(model_1, model_2, model_3, model_4)
model_5 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE +
weight_dpi0, data = lab)
summary(model_5)
plot_coefs(model_1, model_2, model_3, model_4, model_5)
## Please cite as:
##  Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
stargazer(model_1, model_2, model_3,
type = "text",
out = "tables/stargazer.doc",
title = "Linear models - Predicting maximum weight loss",
align = TRUE)
export_summs(model_1, model_2, model_3,
scale = TRUE, to.file = "docx",
file.name = "tables/lab_model1_3.docx")
library(modelsummary)
modelsummary(models = model_1, model_2, model_3, output = "tables/lab_model1.docx")
modelsummary(models = as.list(model_1, model_2, model_3), output = "tables/lab_model1.docx")
models <- list(
"Model 1" = model_1,
"Model 2" = model_2,
"Model 3" = model_3,
)
models <- list(
"Model 1" = model_1,
"Model 2" = model_2,
"Model 3" = model_3)
modelsummary(models, stars = TRUE, gof_omit = "IC|Adj|F|RMSE|Log")
modelsummary(models, stars = TRUE, gof_omit = "IC|Adj|F|RMSE|Log", output = "tables/lab_model1_3.jpeg")
modelsummary(models, stars = TRUE, gof_omit = "IC|Adj|F|RMSE|Log",
output = "tables/lab_model1_3.jpg")
# without host data
model_2 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE, data = lab)
summary(model_2)
# only pc1 + pc2
model_3 <- lm(WL_max ~ PC1 + PC2 , data = lab)
summary(model_3)
plot_coefs(model_4, colors = "pink", plot.distributions = TRUE) -> coef_pc1_pc2
ggsave(filename = "figures/Coef_pc1_pc2.jpeg", coef_pc1_pc2, width = 6,
height = 4, dpi = 300)
tab_model(model_4, file = "tables/pc1_pc2_lm.doc")
plot_coefs(model_1, model_2, model_3, model_4)
model_5 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE +
weight_dpi0, data = lab)
summary(model_5)
plot_coefs(model_1, model_2, model_3, model_4, model_5)
## Please cite as:
##  Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
stargazer(model_1, model_2, model_3,
type = "text",
out = "tables/stargazer.doc",
title = "Linear models - Predicting maximum weight loss",
align = TRUE)
export_summs(model_1, model_2, model_3,
scale = TRUE, to.file = "docx",
file.name = "tables/lab_model1_3.docx")
models <- list(
"Model 1" = model_1,
"Model 2" = model_2,
"Model 3" = model_3)
modelsummary(models, stars = TRUE, gof_omit = "IC|Adj|F|RMSE|Log",
output = "tables/lab_model1_3.jpg")
modelsummary(models, stars = TRUE, gof_omit = "IC|Adj|F|RMSE|Log",
output = "tables/lab_model1_3.docx")
