Parasite_challenge == "E_falciformis" & MC.Eimeria == "FALSE" ~ "uninfected",
Parasite_challenge == "uninfected" & MC.Eimeria == "TRUE" ~ "E_falciformis",
Parasite_challenge == "uninfected" & MC.Eimeria == "FALSE" ~ "uninfected",
TRUE ~ ""
))
# PCA
## we can now run a normal pca on the complete data set
res.pca <- PCA(genes)
fviz_eig(res.pca, addlabels = TRUE, ylim = c(0, 70))
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#DB6212", "#CC8733", "#5f25e6", "#073DA8"),
repel = TRUE, title = "")
fviz_pca_ind(res.pca, col.ind = "cos2",
gradient.cols = c("#DB6212", "#CC8733", "#5f25e6", "#073DA8"),
repel = TRUE, title = "")
## Description of the dimensions
## We get a correlation between each variable and the first dimension
dimdesc(res.pca)
mouse_id <- gene %>%
dplyr::select(Mouse_ID)
mouse_id$pc1 <- res.pca$ind$coord[, 1] # indexing the first column
mouse_id$pc2 <- res.pca$ind$coord[, 2]  # indexing the second column
lab <- lab %>%
left_join(mouse_id, by = "Mouse_ID")
## We also need to extract the data for the variable contributions to each of
## the pc axes.
pca.vars <- res.pca$var$coord %>% data.frame
pca.vars$vars <- rownames(pca.vars)
pca.vars.m <- melt(pca.vars, id.vars = "vars")
source("R/Functions/circle_fun.R")
circ <- circleFun(c(0,0),2,npoints = 500)
#Itâ€™s possible to use the function corrplot() [corrplot package] to highlight
#the most contributing variables for each dimension:
var.contrib <- as.data.frame(res.pca$var$contrib)
var.contrib.matrix <- data.matrix(var.contrib)
corrplot(var.contrib.matrix, is.corr=FALSE)
pca_var <- as.data.frame(pca.vars)
# Contributions of variables to PC1
fviz_contrib(res.pca, choice = "var", axes = 1, top = 18,
title = "Contribution of immune genes to the first dimension of the PCA")
## Contributions of variables to PC2
fviz_contrib(res.pca, choice = "var", axes = 2, top = 18,
title = "Contribution of immune genes to the second dimension of the PCA")
fviz_contrib(res.pca, choice = "var", axes = 1:2, top = 18)
# Total contribution on PC1 and PC2
fviz_contrib(res.pca, choice = "ind", axes = 1:2)
#select same rows in the first table
lab <- lab[row.names(genes), ]
fviz_pca_biplot(res.pca,
col.ind = lab$infection, palette = "jco",
addEllipses = TRUE, label = "var",
col.var = "black", repel = TRUE,
legend.title = "Infection groups",
title = "")
## We also need to extract the data for the variable contributions to each of
## the pc axes.
pca.vars <- res.pca$var$coord %>% data.frame
pca.vars$vars <- rownames(pca.vars)
## remove the mice labes
genes <- genes[, -1]
#remove rows with only nas
genes <- genes[,colSums(is.na(genes))<nrow(genes)]
#remove colums with only nas
genes <- genes[rowSums(is.na(genes)) != ncol(genes), ]
#select same rows in the first table
gene <- gene[row.names(genes), ]
# we need to change the  in challenge infections to a factor
lab$infection <- as.factor(lab$infection)
lab$MC.Eimeria <- as.factor(lab$MC.Eimeria)
# Here I create a new column, where we get the actual infection status
# According to the melting curve for eimeria
lab <- lab %>%
dplyr::mutate(current_infection = case_when(
Parasite_challenge == "E_ferrisi" & MC.Eimeria == "TRUE" ~ "E_ferrisi",
Parasite_challenge == "E_ferrisi" & MC.Eimeria == "FALSE" ~ "uninfected",
Parasite_challenge == "E_falciformis" & MC.Eimeria == "TRUE" ~ "E_falciformis",
Parasite_challenge == "E_falciformis" & MC.Eimeria == "FALSE" ~ "uninfected",
Parasite_challenge == "uninfected" & MC.Eimeria == "TRUE" ~ "infected_eimeria",
Parasite_challenge == "uninfected" & MC.Eimeria == "FALSE" ~ "uninfected",
TRUE ~ ""
))
# current falciformis
lab <- lab %>%
dplyr::mutate(infection = case_when(
Parasite_challenge == "E_ferrisi" & MC.Eimeria == "TRUE" ~ "E_ferrisi",
Parasite_challenge == "E_ferrisi" & MC.Eimeria == "FALSE" ~ "uninfected",
Parasite_challenge == "E_falciformis" & MC.Eimeria == "TRUE" ~ "E_falciformis",
Parasite_challenge == "E_falciformis" & MC.Eimeria == "FALSE" ~ "uninfected",
Parasite_challenge == "uninfected" & MC.Eimeria == "TRUE" ~ "E_falciformis",
Parasite_challenge == "uninfected" & MC.Eimeria == "FALSE" ~ "uninfected",
TRUE ~ ""
))
# PCA
## we can now run a normal pca on the complete data set
res.pca <- PCA(genes)
fviz_eig(res.pca, addlabels = TRUE, ylim = c(0, 70))
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#DB6212", "#CC8733", "#5f25e6", "#073DA8"),
repel = TRUE, title = "")
fviz_pca_ind(res.pca, col.ind = "cos2",
gradient.cols = c("#DB6212", "#CC8733", "#5f25e6", "#073DA8"),
repel = TRUE, title = "")
## Description of the dimensions
## We get a correlation between each variable and the first dimension
dimdesc(res.pca)
mouse_id <- gene %>%
dplyr::select(Mouse_ID)
mouse_id$pc1 <- res.pca$ind$coord[, 1] # indexing the first column
library(dplyr)
library(stringr)
library(FactoMineR)
model_1 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE +
mouse_strain + immunization +
weight_dpi0, data = lab)
library(ggrepel)
library(tidyverse)
library(dplyr)
library(scales)
library(cowplot)
library(ggthemes)
library(grid)
library(ggplot2)
library(ggpmisc)
library(broom)
library(knitr)
library(kableExtra)
library(webshot)
library(RColorBrewer)
library(ggeffects)
library(pheatmap)
library(pdp)
library(broom)
library(reshape2)
library(knitr)
#library(gt)
library(stargazer)
library(kableExtra)
# read the lab data with pca vectors
lab <- read.csv("Data/Data_output/lab_pca.csv")
# change the labels pc1 and pc2 to PC1 / PC2
lab <- lab %>%
dplyr::rename(PC1 = "pc1", PC2 = "pc2")
# read the variance explained by each gene for the pca
vpg <- read.csv("Data/Data_output/variance_contr_gene_lab.csv")
# Change the first column of the variance contribution of variables to the gene
# names
vpg <- vpg %>%
dplyr::rename(Variable = vars, PC1 = Dim.1, PC2 = Dim.2)
# add cos2 to lab
lab <- lab %>% mutate(cos2 = lab$PC1^2 + lab$PC2^2)
# Define color palette
color_palette <- c("E_ferrisi" = "#66C2A5", "uninfected" = "#8DA0CB",
"E_falciformis" = "#FC8D62")
# PCA graph of individuals
pca_individuals <-
ggplot(lab, aes(x = PC1, y = PC2, color = infection, shape = infection)) +
geom_hline(yintercept = 0, linetype = "dotted", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dotted", color = "gray50") +
geom_point(size = 3, alpha = 0.8) +
labs(x = "PC1 (52.32%)", y = "PC2 (11.79%)", title = "PCA graph of individuals",
colour = "Current infection", shape ="Current infection") +
theme_minimal() +
theme(plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position = "right") +
scale_color_manual(values = color_palette) +
scale_shape_manual(values = c("E_ferrisi" = 17, "uninfected" = 16, "E_falciformis" = 18)) +
guides(color = guide_legend(override.aes = list(size = 4)))
pca_individuals
ggsave(filename = "figures/pca_individuals.jpeg", plot = pca_individuals,
width = 6, height = 4, dpi = 300)
####### PCA graph of variables
# Add cos2 variable to the dataframe
vpg$cos2 <- with(vpg, PC1^2 + PC2^2)
# Define custom gradient colors
gradient_colors <- c("#B00B69", "#A55EA7", "#1D1CC9")
# Define the breaks and labels for the color legend
breaks <- c(0, 50, 100, 150)
labels <- c("0", "50", "100", "150")
# Plotting the factor map
pca_variables <-
ggplot(vpg, aes(x = PC1, y = PC2, color = cos2)) +
geom_segment(aes(xend = 0, yend = 0), color = "gray50") +
geom_point(size = 3) +
geom_label_repel(aes(label = Variable), size = 3, box.padding = 0.5, max.overlaps = Inf) +
coord_equal() +
xlab("PC1 (52.32%)") +
ylab("PC2 (11.79%)") +
ggtitle("PCA Plot of Variables") +
theme_minimal() +
theme(legend.position = "right", plot.title = element_text(size = 12, face = "bold")) +
guides(color = guide_colorbar(title = "Squared Distance from Origin")) +
scale_color_gradientn(colors = gradient_colors, guide = "none")
ggsave(filename = "figures/pca_variables.jpeg", plot = pca_variables,
width = 12, height = 6, dpi = 600)
#pca_variables
######################## Enriched Terms data frame
enriched_terms_df <- read.csv("Data/Data_output/enriched_sorted_terms.csv")
# First, transform the p-values to -log10 scale
enriched_terms_df$p_value_log <- -log10(enriched_terms_df$p_value)
# Create the lollipop plot using ggplot2
enrichment_terms_plot <-
ggplot(enriched_terms_df[1:15,], aes(x = reorder(GO_Term, p_value_log), y = p_value_log)) +
geom_segment(aes(xend = GO_Term, yend = 0, color = p_value_log), linewidth = 1.5) +
geom_point(aes(fill = p_value_log), size = 3, shape = 21, color = "mediumvioletred") +
scale_fill_gradientn(colours = rev(gradient_colors)) +
scale_color_gradientn(colours = rev(gradient_colors)) +
coord_flip() +
labs(x = "Enriched GO Terms", y = "-log10(p-value)",
title = "Gene Ontology Enrichment Analysis") +
theme_minimal() +
theme( plot.title = element_text(size = 12, face = "bold"))
enrichment_terms_plot
ggsave(filename = "figures/enrichment_terms_plot.jpeg", plot = enrichment_terms_plot,
width = 12, height = 6, dpi = 600)
pca_individuals <- pca_individuals + coord_fixed(ratio = 1)
# Create two separate grids
top_row <- plot_grid(pca_variables, enrichment_terms_plot, ncol = 2,
rel_widths = c(1, 1.2))
bottom_row <- pca_individuals
# Combine them vertically
figure_panel_1 <- plot_grid(top_row, bottom_row, ncol = 1, rel_heights = c(1, 1), labels = c("A", "B", "C"))
ggsave("figure_panels/figure_panel_1.jpeg", figure_panel_1,
width = 16, height = 10, dpi = 300)
##################################################################################################
#################################################
#################################################
#################################################
# Load the required packages
###PC1 PC2 linear regression
lab <- lab %>%
dplyr::mutate(current_infection = case_when(
current_infection == "infected_eimeria" ~ "E_falciformis",
TRUE ~ current_infection))
model_1 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE +
mouse_strain + immunization +
weight_dpi0, data = lab)
summary(model_1)
lab$max_WL
lab$WL_max
library(ggrepel)
library(tidyverse)
library(dplyr)
library(scales)
library(cowplot)
library(ggthemes)
library(grid)
library(ggplot2)
library(ggpmisc)
library(broom)
library(knitr)
library(kableExtra)
library(webshot)
library(RColorBrewer)
library(ggeffects)
library(pheatmap)
library(pdp)
library(broom)
library(reshape2)
library(knitr)
#library(gt)
library(stargazer)
library(kableExtra)
# read the lab data with pca vectors
lab <- read.csv("Data/Data_output/lab_pca.csv")
# change the labels pc1 and pc2 to PC1 / PC2
lab <- lab %>%
dplyr::rename(PC1 = "pc1", PC2 = "pc2")
# read the variance explained by each gene for the pca
vpg <- read.csv("Data/Data_output/variance_contr_gene_lab.csv")
# Change the first column of the variance contribution of variables to the gene
# names
vpg <- vpg %>%
dplyr::rename(Variable = vars, PC1 = Dim.1, PC2 = Dim.2)
# add cos2 to lab
lab <- lab %>% mutate(cos2 = lab$PC1^2 + lab$PC2^2)
# Define color palette
color_palette <- c("E_ferrisi" = "#66C2A5", "uninfected" = "#8DA0CB",
"E_falciformis" = "#FC8D62")
# PCA graph of individuals
pca_individuals <-
ggplot(lab, aes(x = PC1, y = PC2, color = infection, shape = infection)) +
geom_hline(yintercept = 0, linetype = "dotted", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dotted", color = "gray50") +
geom_point(size = 3, alpha = 0.8) +
labs(x = "PC1 (52.32%)", y = "PC2 (11.79%)", title = "PCA graph of individuals",
colour = "Current infection", shape ="Current infection") +
theme_minimal() +
theme(plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position = "right") +
scale_color_manual(values = color_palette) +
scale_shape_manual(values = c("E_ferrisi" = 17, "uninfected" = 16, "E_falciformis" = 18)) +
guides(color = guide_legend(override.aes = list(size = 4)))
pca_individuals
ggsave(filename = "figures/pca_individuals.jpeg", plot = pca_individuals,
width = 6, height = 4, dpi = 300)
# Add cos2 variable to the dataframe
vpg$cos2 <- with(vpg, PC1^2 + PC2^2)
# Define custom gradient colors
gradient_colors <- c("#B00B69", "#A55EA7", "#1D1CC9")
# Define the breaks and labels for the color legend
breaks <- c(0, 50, 100, 150)
labels <- c("0", "50", "100", "150")
# Plotting the factor map
pca_variables <-
ggplot(vpg, aes(x = PC1, y = PC2, color = cos2)) +
geom_segment(aes(xend = 0, yend = 0), color = "gray50") +
geom_point(size = 3) +
geom_label_repel(aes(label = Variable), size = 3, box.padding = 0.5, max.overlaps = Inf) +
coord_equal() +
xlab("PC1 (52.32%)") +
ylab("PC2 (11.79%)") +
ggtitle("PCA Plot of Variables") +
theme_minimal() +
theme(legend.position = "right", plot.title = element_text(size = 12, face = "bold")) +
guides(color = guide_colorbar(title = "Squared Distance from Origin")) +
scale_color_gradientn(colors = gradient_colors, guide = "none")
ggsave(filename = "figures/pca_variables.jpeg", plot = pca_variables,
width = 12, height = 6, dpi = 600)
######################## Enriched Terms data frame
enriched_terms_df <- read.csv("Data/Data_output/enriched_sorted_terms.csv")
# First, transform the p-values to -log10 scale
enriched_terms_df$p_value_log <- -log10(enriched_terms_df$p_value)
# Create the lollipop plot using ggplot2
enrichment_terms_plot <-
ggplot(enriched_terms_df[1:15,], aes(x = reorder(GO_Term, p_value_log), y = p_value_log)) +
geom_segment(aes(xend = GO_Term, yend = 0, color = p_value_log), linewidth = 1.5) +
geom_point(aes(fill = p_value_log), size = 3, shape = 21, color = "mediumvioletred") +
scale_fill_gradientn(colours = rev(gradient_colors)) +
scale_color_gradientn(colours = rev(gradient_colors)) +
coord_flip() +
labs(x = "Enriched GO Terms", y = "-log10(p-value)",
title = "Gene Ontology Enrichment Analysis") +
theme_minimal() +
theme( plot.title = element_text(size = 12, face = "bold"))
enrichment_terms_plot
ggsave(filename = "figures/enrichment_terms_plot.jpeg", plot = enrichment_terms_plot,
width = 12, height = 6, dpi = 600)
pca_individuals <- pca_individuals + coord_fixed(ratio = 1)
# Load the required packages
###PC1 PC2 linear regression
lab <- lab %>%
dplyr::mutate(current_infection = case_when(
current_infection == "infected_eimeria" ~ "E_falciformis",
TRUE ~ current_infection))
model_1 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE +
mouse_strain + immunization +
weight_dpi0, data = lab)
summary(model_1)
#see the ggefects
effects <- ggpredict(model_1)
pc1_current_infection <-
ggpredict(model_1, terms = c("PC1", "current_infection")) %>%
plot()
ggsave(filename = "figures/pc1_current_infection.jpeg",
plot = pc1_current_infection,
width = 12, height = 6, dpi = 600)
pc2_current_infection <-
ggpredict(model_1, terms = c("PC2", "current_infection")) %>%
plot()
model_2 <- (WL_max ~ PC1 + PC2, mouse_strain, weight_dpi0, data = lab)
model_2 <- (WL_max ~ PC1 + PC2, mouse_strain, weight_dpi0, data = lab)
model_2 <- lm(WL_max ~ PC1 + PC2, mouse_strain, weight_dpi0, data = lab)
summary(model_2)
library(ggrepel)
library(tidyverse)
library(dplyr)
library(scales)
library(cowplot)
library(ggthemes)
library(grid)
library(ggplot2)
library(ggpmisc)
library(broom)
library(knitr)
library(kableExtra)
library(webshot)
library(RColorBrewer)
library(ggeffects)
library(pheatmap)
library(pdp)
library(broom)
library(reshape2)
library(knitr)
#library(gt)
library(stargazer)
library(kableExtra)
# read the lab data with pca vectors
lab <- read.csv("Data/Data_output/lab_pca.csv")
# change the labels pc1 and pc2 to PC1 / PC2
lab <- lab %>%
dplyr::rename(PC1 = "pc1", PC2 = "pc2")
# read the variance explained by each gene for the pca
vpg <- read.csv("Data/Data_output/variance_contr_gene_lab.csv")
# Change the first column of the variance contribution of variables to the gene
# names
vpg <- vpg %>%
dplyr::rename(Variable = vars, PC1 = Dim.1, PC2 = Dim.2)
# add cos2 to lab
lab <- lab %>% mutate(cos2 = lab$PC1^2 + lab$PC2^2)
# Define color palette
color_palette <- c("E_ferrisi" = "#66C2A5", "uninfected" = "#8DA0CB",
"E_falciformis" = "#FC8D62")
# PCA graph of individuals
pca_individuals <-
ggplot(lab, aes(x = PC1, y = PC2, color = infection, shape = infection)) +
geom_hline(yintercept = 0, linetype = "dotted", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dotted", color = "gray50") +
geom_point(size = 3, alpha = 0.8) +
labs(x = "PC1 (52.32%)", y = "PC2 (11.79%)", title = "PCA graph of individuals",
colour = "Current infection", shape ="Current infection") +
theme_minimal() +
theme(plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position = "right") +
scale_color_manual(values = color_palette) +
scale_shape_manual(values = c("E_ferrisi" = 17, "uninfected" = 16, "E_falciformis" = 18)) +
guides(color = guide_legend(override.aes = list(size = 4)))
pca_individuals
ggsave(filename = "figures/pca_individuals.jpeg", plot = pca_individuals,
width = 6, height = 4, dpi = 300)
####### PCA graph of variables
# Add cos2 variable to the dataframe
vpg$cos2 <- with(vpg, PC1^2 + PC2^2)
# Define custom gradient colors
gradient_colors <- c("#B00B69", "#A55EA7", "#1D1CC9")
# Define the breaks and labels for the color legend
breaks <- c(0, 50, 100, 150)
labels <- c("0", "50", "100", "150")
# Plotting the factor map
pca_variables <-
ggplot(vpg, aes(x = PC1, y = PC2, color = cos2)) +
geom_segment(aes(xend = 0, yend = 0), color = "gray50") +
geom_point(size = 3) +
geom_label_repel(aes(label = Variable), size = 3, box.padding = 0.5, max.overlaps = Inf) +
coord_equal() +
xlab("PC1 (52.32%)") +
ylab("PC2 (11.79%)") +
ggtitle("PCA Plot of Variables") +
theme_minimal() +
theme(legend.position = "right", plot.title = element_text(size = 12, face = "bold")) +
guides(color = guide_colorbar(title = "Squared Distance from Origin")) +
scale_color_gradientn(colors = gradient_colors, guide = "none")
ggsave(filename = "figures/pca_variables.jpeg", plot = pca_variables,
width = 12, height = 6, dpi = 600)
#pca_variables
######################## Enriched Terms data frame
enriched_terms_df <- read.csv("Data/Data_output/enriched_sorted_terms.csv")
# First, transform the p-values to -log10 scale
enriched_terms_df$p_value_log <- -log10(enriched_terms_df$p_value)
# Create the lollipop plot using ggplot2
enrichment_terms_plot <-
ggplot(enriched_terms_df[1:15,], aes(x = reorder(GO_Term, p_value_log), y = p_value_log)) +
geom_segment(aes(xend = GO_Term, yend = 0, color = p_value_log), linewidth = 1.5) +
geom_point(aes(fill = p_value_log), size = 3, shape = 21, color = "mediumvioletred") +
scale_fill_gradientn(colours = rev(gradient_colors)) +
scale_color_gradientn(colours = rev(gradient_colors)) +
coord_flip() +
labs(x = "Enriched GO Terms", y = "-log10(p-value)",
title = "Gene Ontology Enrichment Analysis") +
theme_minimal() +
theme( plot.title = element_text(size = 12, face = "bold"))
enrichment_terms_plot
ggsave(filename = "figures/enrichment_terms_plot.jpeg", plot = enrichment_terms_plot,
width = 12, height = 6, dpi = 600)
pca_individuals <- pca_individuals + coord_fixed(ratio = 1)
##################################################################################################
#################################################
#################################################
#################################################
# Load the required packages
###PC1 PC2 linear regression
lab <- lab %>%
dplyr::mutate(current_infection = case_when(
current_infection == "infected_eimeria" ~ "E_falciformis",
TRUE ~ current_infection))
model_1 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE +
mouse_strain + immunization +
weight_dpi0, data = lab)
summary(model_1)
model_1 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE +
mouse_strain + immunization +
weight_dpi0, data = lab)
summary(model_1)
####
# 1. full model
# 2. without infection - delta_ct + current_inf + immu
# 3. without host mouse strains and the weight0
# 4. only pc1 pc2
### Now comparing different models with different variables
model_1 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE +
mouse_strain + immunization +
weight_dpi0, data = lab)
summary(model_1)
model_2 <- lm(WL_max ~ PC1 + PC2, mouse_strain, weight_dpi0, data = lab)
model_2 <- lm(WL_max ~ PC1 + PC2,# mouse_strain,
weight_dpi0, data = lab)
model_2 <- lm(WL_max ~ PC1 + PC2, weight_dpi0, data = lab)
summary(model_2)
model_2 <- lm(WL_max ~ PC1 + PC2, mouse_strain, weight_dpi0, data = lab)
unique(lab$mouse_strain)
min(lab$weight_dpi0)
