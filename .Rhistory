y = "Observed: Maximum weight loss") +
geom_point(aes(x = predictions, y = WL_max, size = 0.8, alpha = 0.4)) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
theme_light() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
legend.position = "none") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = formula_text, hjust = 0, vjust = 2, size = 4, color = "black") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = cor_text, hjust = 0, vjust = 1.5, size = 4, color = "black")
test_lab   %>%
ggplot(aes(x = predictions, y = WL_max)) +
geom_smooth(method = lm, se = TRUE) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
geom_point(aes(x = predictions, y = WL_max, size = 0.8, alpha = 0.4)) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
theme_light() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
legend.position = "none") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = formula_text, hjust = 0, vjust = 2, size = 4, color = "blue") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = cor_text, hjust = 0, vjust = 1.5, size = 4, color = "black")
test_lab   %>%
ggplot(aes(x = predictions, y = WL_max)) +
geom_smooth(method = lm, se = TRUE) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
geom_point(aes(x = predictions, y = WL_max, size = 0.8, alpha = 0.4)) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
theme_light() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
legend.position = "none") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = formula_text, hjust = 0, vjust = 4, size = 4, color = "blue") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = cor_text, hjust = 0, vjust = 1.5, size = 4, color = "black")
cor_text <- paste0("Rho = ", cor_value)
test_lab   %>%
ggplot(aes(x = predictions, y = WL_max)) +
geom_smooth(method = lm, se = TRUE) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
geom_point(aes(x = predictions, y = WL_max, size = 0.8, alpha = 0.4)) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
theme_light() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
legend.position = "none") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = formula_text, hjust = 0, vjust = 4, size = 4, color = "blue") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = cor_text, hjust = 0, vjust = 1.5, size = 4, color = "black")
test_lab   %>%
ggplot(aes(x = predictions, y = WL_max)) +
geom_smooth(method = lm, se = TRUE) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
geom_point(aes(x = predictions, y = WL_max, size = 0.8, alpha = 0.4)) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
theme_light() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
legend.position = "none") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = formula_text, hjust = 0, vjust = 4, size = 4, color = "blue") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = cor_text, hjust = 0, vjust = 1.5, size = 4, color = "blue")
ggsave(filename = "figures/linear_model_of_random_forest.jpeg")
ggsave(filename = "figures/linear_model_of_random_forest.jpeg", plot = linear_plot)
linear_plot
test_lab   %>%
ggplot(aes(x = predictions, y = WL_max)) +
geom_smooth(method = lm, se = TRUE) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
geom_point(aes(x = predictions, y = WL_max, size = 0.8, alpha = 0.4)) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
theme_light() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
legend.position = "none") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = formula_text, hjust = 0, vjust = 4, size = 4, color = "blue") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = cor_text, hjust = 0, vjust = 1.5, size = 4, color = "blue") -> linear_plot
ggsave(filename = "figures/linear_model_of_random_forest.jpeg", plot = linear_plot,
dpi = 1000)
test_lab   %>%
ggplot(aes(x = predictions, y = WL_max)) +
geom_smooth(method = lm, se = TRUE) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
geom_point(aes(x = predictions, y = WL_max, size = 0.8, alpha = 0.4, color = blue)) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
theme_light() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
legend.position = "none") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = formula_text, hjust = 0, vjust = 4, size = 4, color = "blue") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = cor_text, hjust = 0, vjust = 1.5, size = 4, color = "blue") -> linear_plot
linear_plot
geom_point(aes(x = predictions, y = WL_max, size = 0.8, alpha = 0.4, color = "blue"")) +
test_lab   %>%
ggplot(aes(x = predictions, y = WL_max)) +
geom_smooth(method = lm, se = TRUE) +
labs(x = "Predictions: Maximum weight loss",
linear_plot
test_lab   %>%
ggplot(aes(x = predictions, y = WL_max)) +
geom_smooth(method = lm, se = TRUE) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
geom_point(aes(x = predictions, y = WL_max, size = 0.8, alpha = 0.4, color = "blue")) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
theme_light() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
legend.position = "none") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = formula_text, hjust = 0, vjust = 4, size = 4, color = "blue") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = cor_text, hjust = 0, vjust = 1.5, size = 4, color = "blue") -> linear_plot
linear_plot
test_lab   %>%
ggplot(aes(x = predictions, y = WL_max)) +
geom_smooth(method = lm, se = TRUE) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
geom_point(aes(x = predictions, y = WL_max, size = 0.8, alpha = 0.4)) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
theme_light() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
legend.position = "none") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = formula_text, hjust = 0, vjust = 4, size = 4, color = "blue") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = cor_text, hjust = 0, vjust = 1.5, size = 4, color = "blue") -> linear_plot
linear_plot
test_lab   %>%
ggplot(aes(x = predictions, y = WL_max, color = blue)) +
geom_smooth(method = lm, se = TRUE) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
geom_point(aes(x = predictions, y = WL_max, size = 0.8, alpha = 0.4)) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
theme_light() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
legend.position = "none") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = formula_text, hjust = 0, vjust = 4, size = 4, color = "blue") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = cor_text, hjust = 0, vjust = 1.5, size = 4, color = "blue") -> linear_plot
test_lab   %>%
ggplot(aes(x = predictions, y = WL_max, color = "blue"blue"")) +
test_lab   %>%
ggplot(aes(x = predictions, y = WL_max, color = "blue")) +
geom_smooth(method = lm, se = TRUE) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
geom_point(aes(x = predictions, y = WL_max, size = 0.8, alpha = 0.4)) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
theme_light() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
legend.position = "none") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = formula_text, hjust = 0, vjust = 4, size = 4, color = "blue") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = cor_text, hjust = 0, vjust = 1.5, size = 4, color = "blue") -> linear_plot
linear_plot
test_lab   %>%
ggplot(aes(x = predictions, y = WL_max)) +
geom_smooth(method = lm, se = TRUE) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
geom_point(aes(x = predictions, y = WL_max, size = 0.8, alpha = 0.4)) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
theme_light() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
legend.position = "none") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = formula_text, hjust = 0, vjust = 4, size = 4, color = "blue") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = cor_text, hjust = 0, vjust = 1.5, size = 4, color = "blue") -> linear_plot
linear_plot
test_lab   %>%
ggplot(aes(x = predictions, y = WL_max)) +
geom_smooth(method = lm, se = TRUE) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
geom_point(aes(x = predictions, y = WL_max, size = 0.8, alpha = 0.3)) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
theme_light() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
legend.position = "none") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = formula_text, hjust = 0, vjust = 4, size = 4, color = "blue") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = cor_text, hjust = 0, vjust = 1.5, size = 4, color = "blue") -> linear_plot
linear_plot
test_lab   %>%
ggplot(aes(x = predictions, y = WL_max)) +
geom_smooth(method = lm, se = TRUE) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
geom_point(aes(x = predictions, y = WL_max), color = "black", fill = "blue", size = 0.8, alpha = 0.3, shape = 21) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
theme_light() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
legend.position = "none") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = formula_text, hjust = 0, vjust = 4, size = 4, color = "blue") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = cor_text, hjust = 0, vjust = 1.5, size = 4, color = "blue") -> linear_plot
linear_plot
test_lab   %>%
ggplot(aes(x = predictions, y = WL_max)) +
geom_smooth(method = lm, se = TRUE) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
geom_point(aes(x = predictions, y = WL_max, size = 0.8, alpha = 0.3)) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
theme_light() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
legend.position = "none") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = formula_text, hjust = 0, vjust = 4, size = 4, color = "blue") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = cor_text, hjust = 0, vjust = 1.5, size = 4, color = "blue") -> linear_plot
linear_plot
ggsave(filename = "figures/linear_model_of_random_forest.jpeg", plot = linear_plot,
dpi = 1000)
ggsave(filename = "figures/linear_model_of_random_forest.jpeg", plot = linear_plot,
width = 10, height = 8,
dpi = 1000)
ggsave(filename = "figures/linear_model_of_random_forest.jpeg", plot = linear_plot,
width = 10, height = 6,
dpi = 1000)
### plotting
test_lab %>%
drop_na(delta_ct_cewe_MminusE) %>%
mutate(infected_delta =
case_when(
delta_ct_cewe_MminusE > -5 ~ "infected",
delta_ct_cewe_MminusE < -5 ~ "uninfected"
)) %>%
ggplot(aes(x = predictions, y = WL_max, color = current_infection)) +
# Geom
geom_point(aes(size = delta_ct_cewe_MminusE, shape = infected_delta), alpha = 0.6) +
# Labels
labs(
x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss",
title = "Relationship between Predicted and Observed Weight Loss",
#subtitle = "Grouped by Current Infection and Sized by Delta CT Value",
color = "Current Infection",
size = "Delta CT Value",
shape = "Delta Ct treshold"
) +
# Theme adjustments
theme_minimal() +
theme(
legend.position = "right",
legend.title = element_text(face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
panel.grid.major = element_line(color = "gray90"),
panel.grid.minor = element_blank()
) +
# Color adjustments as per given values
scale_color_manual(values = c(E_falciformis = "salmon",
E_ferrisi = "forestgreen",
uninfected = "deepskyblue")) +
# Size adjustments
scale_size_continuous(range = c(2, 10)) -> predictions_random_for_lab
ggsave(plot = predictions_random_for_lab,
filename = "figures/predictions_random_for_lab.jpeg", width = 10, height = 8,
dpi = 1000)
predictions_random_for_lab
### plotting
test_lab %>%
drop_na(delta_ct_cewe_MminusE) %>%
mutate(infected_delta =
case_when(
delta_ct_cewe_MminusE > -5 ~ "infected",
delta_ct_cewe_MminusE < -5 ~ "uninfected"
)) %>%
ggplot(aes(x = predictions, y = WL_max, color = current_infection)) +
# Geom
geom_point(aes(size = delta_ct_cewe_MminusE, shape = infected_delta), alpha = 0.7) +
# Labels
labs(
x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss",
title = "Relationship between Predicted and Observed Weight Loss",
#subtitle = "Grouped by Current Infection and Sized by Delta CT Value",
color = "Current Infection",
size = "Delta CT Value",
shape = "Delta Ct treshold"
) +
# Theme adjustments
theme_minimal() +
theme(
legend.position = "right",
legend.title = element_text(face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
panel.grid.major = element_line(color = "gray90"),
panel.grid.minor = element_blank()
) +
# Color adjustments as per given values
scale_color_manual(values = c(E_falciformis = "salmon",
E_ferrisi = "forestgreen",
uninfected = "deepskyblue")) +
# Size adjustments
scale_size_continuous(range = c(2, 10)) -> predictions_random_for_lab
predictions_random_for_lab
ggsave(plot = predictions_random_for_lab,
filename = "figures/predictions_random_for_lab.jpeg", width = 10, height = 6,
dpi = 1000)
ggsave(plot = predictions_random_for_lab,
filename = "figures/predictions_random_for_lab.jpeg", width = 8, height = 6,
dpi = 1000)
ggsave(plot = predictions_random_for_lab,
filename = "figures/predictions_random_for_lab.jpeg", width = 8, height = 4,
dpi = 1000)
ggsave(plot = predictions_random_for_lab,
filename = "figures/predictions_random_for_lab.jpeg", width = 8, height = 5,
dpi = 1000)
# Calculate the linear model
lm_fit <- lm(WL_max ~ predictions, data = test_lab)
# Extract coefficients for the model formula
intercept <- round(coef(lm_fit)[1], 2)
slope <- round(coef(lm_fit)[2], 2)
formula_text <- paste0("WL_max = ", intercept, " ", ifelse(slope >= 0, "+ ", "- "), abs(slope), " * predictions")
# Calculate correlation
cor_value <- round(cor(test_lab$WL_max, test_lab$predictions), 2)
cor_text <- paste0("Rho = ", cor_value)
test_lab   %>%
ggplot(aes(x = predictions, y = WL_max)) +
geom_smooth(method = lm, se = TRUE) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
geom_point(aes(x = predictions, y = WL_max, size = 0.8, alpha = 0.3)) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
theme_light() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
legend.position = "none") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = formula_text, hjust = 0, vjust = 4, size = 4, color = "blue") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = cor_text, hjust = 0, vjust = 1.5, size = 4, color = "blue") -> linear_plot
linear_plot
ggsave(filename = "figures/linear_model_of_random_forest.jpeg", plot = linear_plot,
width = 10, height = 6,
dpi = 1000)
# current_falciformis
# According to the melting curve for eimeria
test_lab <- test_lab %>%
dplyr::mutate(current_falciformis = case_when(
infection == "E_ferrisi" & MC.Eimeria == "TRUE" ~ "E_ferrisi",
infection == "E_ferrisi" & MC.Eimeria == "FALSE" ~ "uninfected",
infection == "E_falciformis" & MC.Eimeria == "TRUE" ~ "E_falciformis",
infection == "E_falciformis" & MC.Eimeria == "FALSE" ~ "uninfected",
infection == "uninfected" & MC.Eimeria == "TRUE" ~ "E_falciformis",
infection == "uninfected" & MC.Eimeria == "FALSE" ~ "uninfected",
TRUE ~ ""
))
#train the model
WL_predict_gene <- randomForest(WL_max ~., data = gene,
proximity = TRUE, ntree = 1000)
# ntree = number of trees
# save the model
# toa = trained on all
saveRDS(WL_predict_gene, "r_scripts/models/predict_WL.rds")
# ntree = number of trees
# save the model
# toa = trained on all
saveRDS(WL_predict_gene, "R/Models//predict_WL.rds")
print(WL_predict_gene)
gene_curr <- lab %>%
dplyr::select(c(Mouse_ID, all_of(Gene_v), current_infection))
gene <- gene_curr %>%
dplyr::select(-Mouse_ID)
# split data into training and test
set.seed(123) # this will help us reproduce this random assignment
# in this way we can pick the random numbers
training.samples <- gene$infection%>%
createDataPartition(p = .7, list = FALSE)
train.data_parasite <- gene[training.samples, ]
test.data_parasite <- gene[-training.samples, ]
gene_curr <- lab %>%
dplyr::select(c(Mouse_ID, all_of(Gene_v), current_infection))
gene <- gene_curr %>%
dplyr::select(-Mouse_ID)
# split data into training and test
set.seed(123) # this will help us reproduce this random assignment
# in this way we can pick the random numbers
training.samples <- gene$current_infection%>%
createDataPartition(p = .7, list = FALSE)
train.data_parasite <- gene[training.samples, ]
test.data_parasite <- gene[-training.samples, ]
#train the model
model_Parasite <- randomForest(current_infection ~.,
data = train.data_parasite, proximity = TRUE,
ntree = 1500) # number of trees
View(training.samples)
# in this way we can pick the random numbers
training.samples <- gene$current_infection%>%
createDataPartition(p = .7, list = FALSE)
# in this way we can pick the random numbers
training.samples <- gene$current_infection%>%
createDataPartition(p = .7, list = FALSE)
# in this way we can pick the random numbers
training.samples <- gene$current_infection%>%
createDataPartition(p = .7, list = FALSE)
train.data <- gene[training.samples, ]
test.data <- gene[-training.samples, ]
#train the model
model_Parasite <- randomForest(current_infection ~.,
data = train, proximity = TRUE,
ntree = 1500) # number of trees
View(test.data)
View(train.data)
View(training.samples)
#train the model
model_Parasite <- randomForest(current_infection ~.,
data = train.data, proximity = TRUE,
ntree = 1500) # number of trees
# split data into training and test
set.seed(123) # this will help us reproduce this random assignment
# in this way we can pick the random numbers
training.samples <- gene$current_infection%>%
createDataPartition(p = .7, list = FALSE)
View(training.samples)
training.samples <- createDataPartition(y = gene$current_infection, p = .7, list = FALSE)
View(gene)
# in this way we can pick the random numbers
training.samples <- createDataPartition(y = gene_W$WL_max, p = .7, list = FALSE)
gene_W <- lab  %>%
dplyr::select(c(all_of(Gene_lab), WL_max))
# in this way we can pick the random numbers
training.samples <- createDataPartition(y = gene_W$WL_max, p = .7, list = FALSE)
# this is the partiicition! In this case 0.7 = training data and 0.3 = testing
# we don't want to get a list in return
train.data <- gene_W[training.samples, ]
test.data <- gene_W[-training.samples, ]
View(train.data)
gene_curr <- lab %>%
dplyr::select(c(Mouse_ID, all_of(Gene_v), current_infection))
gene <- gene_curr %>%
dplyr::select(-Mouse_ID)
# split data into training and test
set.seed(123) # this will help us reproduce this random assignment
# in this way we can pick the random numbers
training.samples <- createDataPartition(y = gene$current_infection, p = .7, list = FALSE)
train.data <- gene[training.samples, ]
test.data <- gene[-training.samples, ]
View(train.data)
#train the model
model_Parasite <- randomForest(current_infection ~.,
data = train.data, proximity = TRUE,
ntree = 1500) # number of trees
lab$current_infection
typeof(lab$current_infection)
lab$current_infection <- as.factor(lab$current_infection)
# split data into training and test
set.seed(123) # this will help us reproduce this random assignment
# in this way we can pick the random numbers
training.samples <- createDataPartition(y = gene$current_infection, p = .7, list = FALSE)
train.data <- gene[training.samples, ]
test.data <- gene[-training.samples, ]
#train the model
model_Parasite <- randomForest(current_infection ~.,
data = train.data, proximity = TRUE,
ntree = 1500) # number of trees
git add -A
git add -A
