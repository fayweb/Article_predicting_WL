##select same rows in the first table
lab <- lab[row.names(genes_lab), ]
hm_genes <- rbind(gene_lab_mouse, genes_mouse_field)
hm_selection_g <- rbind(lab, field)
glimpse(hm_genes)
genes <- hm_genes %>%
dplyr::select(-Mouse_ID)
#had to remove as they were disturbing the imputation: Worms_presence, MC.Eimeria.FEC,  Heligmosomoides_polygurus, Zfy2, Y,  MpiC,
#vis_miss(field)
# The frequency distribution of the missing cases per variable can be obtained
# as:
init <- mice(genes, maxit = 0)
# m=5 refers to the number of imputed datasets. Five is the default value.
igf <- mice(genes, m = 5, seed = 500) # method = meth,
summary(igf)
densityplot(igf, height = 1000, width = 800)
stripplot(igf, pch = 20, cex = 1.2)
stripplot(igf, pch = 20, cex = 1.2)
knitr::opts_chunk$set(echo = TRUE)
# install libraries
library(dplyr)
library(XML)
library(methods)
library(plyr)
library(readr)
library(ggplot2)
#read tsv table
David <- read_tsv("~/GitHub/Namibia_project/Data/Nanodrop_measurements/David_Nanodrop_DNA-Extractions.tsv")
# remove ffirst column
David <-  David[,-1]
#add column sample type
David <- David %>%
mutate(animal = "David")
#change the column names
write.csv(David,
"~/GitHub/Namibia_project/Data/Nanodrop_measurements/CSV/David.csv",
row.names = FALSE)
#read tsv table
Duppel_1 <- read_tsv("~/GitHub/Namibia_project/Data/Nanodrop_measurements/Düppel_26022023_2.tsv")
# remove ffirst column
Duppel_1 <-  Duppel_1[,-1]
#change the column names
write.csv(Duppel_1,
"~/GitHub/Namibia_project/Data/Nanodrop_measurements/CSV/Düppel_26022023.csv",
row.names = FALSE)
#read tsv table
Rodent_1 <- read_tsv("~/GitHub/Namibia_project/Data/Nanodrop_measurements/Rodents_26032023.tsv")
Rodent_2 <- read_tsv("~/GitHub/Namibia_project/Data/Nanodrop_measurements/Rodents_27032023.tsv")
#combine the measuerements
Rodent <- rbind(Rodent_1,Rodent_2)
# remove first column
Rodent <-  Rodent[,-1]
#change the column names
write.csv(Rodent_1,
"~/GitHub/Namibia_project/Data/Nanodrop_measurements/CSV/Rodents_26032023.csv",
row.names = FALSE)
Nanodrop <- rbind(Duppel_1, Rodent)
# remove spaces
colnames(Nanodrop) <- gsub(" ", "_", colnames(Nanodrop))
Nanodrop <- Nanodrop %>%
dplyr::rename(Quality_260_280 = '260/280',
Quality_260_230 = '260/230')
ggplot(Nanodrop, aes(x = Nucleic_Acid, y = Quality_260_280)) +
geom_jitter() +
labs(x = "Concentration of DNA in ng/µl", y = "Quality of DNA 260/280 ratio",
title = "Assessing quality of DNA with Nanodrop")
ggplot(Nanodrop %>%
filter(Quality_260_280 < 2.5,  Quality_260_280 > 1.5 ),
aes(x = Nucleic_Acid, y = Quality_260_280)) +
geom_jitter() +
labs(x = "Concentration of DNA in ng/µl", y = "Quality of DNA",
title = "Assessing quality of DNA with Nanodrop")
ggplot(Nanodrop,
aes(x = Nucleic_Acid, y = Quality_260_230)) +
geom_jitter() +
labs(x = "Concentration of DNA in ng/µl", y = "Quality of DNA, 260/230",
title = "Assessing quality of DNA with Nanodrop")
ggplot(Nanodrop %>% filter(Quality_260_230 < 60),
aes(x = Nucleic_Acid, y = Quality_260_230)) +
geom_jitter() +
labs(x = "Concentration of DNA in ng/µl", y = "Quality of DNA, 260/230",
title = "Assessing quality of DNA with Nanodrop")
ggplot(Nanodrop %>%
filter(Quality_260_230 < 2.5, Quality_260_230 > 1.8),
aes(x = Nucleic_Acid, y = Quality_260_230)) +
geom_jitter() +
labs(x = "Concentration of DNA in ng/µl", y = "Quality of DNA, 260/230",
title = "Assessing quality of DNA with Nanodrop")
Nanodrop %>%
filter( Quality_260_280 < 2.5,  Quality_260_280 > 1.5 )
# Read the two dataframes
setwd("Z:/home/shared/MITCH/motility/REP1/Plate 1 230427_131640_IMM Session/Plate_1_test/")
Mitch_results <- read.csv("Other_counts/Rep_1_Mitch_macro.csv")
Fay_results <- read.csv("")
# Read the two dataframes
setwd("~")
Fay_results <- read.csv("Z:/home/shared/MITCH/motility/REP1/Plate 1 230427_131640_IMM Session/Plate_1_test/Counter/Results_counter.csv")
View(Fay_results)
View(Mitch_results)
View(Fay_results)
library(dplyr)
# Libraries
library(dplyr)
# Read the two dataframes
Mitch_results <- read.csv("Z:/home/shared/MITCH/motility/REP1/Plate 1 230427_131640_IMM Session/Plate_1_test/Other_counts/Rep_1_Mitch_macro.csv")
Fay_results <- read.csv("Z:/home/shared/MITCH/motility/REP1/Plate 1 230427_131640_IMM Session/Plate_1_test/Counter/Results_counter.csv")
View(Fay_results)
# Create a df with Mitch'S and Fay's counts
Fay_results <- Fay_results %>%
rename(Fay = Count)
# Read the two dataframes
Mitch_results <- read.csv("Z:/home/shared/MITCH/motility/REP1/Plate 1 230427_131640_IMM Session/Plate_1_test/Other_counts/Rep_1_Mitch_macro.csv")
Fay_results <- read.csv("Z:/home/shared/MITCH/motility/REP1/Plate 1 230427_131640_IMM Session/Plate_1_test/Counter/Results_counter.csv")
# Create a df with Mitch'S and Fay's counts
Fay_results <- Fay_results %>%
rename(Fay = Count)
View(Mitch_results)
View(Fay_results)
compare <- Fay_results[,c(1,2)] %>%
left_join(Mitch_results[,c(1,2)])
View(compare)
compare <- Fay_results[,c(1,2)] %>%
left_join(Mitch_results[,c(1,2)],
by = "Slice")
View(compare)
T_compare <- t.test(Fay_results, Mitch_results)
T_compare <- t.test(Fay_results, Mitch_results, na.rm = TRUE)
View(compare)
t.test(Fay_results, Mitch_results)
t.test(Fay ~ Mitch, compare)
View(compare)
t.test(compare$Mitch, compare$Fay
t.test(compare$Mitch, compare$Fay)
t.test(compare$Mitch, compare$Fay)
?pivot_wider
library(tidyr)
?pivot_longer
pivot_longer(cols = c("Mitch", "Fay", names_to = Counter, values_to = Counts)
compare_longer <- compare %>%
compare_longer <- compare %>%
pivot_longer(cols = c("Mitch", "Fay", names_to = Counter, values_to = Counts))
compare_longer <- compare %>%
pivot_longer(cols = c("Mitch", "Fay"), names_to = Counter, values_to = Counts)
compare_longer <- compare %>%
pivot_longer(cols = c("Mitch", "Fay"), names_to = "Counter", values_to = "Counts")
compare_longer <- compare %>%
pivot_longer(cols = c("Mitch", "Fay"),
names_to = "Counter", values_to = "Counts")
View(compare_longer)
library(ggplot2)
ggplot(compare_longer, aes(x = Counter, y = Counts)) +
geom_violin()
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin()
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter, fill = Counter)) +
geom_violin()
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter, fill = Counter)) +
geom_violin() +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter, fill = Counter)) +
geom_violin() +
geom_boxplot() +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
t.test(compare$Mitch, compare$Fay)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
geom_dotplot() +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
geom_dotplot(aes(y = Counts)) +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
geom_jitter() +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
geom_point(position = position_jitter(seed = 1, width = 0.2)) +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
geom_point(position = position_jitter(seed = 1, width = 0.2)) +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
) +
theme_minimal()
t.test(compare$Mitch, compare$Fay)
2.2e-16
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
geom_point(position = position_jitter(seed = 1, width = 0.2)) +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
) +
theme_minimal() +
labs(title = "Differences between macros in counting attached parasites",
subtitle = "Welch Two Sample t-test: p-value < 2.2e-16")
setwd("GitHub/Article_predicting_WL/")
#install.packages("optimx", version = "2021-10.12") # this package is required for
#the parasite load package to work
#require(devtools)
## install the pacakage of Alice Balard
#devtools::install_github("alicebalard/parasiteLoad@v2.0", force = TRUE)
#force = TRUE)
library(parasiteLoad)
library(tidyverse)
library(tidyr)
library(dplyr)
library(cowplot)
library(randomForest)
library(ggplot2)
library(VIM) # visualizing missing data
library(mice) # imputing missing data without predictors
library(ggpubr)
library(optimx)
library(rfUtilities) # Implements a permutation test cross-validation for
library(fitdistrplus) #testing distributions
library(logspline)
library(caret)
library(dplyr)
library(tidyr)
library(ggeffects)# read the data
hm <- read.csv("Data/Data_output/imputed_clean_data.csv")
# filter for the field mice
Field <- hm %>%
filter(origin == "Field") %>%
drop_na(HI)
# Create vectors for selecting relevant columns
EqPCR.cols      <- c("delta_ct_cewe_MminusE", "MC.Eimeria", "Ct.Eimeria")
#,"Ct.Mus")
Genes_v   <- c("IFNy", "CXCR3", "IL.6", "IL.13", #"IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF") #, "IL.12", "IRG6")
# select the gene columns
gene <-  Field %>%
dplyr::select(c(Mouse_ID, "IFNy", "CXCR3", "IL.6", "IL.13", #"IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF"))
# data frame with only the genes
genes <- gene %>%
dplyr::select(-Mouse_ID)
# load predicting weight loss model
weight_loss_predict <- readRDS("R/Models/predict_WL.rds")
set.seed(540)
#The predict() function in R is used to predict the values based on the input data.
predicted_WL <- predict(weight_loss_predict, genes)
# assign test.data to a new object, so that we can make changes
result_field <- genes
#add the new variable of predictions to the result object
result_field <- cbind(result_field, predicted_WL)
# add it to the field data
Field <- cbind(Field, predicted_WL)
rm(gene,genes)
## ----------------------------------------------------------------------------
# Can the predicted weight loss be predicted by infection intensities
Field2 <- Field %>%
drop_na(delta_ct_cewe_MminusE) %>%
filter(MC.Eimeria == TRUE)
ggplot(data = Field2, aes(x = delta_ct_cewe_MminusE, y = predicted_WL)) +
geom_point() +
stat_smooth(method= "lm")
cor(Field2$predicted_WL, Field2$delta_ct_cewe_MminusE)
model_WL <- lm(predicted_WL ~  delta_ct_cewe_MminusE, data = Field2)
summary(model_WL)
confint(model_WL)
model_WL_infection <-
ggpredict(model_WL) %>%
plot(colors = "darkorange2") +   # Use a refined shade of blue
labs(title = NULL) +
xlab("Infection intensity of Eimeria spp. in the caecum") +
ylab("Predicted values of weight loss") +
theme_bw()
model_WL_infection
ggsave(filename = "figures/linear_model_WL_infection_field.jpeg",
plot = model_WL_infection,
width = 6, height = 4, dpi = 1000)
## ---------------------------------------------------------------------------------------------------
ggplot(data = Field, aes(x = OPG, y = predicted_WL)) +
geom_point() +
stat_smooth(method= "lm") +
scale_x_log10()
Field2 <- Field %>%
drop_na(OPG)
ggplot(data = Field2, aes(x = OPG, y = predicted_WL)) +
geom_point() +
stat_smooth(method= "lm") +
scale_x_log10()
cor(Field2$predicted_WL, Field2$OPG)
model <- lm(predicted_WL ~  OPG, data = Field)
summary(model)
confint(model)
## ---------------------------------------------------------------------------------------------------
model <- lm(predicted_WL ~  OPG * delta_ct_cewe_Mminus, data = Field)
################## hybrid effect
Field <- Field %>%
mutate(HI_2 = 2*HI*(1-HI), #linearize HI
tolerance = predicted_WL / delta_ct_cewe_MminusE)
i <- Field %>%
filter(Sex == "M") %>%
drop_na(tolerance)
cor(i$HI, i$tolerance, method = "spearman")
cor(i$HI, i$predicted_WL, method = "spearman")
i <- Field %>%
filter(Sex == "F") %>%
drop_na(tolerance)
cor(i$HI, i$tolerance, method = "spearman")
cor(i$HI, i$predicted_WL, method = "spearman")
ggplot(Field, aes(x = HI, HI_2)) +
geom_point() +
geom_line()
lm(formula = predicted_WL ~ HI_2 * Sex, data = Field)
model <- lm(formula = predicted_WL ~ HI_2 * Sex, data = Field)
summary(model)
## ---------------------------------------------------------------------------------------------------
Field <- Field %>%
dplyr::mutate(BMI = Body_Weight / (Body_Length)) #^2) which is the correct
ggplot(data = Field, aes(x = BMI, y = predicted_WL)) +
geom_point() +
stat_smooth(method= "lm")
bmi <- lm(predicted_WL ~ BMI, data = Field)
cor(Field$BMI, Field$predicted_WL, use = "complete.obs")
summary(bmi)
# Can the predicted weight loss be predicted by infection intensities
Field2 <- Field %>%
drop_na(delta_ct_cewe_MminusE) %>%
filter(MC.Eimeria == TRUE)
ggplot(data = Field2, aes(x = delta_ct_cewe_MminusE, y = predicted_WL)) +
geom_point() +
stat_smooth(method= "lm")
cor(Field2$predicted_WL, Field2$delta_ct_cewe_MminusE)
model_WL <- lm(predicted_WL ~  delta_ct_cewe_MminusE, data = Field2)
summary(model_WL)
################################
df <- Field %>%
drop_na(Trichuris_muris) %>%
filter(Trichuris_muris != 0) %>%
mutate(tolerance = predicted_WL / Trichuris_muris) %>%
drop_na(tolerance)
model_tolerance <- lm(predicted_WL ~ Trichuris_muris,
data = df)
summary(model_tolerance)
######################################################################
Field_asp <- Field %>%
drop_na(Aspiculuris_sp) %>%
filter(Aspiculuris_sp != 0) %>%
mutate(tolerance = predicted_WL / Aspiculuris_sp) %>%
drop_na(tolerance)
model <- lm(tolerance ~ Aspiculuris_sp, data = Field_asp)
summary(model)
model_tolerance <- lm(predicted_WL ~ delta_ct_cewe_MminusE,
data = df)
summary(model_tolerance)
######################################################################
Field_asp <- Field %>%
drop_na(Aspiculuris_sp) %>%
filter(Aspiculuris_sp != 0) %>%
mutate(tolerance = predicted_WL / Aspiculuris_sp) %>%
drop_na(tolerance)
model <- lm(tolerance ~ Aspiculuris_sp, data = Field_asp)
summary(model)
model_tolerance <- lm(predicted_WL ~ delta_ct_cewe_MminusE,
data = df)
summary(model_tolerance)
model <- lm(tolerance ~ HI + HI_2 * Sex, df)
summary(model)
####################################################################
Field_asp <- Field %>%
drop_na(Aspiculuris_sp) %>%
filter(Aspiculuris_sp != 0) %>%
mutate(tolerance = predicted_WL / Aspiculuris_sp) %>%
drop_na(tolerance)
model <- lm(tolerance ~ Aspiculuris_sp, data = Field_asp)
summary(model)
#################################
df <- Field %>%
drop_na(ILWE_Crypto_Ct) %>%
filter(ILWE_Crypto_Ct != 0) %>%
mutate(tolerance = predicted_WL / -ILWE_Crypto_Ct) %>%
drop_na(tolerance)
model_tolerance <- lm(predicted_WL ~ ILWE_Crypto_Ct,
data = df)
summary(model_tolerance)
###################################
df <- Field %>%
drop_na(Syphacia_sp) %>%
filter(Syphacia_sp != 0) %>%
mutate(tolerance = predicted_WL / Syphacia_sp) %>%
drop_na(tolerance)
model_tolerance <- lm(predicted_WL ~ Syphacia_sp,
data = df)
summary(model_tolerance)
#####################################
###################################
df <- Field %>%
drop_na(Heterakis_sp) %>%
filter(Heterakis_sp != 0) %>%
mutate(tolerance = predicted_WL / Heterakis_sp) %>%
drop_na(tolerance)
model_tolerance <- lm(predicted_WL ~ Heterakis_sp,
data = df)
summary(model_tolerance)
################################
df <- Field %>%
drop_na(Trichuris_muris) %>%
filter(Trichuris_muris != 0) %>%
mutate(tolerance = predicted_WL / Trichuris_muris) %>%
drop_na(tolerance)
model_tolerance <- lm(predicted_WL ~ Trichuris_muris,
data = df)
summary(model_tolerance)
##################################################################
#### Testing multiple parasites
model <- lm(predicted_WL ~ delta_ct_cewe_MminusE + Aspiculuris_sp +
Trichuris_muris + Heterakis_sp + ILWE_Crypto_Ct, Field)
summary(model)
##################################################################
#### Testing multiple parasites
model <- lm(predicted_WL ~ delta_ct_cewe_MminusE + Aspiculuris_sp +
Syphacia_sp + ILWE_Crypto_Ct, Field)
summary(model)
Field$ILWE_Crypto_Ct
model <- lm(predicted_WL ~ MC.Eimeria, Field)
summary(model)
####################################################
#####  crpyto ct
Field_crypto <- Field %>%
mutate(crypto_infected_ct =
case_when(
ILWE_Crypto_Ct > 0 ~ "TRUE",
ILWE_Crypto_Ct == 0 ~ "FALSE",
ILWE_Crypto_Ct == NA ~ NA
))
Field_crypto <- Field_crypto %>%
drop_na(crypto_infected)
model <- lm(predicted_WL ~ crypto_infected_ct, Field_crypto)
summary(model)
# Melting Curve analysis
Field_mc <- Field %>%
drop_na(MC.Eimeria)
Field_mc$MC.Eimeria <- as.factor(Field_mc$MC.Eimeria)
fitWL_mc <- parasiteLoad::analyse(data = Field_mc,
response = "predicted_WL",
model = "normal",
group = "MC.Eimeria")
#######################################
model <- lm(predicted_WL ~ MC.Eimeria * HI_2, Field)
summary(model)
#######################################
model <- lm(predicted_WL ~  HI_2, Field)
summary(model)
model <- lm(predicted_WL ~ MC.Eimeria + HI + HI_2, Field)
summary(model)
model <- lm(predicted_WL ~ MC.Eimeria + HI + HI_2 + Aspiculuris_sp +
Syphacia_sp, Field)
summary(model)
model <- lm(predicted_WL ~ #MC.Eimeria +
HI + HI_2 + Aspiculuris_sp +
Syphacia_sp, Field)
summary(model)
model <- lm(predicted_WL ~ MC.Eimeria +
HI + HI_2 + Aspiculuris_sp +
Syphacia_sp, Field)
summary(model)
model <- lm(predicted_WL ~ MC.Eimeria *delta_ct_cewe_MminusE +
HI + HI_2 + Aspiculuris_sp +
Syphacia_sp, Field)
summary(model)
View(model)
model <- lm(predicted_WL ~ MC.Eimeria *delta_ct_cewe_MminusE * HI_2 +
HI + HI_2 + Aspiculuris_sp +
Syphacia_sp, Field)
summary(model)
model <- lm(predicted_WL ~ MC.Eimeria *delta_ct_cewe_MminusE * HI_2 +
HI + HI_2, Field)
summary(model)
View(hm)
