df_lab <- df_lab %>%
mutate(IL1RN_dct = IL1RN - PPIB)
# max of dct
dct_max <- max(df_lab$IL1RN_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(IL1RN_N = 2^ - (IL1RN_dct - dct_max)) %>%
mutate(IL1RN_N = round(IL1RN_N, digits = 2))
##############  CASP1
df_lab <- df_lab %>%
mutate(CASP1_dct = CASP1 - PPIB)
# max of dct
dct_max <- max(df_lab$CASP1_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(CASP1_N = 2^ - (CASP1_dct - dct_max)) %>%
mutate(CASP1_N = round(CASP1_N, digits = 2))
##############  CXCL9
df_lab <- df_lab %>%
mutate(CXCL9_dct = CXCL9 - PPIB)
# max of dct
dct_max <- max(df_lab$CXCL9_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(CXCL9_N = 2^ - (CXCL9_dct - dct_max)) %>%
mutate(CXCL9_N = round(CXCL9_N, digits = 2))
##############  IDO1
df_lab <- df_lab %>%
mutate(IDO1_dct = IDO1 - PPIB)
# max of dct
dct_max <- max(df_lab$IDO1_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(IDO1_N = 2^ - (IDO1_dct - dct_max)) %>%
mutate(IDO1_N = round(IDO1_N, digits = 2))
##############  IRGM1
df_lab <- df_lab %>%
mutate(IRGM1_dct = IRGM1 - PPIB)
# max of dct
dct_max <- max(df_lab$IRGM1_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(IRGM1_N = 2^ - (IRGM1_dct - dct_max)) %>%
mutate(IRGM1_N = round(IRGM1_N, digits = 2))
##############  MPO
df_lab <- df_lab %>%
mutate(MPO_dct = MPO - PPIB)
# max of dct
dct_max <- max(df_lab$MPO_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(MPO_N = 2^ - (MPO_dct - dct_max)) %>%
mutate(MPO_N = round(MPO_N, digits = 2))
##############  MUC2
df_lab <- df_lab %>%
mutate(MUC2_dct = MUC2 - PPIB)
# max of dct
dct_max <- max(df_lab$MUC2_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(MUC2_N = 2^ - (MUC2_dct - dct_max)) %>%
mutate(MUC2_N = round(MUC2_N, digits = 2))
##############  MUC5AC
df_lab <- df_lab %>%
mutate(MUC5AC_dct = MUC5AC - PPIB)
# max of dct
dct_max <- max(df_lab$MUC5AC_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(MUC5AC_N = 2^ - (MUC5AC_dct - dct_max)) %>%
mutate(MUC5AC_N = round(MUC5AC_N, digits = 2))
##############  MYD88
df_lab <- df_lab %>%
mutate(MYD88_dct = MYD88 - PPIB)
# max of dct
dct_max <- max(df_lab$MYD88_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(MYD88_N = 2^ - (MYD88_dct - dct_max)) %>%
mutate(MYD88_N = round(MYD88_N, digits = 2))
##############  NCR1
df_lab <- df_lab %>%
mutate(NCR1_dct = NCR1 - PPIB)
# max of dct
dct_max <- max(df_lab$NCR1_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(NCR1_N = 2^ - (NCR1_dct - dct_max)) %>%
mutate(NCR1_N = round(NCR1_N, digits = 2))
##############  PRF1
df_lab <- df_lab %>%
mutate(PRF1_dct = PRF1 - PPIB)
# max of dct
dct_max <- max(df_lab$PRF1_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(PRF1_N = 2^ - (PRF1_dct - dct_max)) %>%
mutate(PRF1_N = round(PRF1_N, digits = 2))
##############  RETNLB
df_lab <- df_lab %>%
mutate(RETNLB_dct = RETNLB - PPIB)
# max of dct
dct_max <- max(df_lab$RETNLB_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(RETNLB_N = 2^ - (RETNLB_dct - dct_max)) %>%
mutate(RETNLB_N = round(RETNLB_N, digits = 2))
##############  SOCS1
df_lab <- df_lab %>%
mutate(SOCS1_dct = SOCS1 - PPIB)
# max of dct
dct_max <- max(df_lab$SOCS1_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(SOCS1_N = 2^ - (SOCS1_dct - dct_max)) %>%
mutate(SOCS1_N = round(SOCS1_N, digits = 2))
##############  TICAM1
df_lab <- df_lab %>%
mutate(TICAM1_dct = TICAM1 - PPIB)
# max of dct
dct_max <- max(df_lab$TICAM1_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(TICAM1_N = 2^ - (TICAM1_dct - dct_max)) %>%
mutate(TICAM1_N = round(TICAM1_N, digits = 2))
##############  TNF
df_lab <- df_lab %>%
mutate(TNF_dct = TNF - PPIB)
# max of dct
dct_max <- max(df_lab$TNF_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(TNF_N = 2^ - (TNF_dct - dct_max)) %>%
mutate(TNF_N = round(TNF_N, digits = 2))
df_lab <- df_lab[,-1]
## ---------------------------------------------------------------------------------------------------
#df_lab <- df_lab %>%
#  dplyr::select(-c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
#"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",   "MUC2", "MUC5AC", "MYD88",
#"NCR1", "PRF1", "RETNLB", "SOCS1",   "TICAM1", "TNF", PPIB, contains("_dct")))
# remove ending _N
#df_lab <- df_lab %>%
#  rename_with(~str_remove(.x, "_N"))
#df_field <- df_field %>%
#  dplyr::select(-c(all_of(Genes_wild), GAPDH, contains("_dct")))
# remove ending _N
#df_field <- df_field %>%
# rename_with(~str_remove(.x, "_N"))
###################### let's try just using DCT
df_lab <- df_lab %>%
dplyr::select(-c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10", "IL1RN","CASP1",
"CXCL9", "IDO1", "IRGM1", "MPO", "MUC2", "MUC5AC", "MYD88",
"NCR1", "PRF1", "RETNLB", "SOCS1",  "TICAM1", "TNF", "PPIB",
contains("_N")))
Mouse_ID <- gml$Mouse_ID
df_lab <- cbind(Mouse_ID, df_lab)
View(df_lab)
# remove ending _dct
df_lab <- df_lab %>%
rename_with(~str_remove(.x, "_dct"))
df_field <- df_field %>%
dplyr::select(-c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10", "IL1RN","CASP1",
"CXCL9", "IDO1", "IRGM1", "MPO", "MUC2", "MUC5AC", "MYD88",
"NCR1", "PRF1", "RETNLB", "SOCS1",  "TICAM1", "TNF", "GAPDH",
contains("_N")))
# remove ending
df_field <- df_field %>%
rename_with(~str_remove(.x, "_dct"))
# add the new genes to the complete data sets
lab <- lab %>%
dplyr::select(-all_of(Genes_v)) %>%
left_join(df_lab, by = "Mouse_ID")
field <- field %>%
dplyr::select(-c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10", "IL1RN","CASP1",
"CXCL9", "IDO1", "IRGM1", "MPO",  "MUC2", "MUC5AC", "MYD88",
"NCR1", "PRF1", "RETNLB", "SOCS1",  "TICAM1", "TNF")) %>%
left_join(df_field, by = "Mouse_ID")
hm_norm <- rbind(lab, field)
View(hm_norm)
View(lab)
source("R/Scripts/1.Data_prep.R")
## ---------------------------------------------------------------------------------------------------
library(mice)
library(stringr)
## ---------------------------------------------------------------------------------------------------
hm <- data
## Normalizing
hm$Mouse_ID <- str_replace(hm$Mouse_ID, "_", "")
field <- hm %>%
dplyr::filter(origin == "Field")
# select the genes, the mouse identifier and the house keeping gene
gmf <- field[, c("Mouse_ID", Genes_v, "GAPDH")]
# and now the genes only
gf <- field[, Genes_v]
#remove columns with only nas
gf <- gf[,colSums(is.na(gf)) < nrow(gf)]
#remove rows with only nas
gf <- gf[rowSums(is.na(gf)) != ncol(gf), ]
gmf <- gmf[row.names(gf), ]
##select same rows in the first table
field <- field[row.names(gf), ]
###############lab
#select the genes and lab mice
lab <- hm %>%
dplyr::filter(origin == "Lab", Position == "mLN") #selecting for mln to avoid
View(lab)
# select the genes and house keeping gene
gml <- lab[, c("Mouse_ID", Genes_v, "PPIB")]
# remove the xplicates caused by different dpis
gml <- unique(gml)
View(gml)
# and now the genes only
gl <- gml[, Genes_v]
#remove columns with only nas
gl <- gl[,colSums(is.na(gl)) < nrow(gl)]
#remove rows with only nas
gl <- gl[rowSums(is.na(gl)) != ncol(gl), ]
gml <- gml[row.names(gl), ]
##select same rows in the first table
lab <- lab[row.names(gl), ]
View(lab)
View(gml)
gml <- gml[row.names(gl), ]
View(gml)
View(lab)
# looking at patterns of nas)
#pattern_na <-as.data.frame(md.pattern(field_genes))
#field
sapply(gmf, function(x) sum(is.na(x)))
#lab
sapply(gml, function(x) sum(is.na(x)))
## Normalizing
hm$Mouse_ID <- str_replace(hm$Mouse_ID, "_", "")
field <- hm %>%
dplyr::filter(origin == "Field")
## ---------------------------------------------------------------------------------------------------
hm <- data
## Normalizing
hm$Mouse_ID <- str_replace(hm$Mouse_ID, "_", "")
field <- hm %>%
dplyr::filter(origin == "Field")
# select the genes, the mouse identifier and the house keeping gene
gmf <- field[, c("Mouse_ID", Genes_v, "GAPDH")]
View(gmf)
# and now the genes only
gf <- field[, Genes_v]
#remove columns with only nas
gf <- gf[,colSums(is.na(gf)) < nrow(gf)]
#remove rows with only nas
gf <- gf[rowSums(is.na(gf)) != ncol(gf), ]
View(gf)
View(gmf)
View(gmf)
View(gf)
# select the genes, the mouse identifier and the house keeping gene
gmf <- field[, c("Mouse_ID", Genes_v, "GAPDH")]
# and now the genes only
gf <- field[, Genes_v]
# and now the genes only
gf <- field[, Genes_v]
#remove columns with only nas
gmf <- gmf[,colSums(is.na(gmf[, Genes_v])) < nrow(gmf[, Genes_v])]
View(gf)
#remove columns with only nas
gmf <- gmf[,colSums(is.na(gmf[, c(Genes_v, "GAPDH"])) < nrow(gmf[,c(Genes_v, "GAPDH")])]
#remove columns with only nas
gmf <- gmf[,colSums(is.na(gmf[, c(Genes_v, "GAPDH")]) < nrow(gmf[, c(Genes_v, "GAPDH")])
View(gmf)
gf <- gmf[, -"Mouse_ID"]
#remove columns with only nas
gmf <- gmf[,colSums(is.na(gf) < nrow(gf)
#remove columns with only nas
gmf <- gmf[,colSums(is.na(gf) < nrow(gf)]
## ---------------------------------------------------------------------------------------------------
hm <- data
## Normalizing
hm$Mouse_ID <- str_replace(hm$Mouse_ID, "_", "")
field <- hm %>%
dplyr::filter(origin == "Field")
# select the genes, the mouse identifier and the house keeping gene
gmf <- field[, c("Mouse_ID", Genes_v, "GAPDH")]
# and now the genes only
gf <- field[, -"Mouse_ID"]
#remove columns with only nas
gmf <- gmf[,colSums(is.na(gf)) < nrow(gf)]
#remove columns with only nas
gmf <- gmf[,colSums(is.na(gf)) < nrow(gfm)]
#remove columns with only nas
gmf <- gmf[,colSums(is.na(gf)) < nrow(gmf)]
#remove columns with only nas
gmf <- gmf[,colSums(is.na(gf)) < nrow(gmf)]
# Remove columns with only NA values
gmf <- gmf %>% select_if(~!all(is.na(.)))
#remove rows with only nas
gmf <- gmf %>% filter(!rowwise() %>% reduce(across(-1), ~is.na(..1) & is.na(..2)))
View(gmf)
#remove rows with only nas
gmf <- gmf[!apply(is.na(gmf[-1]), 1, all), ]
View(gmf)
##select same rows in the first table
field <- field[gmf$Mouse_ID, ]
View(field)
View(gmf)
## ---------------------------------------------------------------------------------------------------
hm <- data
## Normalizing
hm$Mouse_ID <- str_replace(hm$Mouse_ID, "_", "")
field <- hm %>%
dplyr::filter(origin == "Field")
# select the genes, the mouse identifier and the house keeping gene
gmf <- field[, c("Mouse_ID", Genes_v, "GAPDH")]
# and now the genes only
gf <- field[, -"Mouse_ID"]
# Remove columns with only NA values
gmf <- gmf %>% select_if(~!all(is.na(.)))
#remove rows with only nas
gmf <- gmf[!apply(is.na(gmf[-1]), 1, all), ]
## ---------------------------------------------------------------------------------------------------
hm <- data
## Normalizing
hm$Mouse_ID <- str_replace(hm$Mouse_ID, "_", "")
field <- hm %>%
dplyr::filter(origin == "Field")
# select the genes, the mouse identifier and the house keeping gene
gmf <- field[, c("Mouse_ID", Genes_v, "GAPDH")]
# and now the genes only
gf <- field[, -"Mouse_ID"]
# select the genes, the mouse identifier and the house keeping gene
gmf <- field[, c("Mouse_ID", Genes_v, "GAPDH")]
# Remove columns with only NA values
gmf <- gmf %>% select_if(~!all(is.na(.)))
#remove rows with only nas
gmf <- gmf[!apply(is.na(gmf[-1]), 1, all), ]
#remove rows with only nas
gmf <- gmf[!apply(is.na(gmf[-1]), 1, all), ]
##select same rows in the first table
field <- field[row.gmf$Mouse_ID, ]
##select same rows in the first table
field <- field %>%
filter(Mouse_ID %in% gmf$Mouse_ID)
View(field)
gf <- gmf[, -Mouse_ID]
View(gmf)
View(gf)
gf <- gmf[, -Mouse_ID]
gf <- gmf[-Mouse_ID]
View(gf)
gf <- gmf[, -Mouse_ID]
gf <- gmf[, -"Mouse_ID"]
gf <- gmf[, -"Mouse_ID"]
gf <- gmf[-"Mouse_ID"]
gf <- gmf[,-1]
View(gf)
##select same rows in the first table
field <- field %>%
filter(Mouse_ID %in% gmf$Mouse_ID)
# select the genes, the mouse identifier and the house keeping gene
gml <- lab[, c("Mouse_ID", Genes_v, "PPIB")]
# Remove columns with only NA values
gml <- gml %>% select_if(~!all(is.na(.)))
# select the genes, the mouse identifier and the house keeping gene
gml <- lab[, c("Mouse_ID", Genes_v, "PPIB")]
View(gml)
###############lab
#select the genes and lab mice
lab <- hm %>%
dplyr::filter(origin == "Lab", Position == "mLN") #selecting for mln to avoid
View(lab)
###############lab
#select the genes and lab mice
lab <- hm %>%
dplyr::filter(origin == "Lab", Position == "mLN") %>% #selecting for mln to avoid
group_by(Mouse_ID)
View(lab)
###############lab
#select the genes and lab mice
lab <- hm %>%
dplyr::filter(origin == "Lab", Position == "mLN")
# select the genes, the mouse identifier and the house keeping gene
gml <- lab[, c("Mouse_ID", Genes_v, "PPIB")]
gml <- unique(gml)
View(gml)
# Remove columns with only NA values
gml <- gml %>% select_if(~!all(is.na(.)))
#remove rows with only nas
gml <- gml[!apply(is.na(gml[-1]), 1, all), ]
View(gml)
gl <- gml[,-1]
View(lab)
##select same rows in the first table
lab2 <- gml %>%
left_join(lab, by = intersect(colnames(gml), colnames(lab)))
View(lab2)
View(gml)
##select same rows in the first table
lab2 <- gml %>%
left_join(lab, by = "Mouse_ID")
View(lab2)
View(gml)
# Remove columns with only NA values
lab <- lab %>% select_if(~!all(is.na(.)))
View(gml)
View(lab)
###############lab
#select the genes and lab mice
lab <- hm %>%
dplyr::filter(origin == "Lab", Position == "mLN") %>%
group_by(Mouse_ID, infection)
View(lab)
###############lab
#select the genes and lab mice
lab <- hm %>%
dplyr::filter(origin == "Lab", Position == "mLN") %>%
group_by(Mouse_ID, infection) %>%
filter(dpi == dpi_max)
###############lab
#select the genes and lab mice
lab <- hm %>%
dplyr::filter(origin == "Lab", Position == "mLN") %>%
group_by(Mouse_ID, infection) %>%
filter(dpi == max_dpi)
View(lab)
View(lab)
# select the genes, the mouse identifier and the house keeping gene
gml <- lab[, c("Mouse_ID", Genes_v, "PPIB")]
gml <- unique(gml)
# Remove columns with only NA values
gml <- gml %>% select_if(~!all(is.na(.)))
#remove rows with only nas
gml <- gml[!apply(is.na(gml[-1]), 1, all), ]
gml <- unique(gml)
# Remove columns with only NA values
gml <- gml %>% select_if(~!all(is.na(.)))
#remove rows with only nas
gml <- gml[!apply(is.na(gml[-1]), 1, all), ]
gl <- gml[,-1]
View(gl)
##select same rows in the first table
lab2 <- lab %>%
filter(Mouse_ID %in% gml$Mouse_ID)
View(lab2)
##select same rows in the first table
lab <- lab %>%
filter(Mouse_ID %in% gml$Mouse_ID)
# looking at patterns of nas)
#pattern_na <-as.data.frame(md.pattern(field_genes))
#field
sapply(gmf, function(x) sum(is.na(x)))
#lab
sapply(gml, function(x) sum(is.na(x)))
View(lab2)
rm(Challenge, SOTA,)
source("R/Scripts/1.Data_prep.R")
## ---------------------------------------------------------------------------------------------------
library(mice)
library(stringr)
## ---------------------------------------------------------------------------------------------------
hm <- data
## Normalizing
hm$Mouse_ID <- str_replace(hm$Mouse_ID, "_", "")
field <- hm %>%
dplyr::filter(origin == "Field")
# select the genes, the mouse identifier and the house keeping gene
gmf <- field[, c("Mouse_ID", Genes_v, "GAPDH")]
# Remove columns with only NA values
gmf <- gmf %>% select_if(~!all(is.na(.)))
#remove rows with only nas
gmf <- gmf[!apply(is.na(gmf[-1]), 1, all), ]
gf <- gmf[,-1]
##select same rows in the first table
field <- field %>%
filter(Mouse_ID %in% gmf$Mouse_ID)
###############lab
#select the genes and lab mice
lab <- hm %>%
dplyr::filter(origin == "Lab", Position == "mLN") %>%
group_by(Mouse_ID, infection) %>%
filter(dpi == max_dpi)
# select the genes, the mouse identifier and the house keeping gene
gml <- lab[, c("Mouse_ID", Genes_v, "PPIB")]
gml <- unique(gml)
# Remove columns with only NA values
gml <- gml %>% select_if(~!all(is.na(.)))
#remove rows with only nas
gml <- gml[!apply(is.na(gml[-1]), 1, all), ]
gl <- gml[,-1]
##select same rows in the first table
lab <- lab %>%
filter(Mouse_ID %in% gml$Mouse_ID)
# looking at patterns of nas)
#pattern_na <-as.data.frame(md.pattern(field_genes))
#field
sapply(gmf, function(x) sum(is.na(x)))
#lab
sapply(gml, function(x) sum(is.na(x)))
lab_prim <- lab %>%
filter(death == "primary")
View(lab_prim)
View(lab)
lab_chal <- lab %>%
filter(death == "challenge")
232 + 20
lab_chal <- lab %>%
filter(death == "challenge", infection == "challenge")
116 + 20
lab <- rbind(lab_prim, lab_chal)
rm(lab_prim, lab_chal)
#remove duplicates
lab_prim <- lab %>%
filter(death == "primary")
source("~/GitHub/Article_predicting_WL/R/Scripts/2.Data_normalization.R")
View(hm_norm)
