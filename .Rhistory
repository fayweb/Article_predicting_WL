hm_selection_g <- hm_selection_g %>%
dplyr::select(-c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF"))
# add the new imputed genes to the data
hm_selection_g <- cbind(hm_selection_g, complete_genes)
plot(igf)
library(mice)
library(tidyr)
library(tidyverse)
library(VIM)
library(fitdistrplus)
library(fitur)
library(visdat)
setwd("~/GitHub/Eimeria_mouse_immunity/")
hm <- read.csv("output_data/1.MICE_cleaned_data.csv")
# Vectors for selecting genes
#Lab genes
# The measurements of IL.12 and IRG6 are done with an other assay and will
#ignore for now
Gene_lab   <- c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF") #"IL.12", "IRG6")
Genes_wild   <- c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF") #, "IL.12", "IRG6")
Facs_lab <- c("CD4", "Treg", "Div_Treg", "Treg17", "Th1",
"Div_Th1", "Th17", "Div_Th17", "CD8", "Act_CD8",
"Div_Act_CD8", "IFNy_CD4", "IFNy_CD8","Treg_prop",
"IL17A_CD4")
Facs_wild <- c( "Treg", "CD4", "Treg17", "Th1", "Th17", "CD8")
# data imputation
# Genes
field <- hm %>%
dplyr::filter(origin == "Field")
field <- unique(field)
genes_mouse_field <- field %>%
dplyr::select(c(Mouse_ID, all_of(Genes_wild)))
genes <- genes_mouse_field  %>%
dplyr::select(-Mouse_ID)
#remove rows with only nas
genes <- genes[,colSums(is.na(genes))<nrow(genes)]
#remove colums with only nas
genes <- genes[rowSums(is.na(genes)) != ncol(genes), ]
genes_mouse_field <- genes_mouse_field[row.names(genes), ]
##select same rows in the first table
field <- field[row.names(genes), ]
###############lab
#select the genes and lab muce
lab <- hm %>%
dplyr::filter(origin == "Lab", Position == "mLN") #selecting for mln to avoid
# duplicates
lab <- unique(lab)
gene_lab_mouse <- lab %>%
dplyr::select(c(Mouse_ID, all_of(Gene_lab)))
gene_lab_mouse <- unique(gene_lab_mouse)
genes_lab <- gene_lab_mouse[, -1]
#remove rows with only nas
genes_lab <- genes_lab[,colSums(is.na(genes_lab))<nrow(genes_lab)]
#remove colums with only nas
genes_lab <- genes_lab[rowSums(is.na(genes_lab)) != ncol(genes_lab), ]
genes_lab <- unique(genes_lab)
#select same rows in the first table
gene_lab_mouse <- gene_lab_mouse[row.names(genes_lab), ]
##select same rows in the first table
lab <- lab[row.names(genes_lab), ]
hm_genes <- rbind(gene_lab_mouse, genes_mouse_field)
hm_selection_g <- rbind(lab, field)
genes <- hm_genes #%>%
# dplyr::select(-Mouse_ID)
# looking at patterns of nas
#pattern_na <-as.data.frame(md.pattern(field_genes))
sapply(hm_genes, function(x) sum(is.na(x)))
#had to remove as they were disturbing the imputation: Worms_presence, MC.Eimeria.FEC,  Heligmosomoides_polygurus, Zfy2, Y,  MpiC,
#vis_miss(field)
# The frequency distribution of the missing cases per variable can be obtained
# as:
init <- mice(genes, maxit = 0)
#we want to impute only the specific variables
meth <- init$method
aggr_plot <- aggr(hm_genes, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(hm_genes), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
marginplot(hm_genes[c(4,5)])
# m=5 refers to the number of imputed datasets. Five is the default value.
igf <- mice(genes, m = 5, seed = 500) # method = meth,
summary(igf)
# to check each column with imputed data
## igf$imp$IFNy
#Now we can get back the completed dataset using the complete()
complete_genes <- complete(igf, 1)
#sapply(complete_field, function(x) sum(is.na(x)))
#visualize missingness
vis_dat(complete_genes)
#remove the non imputed genes from our data set
hm_selection_g <- hm_selection_g %>%
dplyr::select(-c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF"))
# add the new imputed genes to the data
hm_selection_g <- cbind(hm_selection_g, complete_genes)
plot(igf)
plot(igf)
xyplot(igf, IFNy ~ IL.13 + IRGM1 + MUC2, pch=18,cex=1)
xyplot(igf,IFNy ~ IL.10 + PRF1 + CASP1, pch=18,cex=1)
stripplot(igf, pch = 20, cex = 1.2)
densityplot(igf, height = 1000, width = 800)
library(mice)
library(tidyr)
library(tidyverse)
library(VIM)
library(fitdistrplus)
library(fitur)
library(visdat)
setwd("~/GitHub/Eimeria_mouse_immunity/")
hm <- read.csv("output_data/1.MICE_cleaned_data.csv")
# Vectors for selecting genes
#Lab genes
# The measurements of IL.12 and IRG6 are done with an other assay and will
#ignore for now
Gene_lab   <- c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF") #"IL.12", "IRG6")
Genes_wild   <- c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF") #, "IL.12", "IRG6")
Facs_lab <- c("CD4", "Treg", "Div_Treg", "Treg17", "Th1",
"Div_Th1", "Th17", "Div_Th17", "CD8", "Act_CD8",
"Div_Act_CD8", "IFNy_CD4", "IFNy_CD8","Treg_prop",
"IL17A_CD4")
Facs_wild <- c( "Treg", "CD4", "Treg17", "Th1", "Th17", "CD8")
# data imputation
# Genes
field <- hm %>%
dplyr::filter(origin == "Field")
field <- unique(field)
genes_mouse_field <- field %>%
dplyr::select(c(Mouse_ID, all_of(Genes_wild)))
genes <- genes_mouse_field  %>%
dplyr::select(-Mouse_ID)
#remove rows with only nas
genes <- genes[,colSums(is.na(genes))<nrow(genes)]
#remove colums with only nas
genes <- genes[rowSums(is.na(genes)) != ncol(genes), ]
genes_mouse_field <- genes_mouse_field[row.names(genes), ]
##select same rows in the first table
field <- field[row.names(genes), ]
###############lab
#select the genes and lab muce
lab <- hm %>%
dplyr::filter(origin == "Lab", Position == "mLN") #selecting for mln to avoid
# duplicates
lab <- unique(lab)
gene_lab_mouse <- lab %>%
dplyr::select(c(Mouse_ID, all_of(Gene_lab)))
gene_lab_mouse <- unique(gene_lab_mouse)
genes_lab <- gene_lab_mouse[, -1]
#remove rows with only nas
genes_lab <- genes_lab[,colSums(is.na(genes_lab))<nrow(genes_lab)]
#remove colums with only nas
genes_lab <- genes_lab[rowSums(is.na(genes_lab)) != ncol(genes_lab), ]
genes_lab <- unique(genes_lab)
#select same rows in the first table
gene_lab_mouse <- gene_lab_mouse[row.names(genes_lab), ]
##select same rows in the first table
lab <- lab[row.names(genes_lab), ]
hm_genes <- rbind(gene_lab_mouse, genes_mouse_field)
hm_selection_g <- rbind(lab, field)
genes <- hm_genes %>%
dplyr::select(-Mouse_ID)
# looking at patterns of nas
#pattern_na <-as.data.frame(md.pattern(field_genes))
sapply(hm_genes, function(x) sum(is.na(x)))
#had to remove as they were disturbing the imputation: Worms_presence, MC.Eimeria.FEC,  Heligmosomoides_polygurus, Zfy2, Y,  MpiC,
#vis_miss(field)
# The frequency distribution of the missing cases per variable can be obtained
# as:
init <- mice(genes, maxit = 0)
#we want to impute only the specific variables
meth <- init$method
aggr_plot <- aggr(hm_genes, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(hm_genes), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
marginplot(hm_genes[c(4,5)])
# m=5 refers to the number of imputed datasets. Five is the default value.
igf <- mice(genes, m = 5, seed = 500) # method = meth,
summary(igf)
# to check each column with imputed data
## igf$imp$IFNy
#Now we can get back the completed dataset using the complete()
complete_genes <- complete(igf, 1)
#sapply(complete_field, function(x) sum(is.na(x)))
#visualize missingness
vis_dat(complete_genes)
#remove the non imputed genes from our data set
hm_selection_g <- hm_selection_g %>%
dplyr::select(-c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF"))
# add the new imputed genes to the data
hm_selection_g <- cbind(hm_selection_g, complete_genes)
stripplot(igf, pch = 20, cex = 1.2)
densityplot(igf, height = 1000, width = 800)
library(mice)
library(tidyr)
library(tidyverse)
library(VIM)
library(fitdistrplus)
library(fitur)
library(visdat)
setwd("~/GitHub/Eimeria_mouse_immunity/")
hm <- read.csv("output_data/1.MICE_cleaned_data.csv")
# Vectors for selecting genes
#Lab genes
# The measurements of IL.12 and IRG6 are done with an other assay and will
#ignore for now
Gene_lab   <- c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF") #"IL.12", "IRG6")
Genes_wild   <- c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF") #, "IL.12", "IRG6")
Facs_lab <- c("CD4", "Treg", "Div_Treg", "Treg17", "Th1",
"Div_Th1", "Th17", "Div_Th17", "CD8", "Act_CD8",
"Div_Act_CD8", "IFNy_CD4", "IFNy_CD8","Treg_prop",
"IL17A_CD4")
Facs_wild <- c( "Treg", "CD4", "Treg17", "Th1", "Th17", "CD8")
# data imputation
# Genes
field <- hm %>%
dplyr::filter(origin == "Field")
field <- unique(field)
genes_mouse_field <- field %>%
dplyr::select(c(Mouse_ID, all_of(Genes_wild)))
genes <- genes_mouse_field  %>%
dplyr::select(-Mouse_ID)
#remove rows with only nas
genes <- genes[,colSums(is.na(genes))<nrow(genes)]
#remove colums with only nas
genes <- genes[rowSums(is.na(genes)) != ncol(genes), ]
genes_mouse_field <- genes_mouse_field[row.names(genes), ]
##select same rows in the first table
field <- field[row.names(genes), ]
###############lab
#select the genes and lab muce
lab <- hm %>%
dplyr::filter(origin == "Lab", Position == "mLN") #selecting for mln to avoid
# duplicates
lab <- unique(lab)
gene_lab_mouse <- lab %>%
dplyr::select(c(Mouse_ID, all_of(Gene_lab)))
gene_lab_mouse <- unique(gene_lab_mouse)
genes_lab <- gene_lab_mouse[, -1]
#remove rows with only nas
genes_lab <- genes_lab[,colSums(is.na(genes_lab))<nrow(genes_lab)]
#remove colums with only nas
genes_lab <- genes_lab[rowSums(is.na(genes_lab)) != ncol(genes_lab), ]
genes_lab <- unique(genes_lab)
#select same rows in the first table
gene_lab_mouse <- gene_lab_mouse[row.names(genes_lab), ]
##select same rows in the first table
lab <- lab[row.names(genes_lab), ]
hm_genes <- rbind(gene_lab_mouse, genes_mouse_field)
hm_selection_g <- rbind(lab, field)
glimpse(hm_genes)
genes <- hm_genes %>%
dplyr::select(-Mouse_ID)
#had to remove as they were disturbing the imputation: Worms_presence, MC.Eimeria.FEC,  Heligmosomoides_polygurus, Zfy2, Y,  MpiC,
#vis_miss(field)
# The frequency distribution of the missing cases per variable can be obtained
# as:
init <- mice(genes, maxit = 0)
# m=5 refers to the number of imputed datasets. Five is the default value.
igf <- mice(genes, m = 5, seed = 500) # method = meth,
summary(igf)
densityplot(igf, height = 1000, width = 800)
stripplot(igf, pch = 20, cex = 1.2)
stripplot(igf, pch = 20, cex = 1.2)
knitr::opts_chunk$set(echo = TRUE)
# install libraries
library(dplyr)
library(XML)
library(methods)
library(plyr)
library(readr)
library(ggplot2)
#read tsv table
David <- read_tsv("~/GitHub/Namibia_project/Data/Nanodrop_measurements/David_Nanodrop_DNA-Extractions.tsv")
# remove ffirst column
David <-  David[,-1]
#add column sample type
David <- David %>%
mutate(animal = "David")
#change the column names
write.csv(David,
"~/GitHub/Namibia_project/Data/Nanodrop_measurements/CSV/David.csv",
row.names = FALSE)
#read tsv table
Duppel_1 <- read_tsv("~/GitHub/Namibia_project/Data/Nanodrop_measurements/Düppel_26022023_2.tsv")
# remove ffirst column
Duppel_1 <-  Duppel_1[,-1]
#change the column names
write.csv(Duppel_1,
"~/GitHub/Namibia_project/Data/Nanodrop_measurements/CSV/Düppel_26022023.csv",
row.names = FALSE)
#read tsv table
Rodent_1 <- read_tsv("~/GitHub/Namibia_project/Data/Nanodrop_measurements/Rodents_26032023.tsv")
Rodent_2 <- read_tsv("~/GitHub/Namibia_project/Data/Nanodrop_measurements/Rodents_27032023.tsv")
#combine the measuerements
Rodent <- rbind(Rodent_1,Rodent_2)
# remove first column
Rodent <-  Rodent[,-1]
#change the column names
write.csv(Rodent_1,
"~/GitHub/Namibia_project/Data/Nanodrop_measurements/CSV/Rodents_26032023.csv",
row.names = FALSE)
Nanodrop <- rbind(Duppel_1, Rodent)
# remove spaces
colnames(Nanodrop) <- gsub(" ", "_", colnames(Nanodrop))
Nanodrop <- Nanodrop %>%
dplyr::rename(Quality_260_280 = '260/280',
Quality_260_230 = '260/230')
ggplot(Nanodrop, aes(x = Nucleic_Acid, y = Quality_260_280)) +
geom_jitter() +
labs(x = "Concentration of DNA in ng/µl", y = "Quality of DNA 260/280 ratio",
title = "Assessing quality of DNA with Nanodrop")
ggplot(Nanodrop %>%
filter(Quality_260_280 < 2.5,  Quality_260_280 > 1.5 ),
aes(x = Nucleic_Acid, y = Quality_260_280)) +
geom_jitter() +
labs(x = "Concentration of DNA in ng/µl", y = "Quality of DNA",
title = "Assessing quality of DNA with Nanodrop")
ggplot(Nanodrop,
aes(x = Nucleic_Acid, y = Quality_260_230)) +
geom_jitter() +
labs(x = "Concentration of DNA in ng/µl", y = "Quality of DNA, 260/230",
title = "Assessing quality of DNA with Nanodrop")
ggplot(Nanodrop %>% filter(Quality_260_230 < 60),
aes(x = Nucleic_Acid, y = Quality_260_230)) +
geom_jitter() +
labs(x = "Concentration of DNA in ng/µl", y = "Quality of DNA, 260/230",
title = "Assessing quality of DNA with Nanodrop")
ggplot(Nanodrop %>%
filter(Quality_260_230 < 2.5, Quality_260_230 > 1.8),
aes(x = Nucleic_Acid, y = Quality_260_230)) +
geom_jitter() +
labs(x = "Concentration of DNA in ng/µl", y = "Quality of DNA, 260/230",
title = "Assessing quality of DNA with Nanodrop")
Nanodrop %>%
filter( Quality_260_280 < 2.5,  Quality_260_280 > 1.5 )
# Read the two dataframes
setwd("Z:/home/shared/MITCH/motility/REP1/Plate 1 230427_131640_IMM Session/Plate_1_test/")
Mitch_results <- read.csv("Other_counts/Rep_1_Mitch_macro.csv")
Fay_results <- read.csv("")
# Read the two dataframes
setwd("~")
Fay_results <- read.csv("Z:/home/shared/MITCH/motility/REP1/Plate 1 230427_131640_IMM Session/Plate_1_test/Counter/Results_counter.csv")
View(Fay_results)
View(Mitch_results)
View(Fay_results)
library(dplyr)
# Libraries
library(dplyr)
# Read the two dataframes
Mitch_results <- read.csv("Z:/home/shared/MITCH/motility/REP1/Plate 1 230427_131640_IMM Session/Plate_1_test/Other_counts/Rep_1_Mitch_macro.csv")
Fay_results <- read.csv("Z:/home/shared/MITCH/motility/REP1/Plate 1 230427_131640_IMM Session/Plate_1_test/Counter/Results_counter.csv")
View(Fay_results)
# Create a df with Mitch'S and Fay's counts
Fay_results <- Fay_results %>%
rename(Fay = Count)
# Read the two dataframes
Mitch_results <- read.csv("Z:/home/shared/MITCH/motility/REP1/Plate 1 230427_131640_IMM Session/Plate_1_test/Other_counts/Rep_1_Mitch_macro.csv")
Fay_results <- read.csv("Z:/home/shared/MITCH/motility/REP1/Plate 1 230427_131640_IMM Session/Plate_1_test/Counter/Results_counter.csv")
# Create a df with Mitch'S and Fay's counts
Fay_results <- Fay_results %>%
rename(Fay = Count)
View(Mitch_results)
View(Fay_results)
compare <- Fay_results[,c(1,2)] %>%
left_join(Mitch_results[,c(1,2)])
View(compare)
compare <- Fay_results[,c(1,2)] %>%
left_join(Mitch_results[,c(1,2)],
by = "Slice")
View(compare)
T_compare <- t.test(Fay_results, Mitch_results)
T_compare <- t.test(Fay_results, Mitch_results, na.rm = TRUE)
View(compare)
t.test(Fay_results, Mitch_results)
t.test(Fay ~ Mitch, compare)
View(compare)
t.test(compare$Mitch, compare$Fay
t.test(compare$Mitch, compare$Fay)
t.test(compare$Mitch, compare$Fay)
?pivot_wider
library(tidyr)
?pivot_longer
pivot_longer(cols = c("Mitch", "Fay", names_to = Counter, values_to = Counts)
compare_longer <- compare %>%
compare_longer <- compare %>%
pivot_longer(cols = c("Mitch", "Fay", names_to = Counter, values_to = Counts))
compare_longer <- compare %>%
pivot_longer(cols = c("Mitch", "Fay"), names_to = Counter, values_to = Counts)
compare_longer <- compare %>%
pivot_longer(cols = c("Mitch", "Fay"), names_to = "Counter", values_to = "Counts")
compare_longer <- compare %>%
pivot_longer(cols = c("Mitch", "Fay"),
names_to = "Counter", values_to = "Counts")
View(compare_longer)
library(ggplot2)
ggplot(compare_longer, aes(x = Counter, y = Counts)) +
geom_violin()
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin()
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter, fill = Counter)) +
geom_violin()
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter, fill = Counter)) +
geom_violin() +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter, fill = Counter)) +
geom_violin() +
geom_boxplot() +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
t.test(compare$Mitch, compare$Fay)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
geom_dotplot() +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
geom_dotplot(aes(y = Counts)) +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
geom_jitter() +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
geom_point(position = position_jitter(seed = 1, width = 0.2)) +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
geom_point(position = position_jitter(seed = 1, width = 0.2)) +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
) +
theme_minimal()
t.test(compare$Mitch, compare$Fay)
2.2e-16
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
geom_point(position = position_jitter(seed = 1, width = 0.2)) +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
) +
theme_minimal() +
labs(title = "Differences between macros in counting attached parasites",
subtitle = "Welch Two Sample t-test: p-value < 2.2e-16")
source("~/GitHub/Article_predicting_WL/R/Scripts/9.field_predictions.R")
setwd("GitHub/Article_predicting_WL/")
source("~/GitHub/Article_predicting_WL/R/Scripts/9.field_predictions.R")
source("~/GitHub/Article_predicting_WL/R/Scripts/9.random_forest_gene_field.R")
field
Field$eimeriaSpecies
sum(is.na(Field$eimeriaSpecies))
335-286
model <- lm(predicted_WL ~ eimeriaSpecies, data = Field)
summary(model)
ggpredict(model)
ggpredict(model) %>%
plot()
model <- lm(predicted_WL ~ eimeriaSpecies, data = Field)
summary(model)
335-286
