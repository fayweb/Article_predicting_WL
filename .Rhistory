Facs_wild <- c( "Treg", "CD4", "Treg17", "Th1", "Th17", "CD8")
# data imputation
# Genes
field <- hm %>%
dplyr::filter(origin == "Field")
field <- unique(field)
genes_mouse_field <- field %>%
dplyr::select(c(Mouse_ID, all_of(Genes_wild)))
genes <- genes_mouse_field  %>%
dplyr::select(-Mouse_ID)
#remove rows with only nas
genes <- genes[,colSums(is.na(genes))<nrow(genes)]
#remove colums with only nas
genes <- genes[rowSums(is.na(genes)) != ncol(genes), ]
genes_mouse_field <- genes_mouse_field[row.names(genes), ]
##select same rows in the first table
field <- field[row.names(genes), ]
###############lab
#select the genes and lab muce
lab <- hm %>%
dplyr::filter(origin == "Lab", Position == "mLN") #selecting for mln to avoid
# duplicates
lab <- unique(lab)
gene_lab_mouse <- lab %>%
dplyr::select(c(Mouse_ID, all_of(Gene_lab)))
gene_lab_mouse <- unique(gene_lab_mouse)
genes_lab <- gene_lab_mouse[, -1]
#remove rows with only nas
genes_lab <- genes_lab[,colSums(is.na(genes_lab))<nrow(genes_lab)]
#remove colums with only nas
genes_lab <- genes_lab[rowSums(is.na(genes_lab)) != ncol(genes_lab), ]
genes_lab <- unique(genes_lab)
#select same rows in the first table
gene_lab_mouse <- gene_lab_mouse[row.names(genes_lab), ]
##select same rows in the first table
lab <- lab[row.names(genes_lab), ]
hm_genes <- rbind(gene_lab_mouse, genes_mouse_field)
hm_selection_g <- rbind(lab, field)
glimpse(hm_genes)
genes <- hm_genes %>%
dplyr::select(-Mouse_ID)
#had to remove as they were disturbing the imputation: Worms_presence, MC.Eimeria.FEC,  Heligmosomoides_polygurus, Zfy2, Y,  MpiC,
#vis_miss(field)
# The frequency distribution of the missing cases per variable can be obtained
# as:
init <- mice(genes, maxit = 0)
# m=5 refers to the number of imputed datasets. Five is the default value.
igf <- mice(genes, m = 5, seed = 500) # method = meth,
summary(igf)
densityplot(igf, height = 1000, width = 800)
stripplot(igf, pch = 20, cex = 1.2)
stripplot(igf, pch = 20, cex = 1.2)
knitr::opts_chunk$set(echo = TRUE)
# install libraries
library(dplyr)
library(XML)
library(methods)
library(plyr)
library(readr)
library(ggplot2)
#read tsv table
David <- read_tsv("~/GitHub/Namibia_project/Data/Nanodrop_measurements/David_Nanodrop_DNA-Extractions.tsv")
# remove ffirst column
David <-  David[,-1]
#add column sample type
David <- David %>%
mutate(animal = "David")
#change the column names
write.csv(David,
"~/GitHub/Namibia_project/Data/Nanodrop_measurements/CSV/David.csv",
row.names = FALSE)
#read tsv table
Duppel_1 <- read_tsv("~/GitHub/Namibia_project/Data/Nanodrop_measurements/Düppel_26022023_2.tsv")
# remove ffirst column
Duppel_1 <-  Duppel_1[,-1]
#change the column names
write.csv(Duppel_1,
"~/GitHub/Namibia_project/Data/Nanodrop_measurements/CSV/Düppel_26022023.csv",
row.names = FALSE)
#read tsv table
Rodent_1 <- read_tsv("~/GitHub/Namibia_project/Data/Nanodrop_measurements/Rodents_26032023.tsv")
Rodent_2 <- read_tsv("~/GitHub/Namibia_project/Data/Nanodrop_measurements/Rodents_27032023.tsv")
#combine the measuerements
Rodent <- rbind(Rodent_1,Rodent_2)
# remove first column
Rodent <-  Rodent[,-1]
#change the column names
write.csv(Rodent_1,
"~/GitHub/Namibia_project/Data/Nanodrop_measurements/CSV/Rodents_26032023.csv",
row.names = FALSE)
Nanodrop <- rbind(Duppel_1, Rodent)
# remove spaces
colnames(Nanodrop) <- gsub(" ", "_", colnames(Nanodrop))
Nanodrop <- Nanodrop %>%
dplyr::rename(Quality_260_280 = '260/280',
Quality_260_230 = '260/230')
ggplot(Nanodrop, aes(x = Nucleic_Acid, y = Quality_260_280)) +
geom_jitter() +
labs(x = "Concentration of DNA in ng/µl", y = "Quality of DNA 260/280 ratio",
title = "Assessing quality of DNA with Nanodrop")
ggplot(Nanodrop %>%
filter(Quality_260_280 < 2.5,  Quality_260_280 > 1.5 ),
aes(x = Nucleic_Acid, y = Quality_260_280)) +
geom_jitter() +
labs(x = "Concentration of DNA in ng/µl", y = "Quality of DNA",
title = "Assessing quality of DNA with Nanodrop")
ggplot(Nanodrop,
aes(x = Nucleic_Acid, y = Quality_260_230)) +
geom_jitter() +
labs(x = "Concentration of DNA in ng/µl", y = "Quality of DNA, 260/230",
title = "Assessing quality of DNA with Nanodrop")
ggplot(Nanodrop %>% filter(Quality_260_230 < 60),
aes(x = Nucleic_Acid, y = Quality_260_230)) +
geom_jitter() +
labs(x = "Concentration of DNA in ng/µl", y = "Quality of DNA, 260/230",
title = "Assessing quality of DNA with Nanodrop")
ggplot(Nanodrop %>%
filter(Quality_260_230 < 2.5, Quality_260_230 > 1.8),
aes(x = Nucleic_Acid, y = Quality_260_230)) +
geom_jitter() +
labs(x = "Concentration of DNA in ng/µl", y = "Quality of DNA, 260/230",
title = "Assessing quality of DNA with Nanodrop")
Nanodrop %>%
filter( Quality_260_280 < 2.5,  Quality_260_280 > 1.5 )
# Read the two dataframes
setwd("Z:/home/shared/MITCH/motility/REP1/Plate 1 230427_131640_IMM Session/Plate_1_test/")
Mitch_results <- read.csv("Other_counts/Rep_1_Mitch_macro.csv")
Fay_results <- read.csv("")
# Read the two dataframes
setwd("~")
Fay_results <- read.csv("Z:/home/shared/MITCH/motility/REP1/Plate 1 230427_131640_IMM Session/Plate_1_test/Counter/Results_counter.csv")
View(Fay_results)
View(Mitch_results)
View(Fay_results)
library(dplyr)
# Libraries
library(dplyr)
# Read the two dataframes
Mitch_results <- read.csv("Z:/home/shared/MITCH/motility/REP1/Plate 1 230427_131640_IMM Session/Plate_1_test/Other_counts/Rep_1_Mitch_macro.csv")
Fay_results <- read.csv("Z:/home/shared/MITCH/motility/REP1/Plate 1 230427_131640_IMM Session/Plate_1_test/Counter/Results_counter.csv")
View(Fay_results)
# Create a df with Mitch'S and Fay's counts
Fay_results <- Fay_results %>%
rename(Fay = Count)
# Read the two dataframes
Mitch_results <- read.csv("Z:/home/shared/MITCH/motility/REP1/Plate 1 230427_131640_IMM Session/Plate_1_test/Other_counts/Rep_1_Mitch_macro.csv")
Fay_results <- read.csv("Z:/home/shared/MITCH/motility/REP1/Plate 1 230427_131640_IMM Session/Plate_1_test/Counter/Results_counter.csv")
# Create a df with Mitch'S and Fay's counts
Fay_results <- Fay_results %>%
rename(Fay = Count)
View(Mitch_results)
View(Fay_results)
compare <- Fay_results[,c(1,2)] %>%
left_join(Mitch_results[,c(1,2)])
View(compare)
compare <- Fay_results[,c(1,2)] %>%
left_join(Mitch_results[,c(1,2)],
by = "Slice")
View(compare)
T_compare <- t.test(Fay_results, Mitch_results)
T_compare <- t.test(Fay_results, Mitch_results, na.rm = TRUE)
View(compare)
t.test(Fay_results, Mitch_results)
t.test(Fay ~ Mitch, compare)
View(compare)
t.test(compare$Mitch, compare$Fay
t.test(compare$Mitch, compare$Fay)
t.test(compare$Mitch, compare$Fay)
?pivot_wider
library(tidyr)
?pivot_longer
pivot_longer(cols = c("Mitch", "Fay", names_to = Counter, values_to = Counts)
compare_longer <- compare %>%
compare_longer <- compare %>%
pivot_longer(cols = c("Mitch", "Fay", names_to = Counter, values_to = Counts))
compare_longer <- compare %>%
pivot_longer(cols = c("Mitch", "Fay"), names_to = Counter, values_to = Counts)
compare_longer <- compare %>%
pivot_longer(cols = c("Mitch", "Fay"), names_to = "Counter", values_to = "Counts")
compare_longer <- compare %>%
pivot_longer(cols = c("Mitch", "Fay"),
names_to = "Counter", values_to = "Counts")
View(compare_longer)
library(ggplot2)
ggplot(compare_longer, aes(x = Counter, y = Counts)) +
geom_violin()
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin()
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter, fill = Counter)) +
geom_violin()
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter, fill = Counter)) +
geom_violin() +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter, fill = Counter)) +
geom_violin() +
geom_boxplot() +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
t.test(compare$Mitch, compare$Fay)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
geom_dotplot() +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
geom_dotplot(aes(y = Counts)) +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
geom_jitter() +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
geom_point(position = position_jitter(seed = 1, width = 0.2)) +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
geom_point(position = position_jitter(seed = 1, width = 0.2)) +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
) +
theme_minimal()
t.test(compare$Mitch, compare$Fay)
2.2e-16
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
geom_point(position = position_jitter(seed = 1, width = 0.2)) +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
) +
theme_minimal() +
labs(title = "Differences between macros in counting attached parasites",
subtitle = "Welch Two Sample t-test: p-value < 2.2e-16")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
knitr::opts_chunk$set(fig.width=12, fig.height=8)
# Libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggridges)
library(knitr)
library(modelsummary)
library(janitor)
library(pheatmap)
library(tibble)
library(corrplot)
library(RColorBrewer)
library(leaflet)
# Read data
hm <- read.csv("Data/Data_output/imputed_clean_data.csv")
setwd("GitHub/Article_predicting_WL")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
knitr::opts_chunk$set(fig.width=12, fig.height=8)
# Libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggridges)
library(knitr)
library(modelsummary)
library(janitor)
library(pheatmap)
library(tibble)
library(corrplot)
library(RColorBrewer)
library(leaflet)
# Read data
hm <- read.csv("Data/Data_output/imputed_clean_data.csv")
# divide into laboratory and field data set
lab <- hm %>% filter(origin == "Lab")
field <- hm %>% filter(origin == "Field")
###################### eimeria strains
# define the color for each level of infection
color_mapping <- c("E_falciformis" = "salmon",
"E_ferrisi" = "forestgreen",
"uninfected" = "blue")
## vectors for selecting columns
facs_lab <- c("CD4", "Treg", "Div_Treg", "Treg17", "Th1", "Div_Th1", "Th17",
"Div_Th17", "CD8", "Act_CD8", "Div_Act_CD8", "IFNy_CD4",
"IFNy_CD8") #"Treg_prop", "IL17A_CD4")
facs_field <- c("CD4", "Treg", "CD4", "Treg17", "Th1", "Th17", "CD8",
"Act_CD8", "IFNy_CD4", "IL17A_CD4", "IFNy_CD8")
Genes_v   <- c("IFNy", "CXCR3", "IL.6", "IL.13", #"IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF") #"IL.12", "IRG6")
mouse_strains <- c("SCHUNT", "STRA", "BUSNA", "PWD", "STRA BUSNA",
"SCHUNT PWD", "SCHUNT STRA", "PWD BUSNA")
hybrid_status <- c("M. m. domesticus", "M. m. domesticus", "M. m. musculus",
"M. m. musculus", "intersubspecific hybrids",
"intersubspecific hybrids", "intrasubspecific hybrids",
"intrasubspecific hybrids")
strains <- as.data.frame(hybrid_status, mouse_strains)
kable(strains)
lab %>%
group_by(mouse_strain) %>%
# Summarize the data to get counts for each mouse strain
summarize(count = n()) %>%
# Reorder mouse_strain by count
mutate(mouse_strain = reorder(mouse_strain, count)) %>%
# Plotting
ggplot(aes(x = mouse_strain, y = count, fill = mouse_strain)) +
geom_bar(stat = "identity") +
# Specify stat = "identity" for pre-summarized data
geom_text(aes(label = count), vjust = -0.3) +
# Add count labels on top of bars
scale_fill_viridis_d() +
# Use a nice color scale, like Viridis
theme_minimal() + # Apply a minimal theme for a cleaner look
theme(axis.text.x = element_text(angle = 50)) +
labs(title = "Mouse strains in experimental infections", x = "Mouse Strain",
y = "Count") +# Add label
guides(fill = "none") -> m_s
m_s
ggsave(filename = "~/GitHub/Article_predicting_WL/figures/mice_strains_n.jpeg",
plot = m_s, width = 8, height = 6)
###################### eimeria strain
lab$current_infection <- gsub(pattern = "_", replacement = ". ", lab$current_infection)
ggplot(lab %>%
filter(infection == "challenge"),
aes(x = WL_max, y = current_infection, fill = current_infection)) +
geom_density_ridges(jittered_points = TRUE, position = position_points_jitter(height = 0),
scale = 0.9, alpha = 0.6, point_shape = 21, point_size = 2, point_alpha = 1) +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.5, position = position_nudge(x = 0.2)) +
# coord_flip() +
theme_minimal() +
scale_color_manual(values = color_mapping) +
theme(legend.position = "none",
axis.text.x = element_text(angle = 0, vjust = 0.5, hjust=0.3)) +
xlab("Maximum relative weight loss") +
ylab("Parasite strain") -> eimeria_weight
eimeria_weight
# prim vs challenge
lab$current_infection <- gsub(pattern = "_", replacement = ". ", lab$current_infection)
ggplot(lab,
aes(x = WL_max, y = current_infection, fill = current_infection)) +
geom_density_ridges(jittered_points = TRUE, position = position_points_jitter(height = 0),
scale = 0.9, alpha = 0.6, point_shape = 21, point_size = 2, point_alpha = 1) +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.5, position = position_nudge(x = 0.2)) +
# coord_flip() +
theme_minimal() +
theme(legend.position = "none",
axis.text.x = element_text(angle = 0, vjust = 0.5, hjust=0.3)) +
xlab("Maximum relative weight loss") +
ylab("Parasite strain") +
scale_color_manual(values = color_mapping) +
facet_wrap(~ infection, nrow = 2)-> eimeria_weight_challenge
eimeria_weight_challenge
# Define colors
colors <- c("TRUE" = "firebrick3", "FALSE" = "steelblue")
# transform mouse strain into factor
lab$mouse_strain <- as.factor(lab$mouse_strain)
lab$mouse_strain <- gsub(pattern = "_", " ", lab$mouse_strain)
# order factor levels
lab$mouse_strain <- factor(lab$mouse_strain,
levels = names(
sort(tapply(lab$WL_max, lab$mouse_strain, median))))
ggplot(lab %>%
filter(infection == "challenge"),
aes(x = WL_max, y = mouse_strain, fill = mouse_strain)) +
geom_density_ridges(jittered_points = TRUE, position = position_points_jitter(height = 0),
scale = 0.9, alpha = 0.6, point_shape = 21, point_size = 2, point_alpha = 1) +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.5, position = position_nudge(x = 0.2)) +
coord_flip() +
theme_minimal() +
theme(legend.position = "none",
axis.text.x = element_text(angle = 70, vjust = 0.5, hjust=0.3)) +
xlab("Maximum relative weight loss") +
ylab("Mouse Strain") -> strains_weight
strains_weight
ggplot(lab, aes(x = WL_max, y = mouse_strain, fill = mouse_strain)) +
geom_density_ridges(jittered_points = TRUE, position = position_points_jitter(height = 0),
scale = 0.9, alpha = 0.6, point_shape = 21, point_size = 2, point_alpha = 1) +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.5, position = position_nudge(x = 0.2)) +
coord_flip() +
theme_minimal() +
theme(legend.position = "none",
axis.text.x = element_text(angle = 70, vjust = 0.5, hjust=0.3)) +
xlab("Maximum relative weight loss") +
ylab("Mouse Strain") +
facet_grid(~infection) -> strains_weight_challenge
strains_weight_challenge
length(lab$Mouse_ID)
lab %>%
group_by(infection) %>%
summarize(n())
lab %>%
group_by(infection, current_infection) %>%
summarize(n())
FACS_M <- lab %>%
dplyr::select(Mouse_ID, all_of(facs_lab))
FACS <- FACS_M %>%
dplyr::select(-Mouse_ID)
#remove rows with only nas
FACS <- FACS[,colSums(is.na(FACS))<nrow(FACS)]
#remove colums with only nas
FACS <- FACS[rowSums(is.na(FACS)) != ncol(FACS), ]
FACS_M <- FACS_M %>%
filter(row.names(FACS_M) %in% row.names(FACS))
length(FACS_M$Mouse_ID)
GENE_M <- lab %>%
dplyr::select(Mouse_ID, all_of(Genes_v))
GENE <- GENE_M %>%
dplyr::select(-Mouse_ID)
#remove rows with only nas
GENE <- GENE[,colSums(is.na(GENE))<nrow(GENE)]
#remove colums with only nas
GENE <- GENE[rowSums(is.na(GENE)) != ncol(GENE), ]
GENE_M <- GENE_M %>%
filter(row.names(GENE_M) %in% row.names(GENE))
length(GENE_M$Mouse_ID)
length(intersect(FACS_M$Mouse_ID, GENE_M$Mouse_ID))
FACS_M_f <- field %>%
dplyr::select(Mouse_ID, all_of(facs_field))
FACS_f <- FACS_M_f %>%
dplyr::select(-Mouse_ID)
#remove rows with only nas
FACS_f <- FACS_f[,colSums(is.na(FACS_f))<nrow(FACS_f)]
#remove colums with only nas
FACS_f <- FACS_f[rowSums(is.na(FACS_f)) != ncol(FACS_f), ]
FACS_M_f <- FACS_M_f %>%
filter(row.names(FACS_M_f) %in% row.names(FACS_f))
FACS_field <- field %>%
filter(row.names(field) %in% row.names(FACS_f))
length(FACS_M_f$Mouse_ID)
length(field$Mouse_ID)
# Create a leaflet map
leaflet(data = field) %>%
addTiles() %>%  # Add default OpenStreetMap tiles
addCircleMarkers(~Longitude, ~Latitude, color = ~colorFactor(c("blue", "red"), HI)(HI),
popup = ~Mouse_ID) %>%
addProviderTiles(providers$Stamen.Terrain) %>%
setView(lng = mean(field$Longitude), lat = mean(field$Latitude), zoom = 7.5)
# Create a leaflet map
leaflet(data = FACS_field) %>%
addTiles() %>%  # Add default OpenStreetMap tiles
addCircleMarkers(~Longitude, ~Latitude, color = ~colorFactor(c("blue", "red"), HI)(HI),
popup = ~Mouse_ID) %>%
addProviderTiles(providers$Stamen.Terrain) %>%
setView(lng = mean(field$Longitude), lat = mean(field$Latitude), zoom = 7.5)
annotation_df <- lab %>%
filter(row.names(lab) %in% row.names(FACS)) %>%
dplyr::select(c("Mouse_ID", "current_infection",
"mouse_strain", "WL_max"))
lab_FACS <- lab %>%
filter(row.names(lab) %in% row.names(FACS))
# turn the data frame into a matrix and transpose it. We want to have each cell
# type as a row name
FACS <- t(as.matrix(FACS_M))
#switch the matrix back to a data frame format
FACS <- as.data.frame(FACS)
# turn the first row into column names
FACS %>%
row_to_names(row_number = 1) -> FACS
# Now further prepare the data frame for plotting by removing the first row
## and convert the column to row names with the cells
heatmap_data <- FACS
# turn the columns to numeric other wise the heatmap function will not work
heatmap_data[] <- lapply(heatmap_data, function(x) as.numeric(as.character(x)))
annotation_df <- unique(annotation_df) %>%
dplyr::filter(Mouse_ID %in% colnames(heatmap_data))
### Prepare the annotation columns for the heatmap
rownames(annotation_df) <- annotation_df$Mouse_ID
# Match the row names to the heatmap data frame
rownames(annotation_df) <- colnames(FACS)
#remove the unecessary column
annotation_df <- annotation_df %>% dplyr::select(-Mouse_ID, )
annotation_df$current_infection <- as.factor(annotation_df$current_infection)
heatmap_facs_LAB <- heatmap_data
color_mapping <- c("E. falciformis" = "salmon",
"E. ferrisi" = "forestgreen",
"uninfected" = "skyblue")
# Prepare the annotation_colors list to use in pheatmap
annotation_colors <- list(current_infection = color_mapping)
heatmap_data %>%
pheatmap(annotation_col = annotation_df,
annotation_colors = annotation_colors,
scale = "row")
Sys.which("R")
options(error)
