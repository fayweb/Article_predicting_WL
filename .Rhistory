David <- read_tsv("~/GitHub/Namibia_project/Data/Nanodrop_measurements/David_Nanodrop_DNA-Extractions.tsv")
# remove ffirst column
David <-  David[,-1]
#add column sample type
David <- David %>%
mutate(animal = "David")
#change the column names
write.csv(David,
"~/GitHub/Namibia_project/Data/Nanodrop_measurements/CSV/David.csv",
row.names = FALSE)
#read tsv table
Duppel_1 <- read_tsv("~/GitHub/Namibia_project/Data/Nanodrop_measurements/Düppel_26022023_2.tsv")
# remove ffirst column
Duppel_1 <-  Duppel_1[,-1]
#change the column names
write.csv(Duppel_1,
"~/GitHub/Namibia_project/Data/Nanodrop_measurements/CSV/Düppel_26022023.csv",
row.names = FALSE)
#read tsv table
Rodent_1 <- read_tsv("~/GitHub/Namibia_project/Data/Nanodrop_measurements/Rodents_26032023.tsv")
Rodent_2 <- read_tsv("~/GitHub/Namibia_project/Data/Nanodrop_measurements/Rodents_27032023.tsv")
#combine the measuerements
Rodent <- rbind(Rodent_1,Rodent_2)
# remove first column
Rodent <-  Rodent[,-1]
#change the column names
write.csv(Rodent_1,
"~/GitHub/Namibia_project/Data/Nanodrop_measurements/CSV/Rodents_26032023.csv",
row.names = FALSE)
Nanodrop <- rbind(Duppel_1, Rodent)
# remove spaces
colnames(Nanodrop) <- gsub(" ", "_", colnames(Nanodrop))
Nanodrop <- Nanodrop %>%
dplyr::rename(Quality_260_280 = '260/280',
Quality_260_230 = '260/230')
ggplot(Nanodrop, aes(x = Nucleic_Acid, y = Quality_260_280)) +
geom_jitter() +
labs(x = "Concentration of DNA in ng/µl", y = "Quality of DNA 260/280 ratio",
title = "Assessing quality of DNA with Nanodrop")
ggplot(Nanodrop %>%
filter(Quality_260_280 < 2.5,  Quality_260_280 > 1.5 ),
aes(x = Nucleic_Acid, y = Quality_260_280)) +
geom_jitter() +
labs(x = "Concentration of DNA in ng/µl", y = "Quality of DNA",
title = "Assessing quality of DNA with Nanodrop")
ggplot(Nanodrop,
aes(x = Nucleic_Acid, y = Quality_260_230)) +
geom_jitter() +
labs(x = "Concentration of DNA in ng/µl", y = "Quality of DNA, 260/230",
title = "Assessing quality of DNA with Nanodrop")
ggplot(Nanodrop %>% filter(Quality_260_230 < 60),
aes(x = Nucleic_Acid, y = Quality_260_230)) +
geom_jitter() +
labs(x = "Concentration of DNA in ng/µl", y = "Quality of DNA, 260/230",
title = "Assessing quality of DNA with Nanodrop")
ggplot(Nanodrop %>%
filter(Quality_260_230 < 2.5, Quality_260_230 > 1.8),
aes(x = Nucleic_Acid, y = Quality_260_230)) +
geom_jitter() +
labs(x = "Concentration of DNA in ng/µl", y = "Quality of DNA, 260/230",
title = "Assessing quality of DNA with Nanodrop")
Nanodrop %>%
filter( Quality_260_280 < 2.5,  Quality_260_280 > 1.5 )
# Read the two dataframes
setwd("Z:/home/shared/MITCH/motility/REP1/Plate 1 230427_131640_IMM Session/Plate_1_test/")
Mitch_results <- read.csv("Other_counts/Rep_1_Mitch_macro.csv")
Fay_results <- read.csv("")
# Read the two dataframes
setwd("~")
Fay_results <- read.csv("Z:/home/shared/MITCH/motility/REP1/Plate 1 230427_131640_IMM Session/Plate_1_test/Counter/Results_counter.csv")
View(Fay_results)
View(Mitch_results)
View(Fay_results)
library(dplyr)
# Libraries
library(dplyr)
# Read the two dataframes
Mitch_results <- read.csv("Z:/home/shared/MITCH/motility/REP1/Plate 1 230427_131640_IMM Session/Plate_1_test/Other_counts/Rep_1_Mitch_macro.csv")
Fay_results <- read.csv("Z:/home/shared/MITCH/motility/REP1/Plate 1 230427_131640_IMM Session/Plate_1_test/Counter/Results_counter.csv")
View(Fay_results)
# Create a df with Mitch'S and Fay's counts
Fay_results <- Fay_results %>%
rename(Fay = Count)
# Read the two dataframes
Mitch_results <- read.csv("Z:/home/shared/MITCH/motility/REP1/Plate 1 230427_131640_IMM Session/Plate_1_test/Other_counts/Rep_1_Mitch_macro.csv")
Fay_results <- read.csv("Z:/home/shared/MITCH/motility/REP1/Plate 1 230427_131640_IMM Session/Plate_1_test/Counter/Results_counter.csv")
# Create a df with Mitch'S and Fay's counts
Fay_results <- Fay_results %>%
rename(Fay = Count)
View(Mitch_results)
View(Fay_results)
compare <- Fay_results[,c(1,2)] %>%
left_join(Mitch_results[,c(1,2)])
View(compare)
compare <- Fay_results[,c(1,2)] %>%
left_join(Mitch_results[,c(1,2)],
by = "Slice")
View(compare)
T_compare <- t.test(Fay_results, Mitch_results)
T_compare <- t.test(Fay_results, Mitch_results, na.rm = TRUE)
View(compare)
t.test(Fay_results, Mitch_results)
t.test(Fay ~ Mitch, compare)
View(compare)
t.test(compare$Mitch, compare$Fay
t.test(compare$Mitch, compare$Fay)
t.test(compare$Mitch, compare$Fay)
?pivot_wider
library(tidyr)
?pivot_longer
pivot_longer(cols = c("Mitch", "Fay", names_to = Counter, values_to = Counts)
compare_longer <- compare %>%
compare_longer <- compare %>%
pivot_longer(cols = c("Mitch", "Fay", names_to = Counter, values_to = Counts))
compare_longer <- compare %>%
pivot_longer(cols = c("Mitch", "Fay"), names_to = Counter, values_to = Counts)
compare_longer <- compare %>%
pivot_longer(cols = c("Mitch", "Fay"), names_to = "Counter", values_to = "Counts")
compare_longer <- compare %>%
pivot_longer(cols = c("Mitch", "Fay"),
names_to = "Counter", values_to = "Counts")
View(compare_longer)
library(ggplot2)
ggplot(compare_longer, aes(x = Counter, y = Counts)) +
geom_violin()
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin()
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter, fill = Counter)) +
geom_violin()
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter, fill = Counter)) +
geom_violin() +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter, fill = Counter)) +
geom_violin() +
geom_boxplot() +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
t.test(compare$Mitch, compare$Fay)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
geom_dotplot() +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
geom_dotplot(aes(y = Counts)) +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
geom_jitter() +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
geom_point(position = position_jitter(seed = 1, width = 0.2)) +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
)
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
geom_point(position = position_jitter(seed = 1, width = 0.2)) +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
) +
theme_minimal()
t.test(compare$Mitch, compare$Fay)
2.2e-16
ggplot(compare_longer, aes(x = Counter, y = Counts, color = Counter)) +
geom_violin() +
geom_boxplot() +
geom_point(position = position_jitter(seed = 1, width = 0.2)) +
stat_summary(
fun.data = "mean_sdl",  fun.args = list(mult = 1),
geom = "pointrange", color = "black"
) +
theme_minimal() +
labs(title = "Differences between macros in counting attached parasites",
subtitle = "Welch Two Sample t-test: p-value < 2.2e-16")
library(ggrepel)
library(tidyverse)
library(tidyr)
library(dplyr)
library(scales)
library(cowplot)
library(ggthemes)
library(grid)
library(ggplot2)
library(ggpmisc)
library(broom)
library(knitr)
library(kableExtra)
library(webshot)
library(RColorBrewer)
library(ggeffects)
library(pheatmap)
library(pdp)
library(broom)
library(reshape2)
library(knitr)
library(stargazer)
library(kableExtra)
library(sjmisc)
library(sjlabelled)
library(jtools)
library(sjPlot)
library(FactoMineR)
library(Polychrome)
library(gridExtra)
library(cowplot)
library(patchwork)
library(ggpubr)
library(factoextra)
library(jtools)
# read the data
hm <- read.csv("Data/Data_output/imputed_clean_data.csv")
setwd("GitHub/Article_predicting_WL/")
source("~/GitHub/Article_predicting_WL/R/Scripts/3_ Figure_1.R")
dev.off()
source("~/GitHub/Article_predicting_WL/R/Scripts/3_ Figure_1.R")
# Load the required packages
###PC1 PC2 linear regression
model_1 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE +
mouse_strain + immunization +
weight_dpi0, data = lab )
summary(model_1)
tab_model(model_1)
#########
# without parasite data
model_2 <- lm(WL_max ~ PC1 + PC2 + mouse_strain + weight_dpi0, data = lab)
summary(model_2)
# without host data
model_3 <- lm(WL_max ~ PC1 + PC2 + current_infection + delta_ct_cewe_MminusE +
immunization, data = lab)
summary(model_3)
# only pc1 + pc2
model_4 <- lm(WL_max ~ PC1 + PC2 , data = lab)
summary(model_4)
plot_coefs(model_4, colors = "pink", plot.distributions = TRUE) -> coef_pc1_pc2
ggsave(filename = "figures/Coef_pc1_pc2.jpeg", coef_pc1_pc2, width = 6,
height = 4, dpi = 300)
## Please cite as:
##  Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
stargazer(model_1, model_2, model_3, model_4,
type = "latex", out = "tables/stargazer.txt",
title = "Linear models - Predicting maximum weight loss")
?stargazer
## Please cite as:
##  Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
stargazer(model_1, model_2, model_3, model_4,
type = "latex", out = "tables/stargazer.txt",
title = "Linear models - Predicting maximum weight loss", float = TRUE)
## Please cite as:
##  Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
stargazer(model_1, model_2, model_3, model_4,
type = "latex",
out = "tables/stargazer.txt",
title = "Linear models - Predicting maximum weight loss",
align = TRUE)
#correcting for nas in delta ct
model_2 <- lm(WL_max ~ PC1 + PC2 + mouse_strain + weight_dpi0, data = lab %>%
drop_na(delta_ct_cewe_MminusE))
## Please cite as:
##  Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
stargazer(model_1, model_2, model_3, model_4,
type = "latex",
out = "tables/stargazer.txt",
title = "Linear models - Predicting maximum weight loss",
align = TRUE,
float = TRUE)
## Please cite as:
##  Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
stargazer(model_1, model_2, model_3, model_4,
type = "latex",
out = "tables/stargazer.txt",
title = "Linear models - Predicting maximum weight loss",
align = TRUE,
float = TRUE,
table.placement = "h")
## Please cite as:
##  Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
stargazer(model_1, model_2, model_3, model_4,
type = "latex",
out = "tables/stargazer.txt",
title = "Linear models - Predicting maximum weight loss",
align = TRUE,
float = TRUE,
table.placement = "H")
## Please cite as:
##  Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
stargazer(model_1, model_2, model_3, model_4,
type = "latex",
out = "tables/stargazer.txt",
title = "Linear models - Predicting maximum weight loss",
align = TRUE,
float = TRUE)
#see the ggefects
effects <- ggpredict(model_4)
pc1_current_infection <-
ggpredict(model_4, terms = c("PC1")) %>%
plot(colors = "darkorchid") +   # Use a refined shade of blue
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
labs(title = NULL) +  # This removes the title
#  ggtitle("Effect of PC1 on Predicted Weight Loss") +
xlab("Principal Component 1 (PC1)") +
ylab("Predicted values of weight loss") +
theme_minimal() +
theme(
plot.title = element_text(size = 16, hjust = 0.5),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12)
)
pc1_current_infection <-
ggpredict(model_4, terms = c("PC1")) %>%
plot(colors = "darkorchid") +   # Use a refined shade of blue
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
labs(title = NULL) +  # This removes the title
#  ggtitle("Effect of PC1 on Predicted Weight Loss") +
xlab("Principal Component 1 (PC1)") +
ylab("Predicted values of weight loss") +
theme_minimal() +
theme(
plot.title = element_text(size = 16, hjust = 0.5),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12)
)
pc1_current_infection
ggsave(filename = "figures/pc1_current_infection.jpeg",
plot = pc1_current_infection,
width = 6, height = 4, dpi = 1000)
pc2_current_infection <-
ggpredict(model_4, terms = c("PC2")) %>%
plot(colors = "darkorchid") +   # Use a refined shade of blue
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
labs(title = NULL) +  # This removes the title
# ggtitle("Effect of PC2 on Predicted Weight Loss") +
xlab("Principal Component 2 (PC2)") +
ylab("Predicted values of weight loss") +
theme_minimal() +
theme(
plot.title = element_text(size = 16, hjust = 0.5),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12)
)
pc2_current_infection
ggsave(filename = "figures/pc2_current_infection.jpeg",
plot = pc2_current_infection,
width = 6, height = 4, dpi = 1000)
plot_summs(model_4)
## divided by infections
lab$current_infection <- as.factor(lab$current_infection)
model_5 <- lm(WL_max ~ PC1*current_infection + PC2*current_infection, data = lab) #, data = lab %>% drop_na(delta_ct_cewe_MminusE))
summary(model_5)
plot_summs(model_5)
# Now create the scatter plot using this color mapping
ggpredict(model_5, terms = c("PC1", "current_infection")) %>%
plot() +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
labs(title = NULL) +  # This removes the title
# ggtitle("Effect of PC2 on Predicted Weight Loss") +
xlab("Principal Component 1 (PC1)") +
ylab("Predicted values of weight loss") +
theme_minimal() +
scale_color_manual(values = color_mapping) +
scale_fill_manual(values = color_mapping) +
theme(
plot.title = element_text(size = 16, hjust = 0.5),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12)
) -> pc1_WL_current_infection
pc1_WL_current_infection
summary(model_5)
plot_summs(model_5)
# Now create the scatter plot using this color mapping
ggpredict(model_5, terms = c("PC1", "current_infection")) %>%
plot() +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
labs(title = NULL) +  # This removes the title
# ggtitle("Effect of PC2 on Predicted Weight Loss") +
xlab("Principal Component 1 (PC1)") +
ylab("Predicted values of weight loss") +
theme_minimal() +
scale_color_manual(values = color_mapping) +
scale_fill_manual(values = color_mapping) +
theme(
plot.title = element_text(size = 16, hjust = 0.5),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12)
) -> pc1_WL_current_infection
source("~/GitHub/Article_predicting_WL/R/Scripts/2.Lab_pca_linear_models.R")
"ENSMUSG00000026981", #IL1RN
####################  MUC5AC, IL1Rn, MPO
gene_ens <- c("ENSMUSG00000026981", #IL1RN
"ENSMUSG00000009350") #MPO"
# Perform gene ontology enrichment analysis
enrich_result <- enrichGO(gene = gene_ens,
OrgDb = org.Mm.eg.db,
ont = "BP",
keyType = "ENSEMBL")
# View the enrichment result
enrich_result
# Extract the relevant columns from the enrichment table
enriched_terms <- enrich_result$Description
p_values <- enrich_result$p.adjust
gene_ratio <- enrich_result$GeneRatio
# Sort the enriched terms based on p-values
sorted_terms <- as.data.frame(enriched_terms[order(p_values)])
sorted_terms
################### IRGM1, SOCS1, MUC2
gene_ens <- c("ENSMUSG00000046879", #IRGM1
"ENSMUSG00000038037", #SOCS1
"ENSMUSG00000025515") #MUC2
# Perform gene ontology enrichment analysis
enrich_result <- enrichGO(gene = gene_ens,
OrgDb = org.Mm.eg.db,
ont = "BP",
keyType = "ENSEMBL")
# View the enrichment result
enrich_result
# Extract the relevant columns from the enrichment table
enriched_terms <- enrich_result$Description
p_values <- enrich_result$p.adjust
gene_ratio <- enrich_result$GeneRatio
# Sort the enriched terms based on p-values
sorted_terms <- as.data.frame(enriched_terms[order(p_values)])
sorted_terms[1:10,]
sorted_terms
################## TICAM1, NCR1, PRF1, CXCR3, RETNLB, IL.6, CXCL9, CASP1, MYD88, TNF
gene_ens <-  c("ENSMUSG00000047123", #TICAM1
"ENSMUSG00000062524", #NCR1
"ENSMUSG00000037202.7", #PRF1
"ENSMUSG00000050232", #CXCR3"
"ENSMUSG00000022650", #RETNLB
"ENSMUSG00000025746", #IL6
"ENSMUSG00000029417", #CXCL9
"ENSMUSG00000025888", #CASP1
"ENSMUSG00000032508", #MYD88
"ENSMUSG00000024401") #TNF
# Perform gene ontology enrichment analysis
enrich_result <- enrichGO(gene = gene_ens,
OrgDb = org.Mm.eg.db,
ont = "BP",
keyType = "ENSEMBL")
# View the enrichment result
enrich_result
# Extract the relevant columns from the enrichment table
enriched_terms <- enrich_result$Description
p_values <- enrich_result$p.adjust
gene_ratio <- enrich_result$GeneRatio
# Sort the enriched terms based on p-values
sorted_terms <- as.data.frame(enriched_terms[order(p_values)])
sorted_terms[1:50,]
sorted_terms
source("~/GitHub/Article_predicting_WL/R/Scripts/3_ Figure_1.R")
?stargazer
## Please cite as:
##  Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
stargazer(model_1, model_2, model_3, model_4,
type = "latex",
out = "tables/stargazer.txt",
title = "Linear models - Predicting maximum weight loss",
align = TRUE)
