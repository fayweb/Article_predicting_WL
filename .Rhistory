geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
geom_point(size = 5, alpha = 0.5, color = "black",  shape = 21, aes(fill = current_infection)) +
labs(x = "PC1 (34.37%)", y = "PC2 (16.03%)",# title = "PCA graph of individuals",
colour = "Current infection") +
theme_minimal() +
theme(#plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position = "right") +
scale_color_manual(values = color_mapping) +
guides(color = guide_legend(override.aes = list(size = 4)), legend = "Treatment groups")
pca_individuals
# PCA graph of individuals
pca_individuals <-
ggplot(lab, aes(x = PC1, y = PC2, color = current_infection)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
geom_point(size = 5, alpha = 0.5, color = "black",  shape = 21, aes(fill = current_infection)) +
labs(x = "PC1 (34.37%)", y = "PC2 (16.03%)",# title = "PCA graph of individuals",
colour = "Current infection") +
theme_minimal() +
theme(#plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position = "right") +
scale_color_manual(values = color_mapping) +
guides(color = guide_legend(override.aes = list(size = 4)))
pca_individuals
# PCA graph of individuals
pca_individuals <-
ggplot(lab, aes(x = PC1, y = PC2, color = current_infection)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
geom_point(size = 5, alpha = 0.5, color = "black",  shape = 21, aes(fill = current_infection)) +
labs(x = "PC1 (34.37%)", y = "PC2 (16.03%)",# title = "PCA graph of individuals",
colour = "Current infection") +
theme_minimal() +
theme(#plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position = "right") +
scale_color_manual(values = color_mapping)# +
pca_individuals
scale_color_manual(values = color_mapping(title = "ff")# +
pca_individuals
# PCA graph of individuals
pca_individuals <-
ggplot(lab, aes(x = PC1, y = PC2, color = current_infection)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
geom_point(size = 5, alpha = 0.5, color = "black",  shape = 21, aes(fill = current_infection)) +
labs(x = "PC1 (34.37%)", y = "PC2 (16.03%)",# title = "PCA graph of individuals",
colour = "Current infection") +
theme_minimal() +
theme(#plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position = "right") +
scale_color_manual(values = color_mapping(title = "ff"))# +
pca_individuals
# PCA graph of individuals
pca_individuals <-
ggplot(lab, aes(x = PC1, y = PC2, color = current_infection)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
geom_point(size = 5, alpha = 0.5, color = "black",  shape = 21, aes(fill = current_infection)) +
labs(x = "PC1 (34.37%)", y = "PC2 (16.03%)",# title = "PCA graph of individuals",
colour = "Current infection") +
theme_minimal() +
theme(#plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position = "right") +
scale_color_manual(values = color_mapping, title = "fdf")# +
pca_individuals
# PCA graph of individuals
pca_individuals <-
ggplot(lab, aes(x = PC1, y = PC2, color = current_infection)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
geom_point(size = 5, alpha = 0.5, color = "black",  shape = 21, aes(fill = current_infection)) +
labs(x = "PC1 (34.37%)", y = "PC2 (16.03%)",# title = "PCA graph of individuals",
colour = "Current infection") +
theme_minimal() +
theme(#plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position = "right") +
scale_color_manual(values = color_mapping)# +
pca_individuals
ggsave(filename = "figures/pca_individuals.jpeg", plot = pca_individuals,
width = 6, height = 4, dpi = 300)
# Now create the scatter plot using this color mapping
ggpredict(model_5, terms = c("PC1", "current_infection")) %>%
plot() +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
labs(title = NULL) +  # This removes the title
# ggtitle("Effect of PC2 on Predicted Weight Loss") +
xlab("Principal Component 2 (PC2)") +
ylab("Predicted values of weight loss") +
theme_minimal() +
scale_color_manual(values = color_mapping) +
scale_fill_manual(values = color_mapping) +
theme(
plot.title = element_text(size = 16, hjust = 0.5),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12)
)
pc1_WL_current_infection
# Now create the scatter plot using this color mapping
ggpredict(model_5, terms = c("PC1", "current_infection")) %>%
plot() +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
labs(title = NULL) +  # This removes the title
# ggtitle("Effect of PC2 on Predicted Weight Loss") +
xlab("Principal Component 2 (PC2)") +
ylab("Predicted values of weight loss") +
theme_minimal() +
scale_color_manual(values = color_mapping) +
scale_fill_manual(values = color_mapping) +
theme(
plot.title = element_text(size = 16, hjust = 0.5),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12)
)
# Now create the scatter plot using this color mapping
ggpredict(model_5, terms = c("PC1", "current_infection")) %>%
plot() +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
labs(title = NULL) +  # This removes the title
# ggtitle("Effect of PC2 on Predicted Weight Loss") +
xlab("Principal Component 2 (PC2)") +
ylab("Predicted values of weight loss") +
theme_minimal() +
scale_color_manual(values = color_mapping) +
scale_fill_manual(values = color_mapping) +
theme(
plot.title = element_text(size = 16, hjust = 0.5),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12)
)
pc1_WL_current_infection
# Now create the scatter plot using this color mapping
ggpredict(model_5, terms = c("PC1", "current_infection")) %>%
plot() +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
labs(title = NULL) +  # This removes the title
# ggtitle("Effect of PC2 on Predicted Weight Loss") +
xlab("Principal Component 2 (PC2)") +
ylab("Predicted values of weight loss") +
theme_minimal() +
scale_color_manual(values = color_mapping) +
scale_fill_manual(values = color_mapping) +
theme(
plot.title = element_text(size = 16, hjust = 0.5),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12)
)
# Now create the scatter plot using this color mapping
ggpredict(model_5, terms = c("PC1", "current_infection")) %>%
plot() +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
labs(title = NULL) +  # This removes the title
# ggtitle("Effect of PC2 on Predicted Weight Loss") +
xlab("Principal Component 2 (PC2)") +
ylab("Predicted values of weight loss") +
theme_minimal() +
scale_color_manual(values = color_mapping) +
scale_fill_manual(values = color_mapping) +
theme(
plot.title = element_text(size = 16, hjust = 0.5),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12)
)
# Now create the scatter plot using this color mapping
ggpredict(model_5, terms = c("PC1", "current_infection")) %>%
plot() +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
labs(title = NULL) +  # This removes the title
# ggtitle("Effect of PC2 on Predicted Weight Loss") +
xlab("Principal Component 2 (PC2)") +
ylab("Predicted values of weight loss") +
theme_minimal() +
scale_color_manual(values = color_mapping) +
scale_fill_manual(values = color_mapping) +
theme(
plot.title = element_text(size = 16, hjust = 0.5),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12)
) -> pc1_WL_current_infection
pc1_WL_current_infection
ggsave("figures/pc1_WL_current_infection.jpeg", pc1_WL_current_infection, width = 8, height = 6, dpi = 1000)
# Now create the scatter plot using this color mapping
ggpredict(model_5, terms = c("PC1", "current_infection")) %>%
plot() +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
labs(title = NULL) +  # This removes the title
# ggtitle("Effect of PC2 on Predicted Weight Loss") +
xlab("Principal Component 1 (PC1)") +
ylab("Predicted values of weight loss") +
theme_minimal() +
scale_color_manual(values = color_mapping) +
scale_fill_manual(values = color_mapping) +
theme(
plot.title = element_text(size = 16, hjust = 0.5),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12)
) -> pc1_WL_current_infection
pc1_WL_current_infection
ggsave("figures/pc1_WL_current_infection.jpeg", pc1_WL_current_infection, width = 8, height = 6, dpi = 1000)
# Now create the scatter plot using this color mapping
# Now create the scatter plot using this color mapping
ggpredict(model_5, terms = c("PC2", "current_infection")) %>%
plot() +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
labs(title = NULL) +  # This removes the title
# ggtitle("Effect of PC2 on Predicted Weight Loss") +
xlab("Principal Component 2 (PC2)") +
ylab("Predicted values of weight loss") +
theme_minimal() +
scale_color_manual(values = color_mapping) +
scale_fill_manual(values = color_mapping) +
theme(
plot.title = element_text(size = 16, hjust = 0.5),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12)
) -> pc2_WL_current_infection
pc2_WL_current_infection
ggsave("figures/pc2_WL_current_infection.jpeg", pc2_WL_current_infection, width = 8, height = 6, dpi = 1000)
figure_panel_1 <- ggarrange(pca_variables, biplot,
contributions_pc1, contributions_pc2,
pc1_current_infection, pc2_current_infection,
pc1_WL_current_infection, pc2_WL_current_infection,
labels = c("A", "B", "C", "D", "E", "F", "G", "H"),
ncol = 2, nrow = 4)
# Adding the title "Figure 1" to the entire arrangement
figure_panel_1 <- annotate_figure(figure_panel_1,
top = text_grob("Figure 1", size = 14,
face = "bold"))
print(figure_panel_1)
ggsave("figure_panels/figure_panel_1.jpeg", figure_panel_1,
width = 20, height = 22, dpi = 300)
ggsave("figure_panels/figure_panel_1.jpeg", figure_panel_1,
width = 20, height = 22, dpi = 300)
# Load libraries
library(tidyverse)
library(tidyr)
library(dplyr)
library(cowplot)
library(randomForest)
library(ggplot2)
library(caret)
library(ggpubr)
library(rfUtilities) # Implements a permutation test cross-validation for
# Load libraries
library(tidyverse)
library(tidyr)
library(dplyr)
library(cowplot)
library(randomForest)
library(ggplot2)
library(caret)
library(ggpubr)
library(rfUtilities) # Implements a permutation test cross-validation for
#import data
hm <- read.csv("Data/Data_output/imputed_clean_data.csv")
#vectors for gene selection
Gene_v   <- c("IFNy", "CXCR3", "IL.6", "IL.13", #"IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF") #"IL.12", "IRG6")
# prepare the lab data
lab <- hm %>%
dplyr::filter(origin == "Lab")
#select the imputed gene columns
gene_m <-  lab %>%
dplyr::select(c(Mouse_ID, all_of(Gene_v), WL_max))
# select only the genes
genes <- gene_m %>%
dplyr::select(-Mouse_ID)
# select the genes and the weight loss
gene_W <- lab  %>%
dplyr::select(c(all_of(Gene_v), WL_max))
repeat_cv <- trainControl(method = "repeatedcv", #repeated cross validation
number = 5, # 5 fold cross validation
repeats = 3)
repeat_cv
repeat_cv <- trainControl(method = "repeatedcv", #repeated cross validation
number = 5, # 5 fold cross validation
repeats = 3)
# split data into training and test
set.seed(333) # this will help us reproduce this random assignment
# in this way we can pick the random numbers
training.samples <- createDataPartition(y = gene_W$WL_max, p = .7, list = FALSE)
# this is the partiicition! In this case 0.7 = training data and 0.3 = testing
# we don't want to get a list in return
train.data <- gene_W[training.samples, ]
test.data <- gene_W[-training.samples, ]
## ----predicting_weight_loss_model---
set.seed(333)
#train the model
WL_predict_gene <- randomForest(WL_max ~., data = train.data,
proximity = TRUE, ntree = 1000)
# ntree = number of trees
# save the model
save(WL_predict_gene, file =  "R/Models/WL_predict_gene.RData")
print(WL_predict_gene)
predict_WL_cv <- rf.crossValidation(x = WL_predict_gene, xdata = train.data,
p = 0.10, n = 99, ntree = 501)
print(WL_predict_gene)
predict_WL_cv
print(WL_predict_gene)
predict_WL_cv <- rf.crossValidation(x = WL_predict_gene, xdata = train.data,
p = 0.10, n = 99, ntree = 501)
predict_WL_cv$fit.var.exp
predict_WL_cv$fit.var.exp
par(mfrow=c(2,2))
plot(predict_WL_cv)
# Root Mean Squared Error (observed vs. predicted) from each Bootstrap
# iteration (cross-validation)
plot(predict_WL_cv, stat = "mse")
#Percent variance explained from specified fit model
plot(predict_WL_cv, stat = "var.exp")
#Mean Absolute Error from each Bootstrapped model
plot(predict_WL_cv, stat = "mae")
root_mean <- plot(predict_WL_cv)
# Root Mean Squared Error (observed vs. predicted) from each Bootstrap
# iteration (cross-validation)
plot(predict_WL_cv, stat = "mse")
# Root Mean Squared Error (observed vs. predicted) from each Bootstrap
# iteration (cross-validation)
mean_error <- plot(predict_WL_cv, stat = "mse")
# Load libraries
library(tidyverse)
library(tidyr)
library(dplyr)
library(cowplot)
library(randomForest)
library(ggplot2)
library(caret)
library(ggpubr)
library(rfUtilities) # Implements a permutation test cross-validation for
#import data
hm <- read.csv("Data/Data_output/imputed_clean_data.csv")
#vectors for gene selection
Gene_v   <- c("IFNy", "CXCR3", "IL.6", "IL.13", #"IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF") #"IL.12", "IRG6")
# prepare the lab data
lab <- hm %>%
dplyr::filter(origin == "Lab")
#select the imputed gene columns
gene_m <-  lab %>%
dplyr::select(c(Mouse_ID, all_of(Gene_v), WL_max))
# select only the genes
genes <- gene_m %>%
dplyr::select(-Mouse_ID)
# select the genes and the weight loss
gene_W <- lab  %>%
dplyr::select(c(all_of(Gene_v), WL_max))
repeat_cv <- trainControl(method = "repeatedcv", #repeated cross validation
number = 5, # 5 fold cross validation
repeats = 3)
# split data into training and test
set.seed(333) # this will help us reproduce this random assignment
# in this way we can pick the random numbers
training.samples <- createDataPartition(y = gene_W$WL_max, p = .7, list = FALSE)
# this is the partiicition! In this case 0.7 = training data and 0.3 = testing
# we don't want to get a list in return
train.data <- gene_W[training.samples, ]
test.data <- gene_W[-training.samples, ]
## ----predicting_weight_loss_model---
set.seed(333)
#train the model
WL_predict_gene <- randomForest(WL_max ~., data = train.data,
proximity = TRUE, ntree = 1000)
# ntree = number of trees
# save the model
save(WL_predict_gene, file =  "R/Models/WL_predict_gene.RData")
print(WL_predict_gene)
predict_WL_cv <- rf.crossValidation(x = WL_predict_gene, xdata = train.data,
p = 0.10, n = 99, ntree = 501)
predict_WL_cv$fit.var.exp
par(mfrow=c(2,2))
root_mean <- plot(predict_WL_cv)
# Root Mean Squared Error (observed vs. predicted) from each Bootstrap
# iteration (cross-validation)
mean_error <- plot(predict_WL_cv, stat = "mse")
#Percent variance explained from specified fit model
plot(predict_WL_cv, stat = "var.exp")
# Root Mean Squared Error (observed vs. predicted) from each Bootstrap
# iteration (cross-validation)
mean_error <- plot(predict_WL_cv, stat = "mse")
#Percent variance explained from specified fit model
plot(predict_WL_cv, stat = "var.exp")
#Percent variance explained from specified fit model
model_var <- plot(predict_WL_cv, stat = "var.exp")
#Mean Absolute Error from each Bootstrapped model
plot(predict_WL_cv, stat = "mae")
#Mean Absolute Error from each Bootstrapped model
abs_error <- plot(predict_WL_cv, stat = "mae")
## ---------------------------------------------------------------------------------------------------
plot(WL_predict_gene)
## ---------------------------------------------------------------------------------------------------
error_random forest <- plot(WL_predict_gene)
## ---------------------------------------------------------------------------------------------------
# number of trees with lowest MSE
which.min(WL_predict_gene$mse)
# RMSE of this optimal random forest
sqrt(WL_predict_gene$mse[which.min(WL_predict_gene$mse)])
### Visualize variable importance ---
#Call importance() function on the model model to check how the attributes used
# as predictors affect our WL_predict_gene
importance(WL_predict_gene)
## ---------------------------------------------------------------------------------------------------
error_random forest <- plot(WL_predict_gene)
## ---------------------------------------------------------------------------------------------------
error_random  <- plot(WL_predict_gene)
## ---------------------------------------------------------------------------------------------------
# number of trees with lowest MSE
which.min(WL_predict_gene$mse)
# RMSE of this optimal random forest
sqrt(WL_predict_gene$mse[which.min(WL_predict_gene$mse)])
### Visualize variable importance ---
#Call importance() function on the model model to check how the attributes used
# as predictors affect our WL_predict_gene
importance(WL_predict_gene)
### Visualize variable importance ---
#Call importance() function on the model model to check how the attributes used
# as predictors affect our WL_predict_gene
arrang(importance(WL_predict_gene))
### Visualize variable importance ---
#Call importance() function on the model model to check how the attributes used
# as predictors affect our WL_predict_gene
arrange(importance(WL_predict_gene))
library(varImp)
install.packages("varImp")
library(varImp)
library(varImp)
## ---------------------------------------------------------------------------------------------------
error_random  <- plot(WL_predict_gene)
## ---------------------------------------------------------------------------------------------------
# number of trees with lowest MSE
which.min(WL_predict_gene$mse)
# RMSE of this optimal random forest
sqrt(WL_predict_gene$mse[which.min(WL_predict_gene$mse)])
### Visualize variable importance ---
#Call importance() function on the model model to check how the attributes used
# as predictors affect our WL_predict_gene
importance(WL_predict_gene)
varImp(WL_predict_gene)
library(caret)
varImpPlot(WL_predict_gene)
# Get variable importance from the WL_predict_gene fit
ImpData <- as.data.frame(importance(WL_predict_gene))
ImpData$Var.Names <- row.names(ImpData)
ImpData
