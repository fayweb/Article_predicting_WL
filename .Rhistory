"Div_Th1", "Th17", "Div_Th17", "CD8", "Act_CD8",
"Div_Act_CD8", "IFNy_CD4", "IFNy_CD8","Treg_prop",
"IL17A_CD4")
Facs_wild <- c( "Treg", "CD4", "Treg17", "Th1", "Th17", "CD8")
# data imputation
# Genes
field <- hm %>%
dplyr::filter(origin == "Field")
field <- unique(field)
genes_mouse_field <- field %>%
dplyr::select(c(Mouse_ID, all_of(Genes_wild)))
genes <- genes_mouse_field  %>%
dplyr::select(-Mouse_ID)
#remove rows with only nas
genes <- genes[,colSums(is.na(genes))<nrow(genes)]
#remove colums with only nas
genes <- genes[rowSums(is.na(genes)) != ncol(genes), ]
genes_mouse_field <- genes_mouse_field[row.names(genes), ]
##select same rows in the first table
field <- field[row.names(genes), ]
###############lab
#select the genes and lab muce
lab <- hm %>%
dplyr::filter(origin == "Lab", Position == "mLN") #selecting for mln to avoid
# duplicates
lab <- unique(lab)
gene_lab_mouse <- lab %>%
dplyr::select(c(Mouse_ID, all_of(Gene_lab)))
gene_lab_mouse <- unique(gene_lab_mouse)
genes_lab <- gene_lab_mouse[, -1]
#remove rows with only nas
genes_lab <- genes_lab[,colSums(is.na(genes_lab))<nrow(genes_lab)]
#remove colums with only nas
genes_lab <- genes_lab[rowSums(is.na(genes_lab)) != ncol(genes_lab), ]
genes_lab <- unique(genes_lab)
#select same rows in the first table
gene_lab_mouse <- gene_lab_mouse[row.names(genes_lab), ]
##select same rows in the first table
lab <- lab[row.names(genes_lab), ]
hm_genes <- rbind(gene_lab_mouse, genes_mouse_field)
hm_selection_g <- rbind(lab, field)
glimpse(hm_genes)
genes <- hm_genes %>%
dplyr::select(-Mouse_ID)
#had to remove as they were disturbing the imputation: Worms_presence, MC.Eimeria.FEC,  Heligmosomoides_polygurus, Zfy2, Y,  MpiC,
#vis_miss(field)
# The frequency distribution of the missing cases per variable can be obtained
# as:
init <- mice(genes, maxit = 0)
# m=5 refers to the number of imputed datasets. Five is the default value.
igf <- mice(genes, m = 5, seed = 500) # method = meth,
summary(igf)
densityplot(igf, height = 1000, width = 800)
stripplot(igf, pch = 20, cex = 1.2)
stripplot(igf, pch = 20, cex = 1.2)
knitr::opts_chunk$set(echo = TRUE)
# install libraries
library(dplyr)
library(XML)
library(methods)
library(plyr)
library(readr)
library(ggplot2)
#read tsv table
David <- read_tsv("~/GitHub/Namibia_project/Data/Nanodrop_measurements/David_Nanodrop_DNA-Extractions.tsv")
# remove ffirst column
David <-  David[,-1]
#add column sample type
David <- David %>%
mutate(animal = "David")
#change the column names
write.csv(David,
"~/GitHub/Namibia_project/Data/Nanodrop_measurements/CSV/David.csv",
row.names = FALSE)
#read tsv table
Duppel_1 <- read_tsv("~/GitHub/Namibia_project/Data/Nanodrop_measurements/Düppel_26022023_2.tsv")
# remove ffirst column
Duppel_1 <-  Duppel_1[,-1]
#change the column names
write.csv(Duppel_1,
"~/GitHub/Namibia_project/Data/Nanodrop_measurements/CSV/Düppel_26022023.csv",
row.names = FALSE)
#read tsv table
Rodent_1 <- read_tsv("~/GitHub/Namibia_project/Data/Nanodrop_measurements/Rodents_26032023.tsv")
Rodent_2 <- read_tsv("~/GitHub/Namibia_project/Data/Nanodrop_measurements/Rodents_27032023.tsv")
#combine the measuerements
Rodent <- rbind(Rodent_1,Rodent_2)
# remove first column
Rodent <-  Rodent[,-1]
#change the column names
write.csv(Rodent_1,
"~/GitHub/Namibia_project/Data/Nanodrop_measurements/CSV/Rodents_26032023.csv",
row.names = FALSE)
Nanodrop <- rbind(Duppel_1, Rodent)
# remove spaces
colnames(Nanodrop) <- gsub(" ", "_", colnames(Nanodrop))
Nanodrop <- Nanodrop %>%
dplyr::rename(Quality_260_280 = '260/280',
Quality_260_230 = '260/230')
ggplot(Nanodrop, aes(x = Nucleic_Acid, y = Quality_260_280)) +
geom_jitter() +
labs(x = "Concentration of DNA in ng/µl", y = "Quality of DNA 260/280 ratio",
title = "Assessing quality of DNA with Nanodrop")
ggplot(Nanodrop %>%
filter(Quality_260_280 < 2.5,  Quality_260_280 > 1.5 ),
aes(x = Nucleic_Acid, y = Quality_260_280)) +
geom_jitter() +
labs(x = "Concentration of DNA in ng/µl", y = "Quality of DNA",
title = "Assessing quality of DNA with Nanodrop")
ggplot(Nanodrop,
aes(x = Nucleic_Acid, y = Quality_260_230)) +
geom_jitter() +
labs(x = "Concentration of DNA in ng/µl", y = "Quality of DNA, 260/230",
title = "Assessing quality of DNA with Nanodrop")
ggplot(Nanodrop %>% filter(Quality_260_230 < 60),
aes(x = Nucleic_Acid, y = Quality_260_230)) +
geom_jitter() +
labs(x = "Concentration of DNA in ng/µl", y = "Quality of DNA, 260/230",
title = "Assessing quality of DNA with Nanodrop")
ggplot(Nanodrop %>%
filter(Quality_260_230 < 2.5, Quality_260_230 > 1.8),
aes(x = Nucleic_Acid, y = Quality_260_230)) +
geom_jitter() +
labs(x = "Concentration of DNA in ng/µl", y = "Quality of DNA, 260/230",
title = "Assessing quality of DNA with Nanodrop")
Nanodrop %>%
filter( Quality_260_280 < 2.5,  Quality_260_280 > 1.5 )
setwd("GitHub/Article_predicting_WL/")
#install.packages("optimx", version = "2021-10.12") # this package is required for
#the parasite load package to work
require(devtools)
## install the pacakage of Alice Balard
devtools::install_github("alicebalard/parasiteLoad@v2.0", force = TRUE)
library(parasiteLoad)
library(tidyverse)
library(tidyr)
library(dplyr)
library(cowplot)
library(randomForest)
library(ggplot2)
library(VIM) # visualizing missing data
library(mice) # imputing missing data without predictors
library(ggpubr)
library(optimx)
library(rfUtilities) # Implements a permutation test cross-validation for
library(fitdistrplus) #testing distributions
library(logspline)
library(caret)
library(dplyr)
library(tidyr)
# read the data
hm <- read.csv("Data/Data_output/imputed_clean_data.csv")
# filter for the field mice
Field <- hm %>%
filter(origin == "Field") %>%
drop_na(HI)
# Create vectors for selecting relevant columns
EqPCR.cols      <- c("delta_ct_cewe_MminusE", "MC.Eimeria", "Ct.Eimeria")
#,"Ct.Mus")
Genes_v   <- c("IFNy", "CXCR3", "IL.6", "IL.13", #"IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF") #"IL.12", "IRG6")
# select the gene columns
gene <-  Field %>%
dplyr::select(c(Mouse_ID, all_of(Genes_v)))
# data frame with only the genes
genes <- gene %>%
dplyr::select(-Mouse_ID)
# load predicting weight loss model
weight_loss_predict <- readRDS("R/Models/predict_WL.rds")
set.seed(540)
#The predict() function in R is used to predict the values based on the input data.
predicted_WL <- predict(weight_loss_predict, genes)
# assign test.data to a new object, so that we can make changes
result_field <- genes
#add the new variable of predictions to the result object
result_field <- cbind(result_field, predicted_WL)
# add it to the field data
Field <- cbind(Field, predicted_WL)
rm(gene,genes)
########## Analyzing the distribution of our data in order to
# go on with the anaylsis
Field %>% ggplot(aes(x = predicted_WL)) +
geom_histogram(binwidth = 1.5)
##  predicted WL vs HI
Field %>%
ggplot(aes(x = HI , y = predicted_WL , color = Sex)) +
geom_smooth() +
geom_point()
## body length vs predicted WL
Field %>%
ggplot(aes(x = Body_Length , y = predicted_WL , color = Sex)) +
geom_smooth() +
geom_point()
## Let'S further analyse the distribution of WL
x <- Field$predicted_WL
descdist(data = x, discrete = FALSE)
descdist(data = x, discrete = FALSE, #data is continuous
boot = 1000)
# Define function to be used to test, get the log lik and aic
tryDistrib <- function(x, distrib){
# deals with fitdistr error:
fit <- tryCatch(MASS::fitdistr(x, distrib), error=function(err) "fit failed")
return(list(fit = fit,
loglik = tryCatch(fit$loglik, error=function(err) "no loglik computed"),
AIC = tryCatch(fit$aic, error=function(err) "no aic computed")))
}
## ---------------------------------------------------------------------------------------------------
tryDistrib(x, "normal")
tryDistrib(x, "binomial")
tryDistrib(x, "student")
tryDistrib(x, "weibull")
tryDistrib(x, "weibullshifted")
## ---------------------------------------------------------------------------------------------------
findGoodDist(x, "normal", "weibull")
plot_WL_Sex
ggsave(plot = plot_WL_Sex, filename = "figures/hybrid_sex.jpeg", width = 10,
height = 8, dpi = 1000)
# Create HI bar
HIgradientBar <- ggplot(data.frame(hi = seq(0,1,0.0001)),
aes(x=hi, y=1, fill = hi)) +
geom_tile() +
theme_void() +
scale_fill_gradient(low = "blue", high = "red")  +
scale_x_continuous(expand=c(.01,0)) +
scale_y_continuous(expand=c(0,0)) +
theme(legend.position = 'none')
plot_WL_Sex <-
plot_grid(plot_WL_Sex,
HIgradientBar,
nrow = 2,
align = "v",
axis = "tlr",
rel_heights = c(13, 1))
# read the data
hm <- read.csv("Data/Data_output/imputed_clean_data.csv")
# filter for the field mice
Field <- hm %>%
filter(origin == "Field") %>%
drop_na(HI)
# Create vectors for selecting relevant columns
EqPCR.cols      <- c("delta_ct_cewe_MminusE", "MC.Eimeria", "Ct.Eimeria")
Genes_v   <- c("IFNy", "CXCR3", "IL.6", "IL.13", #"IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF") #"IL.12", "IRG6")
# select the gene columns
gene <-  Field %>%
dplyr::select(c(Mouse_ID, all_of(Genes_v)))
# data frame with only the genes
genes <- gene %>%
dplyr::select(-Mouse_ID)
# load predicting weight loss model
weight_loss_predict <- readRDS("R/Models/predict_WL.rds")
set.seed(540)
#The predict() function in R is used to predict the values based on the input data.
predicted_WL <- predict(weight_loss_predict, genes)
# assign test.data to a new object, so that we can make changes
result_field <- genes
#add the new variable of predictions to the result object
result_field <- cbind(result_field, predicted_WL)
# add it to the field data
Field <- cbind(Field, predicted_WL)
rm(gene,genes)
########## Analyzing the distribution of our data in order to
# go on with the anaylsis
Field %>% ggplot(aes(x = predicted_WL)) +
geom_histogram(binwidth = 1.5)
##  predicted WL vs HI
Field %>%
ggplot(aes(x = HI , y = predicted_WL , color = Sex)) +
geom_smooth() +
geom_point()
## body length vs predicted WL
Field %>%
ggplot(aes(x = Body_Length , y = predicted_WL , color = Sex)) +
geom_smooth() +
geom_point()
## Let'S further analyse the distribution of WL
x <- Field$predicted_WL
descdist(data = x, discrete = FALSE)
descdist(data = x, discrete = FALSE, #data is continuous
boot = 1000)
# Define function to be used to test, get the log lik and aic
tryDistrib <- function(x, distrib){
# deals with fitdistr error:
fit <- tryCatch(MASS::fitdistr(x, distrib), error=function(err) "fit failed")
return(list(fit = fit,
loglik = tryCatch(fit$loglik, error=function(err) "no loglik computed"),
AIC = tryCatch(fit$aic, error=function(err) "no aic computed")))
}
## ---------------------------------------------------------------------------------------------------
tryDistrib(x, "normal")
tryDistrib(x, "binomial")
tryDistrib(x, "student")
tryDistrib(x, "weibull")
tryDistrib(x, "weibullshifted")
## ---------------------------------------------------------------------------------------------------
findGoodDist(x, "normal", "weibull")
## ----normal-----------------------------------------------------------------------------------------
plot(normal_)
summary(normal_)
plot(gamma_)
summary(gamma_)
plot(weibull_)
summary(weibull_)
## ---------------------------------------------------------------------------------------------------
Field$Sex <- as.factor(Field$Sex)
##All
fitWL_Sex <- parasiteLoad::analyse(data = Field,
response = "predicted_WL",
model = "normal",
group = "Sex")
plot_WL_Sex<- bananaPlot(mod = fitWL_Sex$H3,
data = Field,
response = "predicted_WL",
group = "Sex") +
scale_fill_manual(values = c("brown", "forestgreen")) +
scale_color_manual(values = c("brown", "forestgreen")) +
theme_bw()
plot_WL_Sex
ggsave(plot = plot_WL_Sex, filename = "figures/hybrid_sex.jpeg", width = 10,
height = 8, dpi = 1000)
# Create HI bar
HIgradientBar <- ggplot(data.frame(hi = seq(0,1,0.0001)),
aes(x=hi, y=1, fill = hi)) +
geom_tile() +
theme_void() +
scale_fill_gradient(low = "blue", high = "red")  +
scale_x_continuous(expand=c(.01,0)) +
scale_y_continuous(expand=c(0,0)) +
theme(legend.position = 'none')
plot_WL_Sex <-
plot_grid(plot_WL_Sex,
HIgradientBar,
nrow = 2,
align = "v",
axis = "tlr",
rel_heights = c(13, 1))
plot_WL_Sex
ggsave(plot = plot_WL_Sex, filename = "figures/hybrid_sex.jpeg", width = 10,
height = 8, dpi = 1000)
#hybridicity / expected heterozygosity EH
Field <- Field %>%
mutate(EH = 2*HI*(1-HI))
wl <- lm(predicted_WL ~ EH*HI, data = Field)
summary(wl)
wl <- lm(predicted_WL ~ EH + HI, data = Field)
summary(wl)
wl <- lm(predicted_WL ~ EH, data = Field)
summary(wl)
glimpse(field)
colnames(Field)
Field$delta_ct_cewe_MminusE
wl <- lm(predicted_WL ~ EH*delta_ct_cewe_MminusE, data = Field)
summary(wl)
wl <- lm(predicted_WL ~ EH*delta_ct_cewe_MminusE, data = Field %>% filter(MC.Eimeria = FALSE))
wl <- lm(predicted_WL ~ EH*MC.Eimeria, data = Field)
summary(wl)
wl <- lm(predicted_WL ~ EH*MC.Eimeria + MC.Eimeria, data = Field)
summary(wl)
##All
fitWL_mc <- parasiteLoad::analyse(data = mc_field,
response = "predicted_WL",
model = "normal",
group = "MC.Eimeria")
mc_field <- Field %>%
drop_na(MC.Eimeria)
mc_field$MC.Eimeria <- as.factor(mc_field$MC.Eimeria)
##All
fitWL_mc <- parasiteLoad::analyse(data = mc_field,
response = "predicted_WL",
model = "normal",
group = "MC.Eimeria")
plot_WL_MC_eimeria<- bananaPlot(mod = fitWL_mc$H3,
data = mc_field,
response = "predicted_WL",
group = "MC.Eimeria") +
scale_fill_manual(values = c("blueviolet", "limegreen")) +
scale_color_manual(values = c("blueviolet", "limegreen")) +
theme_bw()
plot_WL_MC_eimeria
ggplot(data = Field, aes(x = delta_ct_cewe_MminusE, y = predicted_WL)) +
geom_point() +
stat_smooth(method= "lm")
ggplot(data = Field %>%
filter(MC.Eimeria = TRUE), aes(x = delta_ct_cewe_MminusE, y = predicted_WL)) +
geom_point() +
stat_smooth(method= "lm")
Field2 <- Field %>%
drop_na(delta_ct_cewe_MminusE) %>%
filter(MC.Eimeria = TRUE)
cor(Field2$predicted_WL, Field2$delta_ct_cewe_MminusE)
tolerance <- lm(predicted_WL ~  delta_ct_cewe_MminusE,
data = Field %>% filter(MC.Eimeria = TRUE))
summary(tolerance)
cor(Field2$predicted_WL, Field2$delta_ct_cewe_MminusE)
tolerance <- lm(predicted_WL ~  delta_ct_cewe_MminusE,
data = Field %>% filter(MC.Eimeria = TRUE))
tolerance <- lm(predicted_WL ~  delta_ct_cewe_MminusE,
data = Field %>% filter(MC.Eimeria = TRUE))
summary(tolerance)
tolerance <- lm(predicted_WL ~ HI * delta_ct_cewe_MminusE,
data = Field %>% filter(MC.Eimeria = TRUE))
tolerance <- lm(predicted_WL ~ HI * delta_ct_cewe_MminusE + EH *delta_ct_cewe_MminusE,
data = Field %>% filter(MC.Eimeria = TRUE))
summary(tolerance)
a <- lm(predicted_WL ~ HI * delta_ct_cewe_MminusE,
data = Field %>% filter(MC.Eimeria = TRUE))
summary(a)
b <- lm(predicted_WL ~  EH *delta_ct_cewe_MminusE,
data = Field %>% filter(MC.Eimeria = TRUE))confint(tolerance)
summary(b)
b <- lm(predicted_WL ~  EH *delta_ct_cewe_MminusE,
data = Field %>% filter(MC.Eimeria = TRUE))
summary(b)
b <- lm(predicted_WL ~  EH *delta_ct_cewe_MminusE,
data = Field %>% filter(MC.Eimeria = TRUE))
summary(b)
c <- lm(predicted_WL ~  delta_ct_cewe_MminusE,
data = Field %>% filter(MC.Eimeria = TRUE))
summary(c)
## ---------------------------------------------------------------------------------------------------
Field <- Field %>%
dplyr::mutate(BMI = Body_Weight / (Body_Length)) #^2) which is the correct
ggplot(data = Field, aes(x = BMI, y = predicted_WL)) +
geom_point() +
stat_smooth(method= "lm")
bmi <- lm(predicted_WL ~ BMI, data = Field)
cor(Field$BMI, Field$predicted_WL, use = "complete.obs")
summary(bmi)
confint(bmi)
summary(bmi)
bmi <- lm(BMI ~ predicted_WL, data = Field)
cor(Field$BMI, Field$predicted_WL, use = "complete.obs")
summary(bmi)
confint(bmi)
## ---------------------------------------------------------------------------------------------------
Field_tol <- Field %>%
mutate(tolerance = predicted_WL / delta_ct_cewe_MminusE)
Field_tol <- Field_tol %>%
filter(!is.na(tolerance), MC.Eimeria == TRUE)
summary(Field_tol$tolerance)
Field_tol <- Field_tol %>%
filter(tolerance > -5, tolerance < 30)
summary(Field_tol$tolerance)
hist(Field_tol$tolerance)
Field_tol %>%
ggplot(aes(tolerance)) +
geom_histogram()
parasiteLoad::getParamBounds("normal", data = Field_tol, response = "tolerance")
x <- Field_tol$tolerance
tryDistrib(x, "normal")
tryDistrib(x, "binomial")
tryDistrib(x, "student")
tryDistrib(x, "weibull")
tryDistrib(x, "weibullshifted")
tryDistrib(x, "normal")
tryDistrib(x, "binomial")
tryDistrib(x, "student")
tryDistrib(x, "weibull")
tryDistrib(x, "weibullshifted")
##All
fitWL_tol <- parasiteLoad::analyse(data = Field_tol,
response = "tolerance",
model = "normal",
group = "Sex")
plot_tolerance_Sex<- bananaPlot(mod = fitWL_tol$H3,
data = Field_tol,
response = "tolerance",
group = "Sex") +
scale_fill_manual(values = c("blueviolet", "limegreen")) +
scale_color_manual(values = c("blueviolet", "limegreen")) +
theme_bw()
plot_tolerance_Sex
# Create HI bar
HIgradientBar <- ggplot(data.frame(hi = seq(0,1,0.0001)),
aes(x=hi, y=1, fill = hi)) +
geom_tile() +
theme_void() +
scale_fill_gradient(low = "blue", high = "red")  +
scale_x_continuous(expand=c(.01,0)) +
scale_y_continuous(expand=c(0,0)) +
theme(legend.position = 'none')
plot_grid(plot_WL_Sex,
HIgradientBar,
nrow = 2,
align = "v",
axis = "tlr",
rel_heights = c(13, 1))
plot_WL_Sex
i <- Field %>%
filter(Sex == "M") %>%
drop_na(tolerance)
cor(i$HI, i$predicted_WL, method = "spearman")
i <- Field %>%
filter(Sex == "F") %>%
drop_na(tolerance)
cor(i$HI, i$tolerance, method = "spearman")
ggplot(Field, aes(x = HI_2, predicted_WL, color = Sex)) +
geom_smooth(method = lm, se = TRUE)
##All
fitWL_mc <- parasiteLoad::analyse(data = mc_field,
response = "predicted_WL",
model = "normal",
group = "EH")
##All
fitWL_mc <- parasiteLoad::analyse(data = EH,
response = "predicted_WL",
model = "normal",
group = "Sex")
