predict_WL_cv$fit.var.exp
par(mfrow=c(2,2))
plot(predict_WL_cv)
# Root Mean Squared Error (observed vs. predicted) from each Bootstrap
# iteration (cross-validation)
plot(predict_WL_cv, stat = "mse")
#Percent variance explained from specified fit model
plot(predict_WL_cv, stat = "var.exp")
#Mean Absolute Error from each Bootstrapped model
plot(predict_WL_cv, stat = "mae")
## ---------------------------------------------------------------------------------------------------
plot(WL_predict_gene)
## ---------------------------------------------------------------------------------------------------
# number of trees with lowest MSE
which.min(WL_predict_gene$mse)
# RMSE of this optimal random forest
sqrt(WL_predict_gene$mse[which.min(WL_predict_gene$mse)])
### Visualize variable importance ---
#Call importance() function on the model model to check how the attributes used
# as predictors affect our WL_predict_gene
importance(WL_predict_gene)
## S3 method for class 'randomForest'
plot(WL_predict_gene, type = "l", main=deparse(substitute(x)))
varImpPlot(WL_predict_gene)
# Get variable importance from the WL_predict_gene fit
ImpData <- as.data.frame(importance(WL_predict_gene))
ImpData$Var.Names <- row.names(ImpData)
#The predict() function in R is used to predict the values based on the
# input data.
predictions <- predict(WL_predict_gene, test.data)
# assign test.data to a new object, so that we can make changes
result <- test.data
#add the new variable of predictions to the result object
result <- cbind(result, predictions)
# what is the correlation between predicted and actual data?
cor(result$WL_max, result$predictions,
method = c("pearson", "kendall", "spearman"))
cor.test(result$WL_max, result$predictions)
cor(result$WL_max, result$predictions,
method = "spearman")
test_lab <- lab %>%
left_join(result, by = c("WL_max", "IFNy", "CXCR3", "IL.6", "IL.13", #"IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF"))
test_lab <- test_lab %>%
drop_na(predictions)
# what is the correlation between predicted and actual data?
cor(result$WL_max, result$predictions,
method = c("pearson", "kendall", "spearman"))
### delta ct We considered ΔCt  = −5 our limit of detection
test_lab <- test_lab %>%
mutate(infected_delta =
case_when(
delta_ct_cewe_MminusE > -5 ~ "infected",
delta_ct_cewe_MminusE < -5 ~ "uninfected"
))
### plotting
test_lab %>%
drop_na(delta_ct_cewe_MminusE) %>%
mutate(infected_delta =
case_when(
delta_ct_cewe_MminusE > -5 ~ "infected",
delta_ct_cewe_MminusE < -5 ~ "uninfected"
)) %>%
ggplot(aes(x = predictions, y = WL_max, color = current_infection)) +
# Geom
geom_point(aes(size = delta_ct_cewe_MminusE, shape = infected_delta), alpha = 0.7) +
# Labels
labs(
x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss",
title = "Relationship between Predicted and Observed Weight Loss",
#subtitle = "Grouped by Current Infection and Sized by Delta CT Value",
color = "Current Infection",
size = "Delta Ct value",
shape = "Delta Ct treshold"
) +
# Theme adjustments
theme_minimal() +
theme(
legend.position = "right",
legend.title = element_text(face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
panel.grid.major = element_line(color = "gray90"),
panel.grid.minor = element_blank()
) +
# Color adjustments as per given values
scale_color_manual(values = c(E_falciformis = "salmon",
E_ferrisi = "forestgreen",
uninfected = "deepskyblue")) +
# Size adjustments
scale_size_continuous(range = c(2, 10)) -> predictions_random_for_lab
predictions_random_for_lab
ggsave(plot = predictions_random_for_lab,
filename = "figures/predictions_random_for_lab.jpeg", width = 8, height = 5,
dpi = 1000)
# Calculate the linear model
lm_fit <- lm(WL_max ~ predictions, data = test_lab)
# Extract coefficients for the model formula
intercept <- round(coef(lm_fit)[1], 2)
slope <- round(coef(lm_fit)[2], 2)
formula_text <- paste0("WL_max = ", intercept, " ", ifelse(slope >= 0, "+ ", "- "), abs(slope), " * predictions")
# Calculate correlation
cor_value <- round(cor(test_lab$WL_max, test_lab$predictions), 2)
cor_text <- paste0("Rho = ", cor_value)
test_lab   %>%
ggplot(aes(x = predictions, y = WL_max)) +
geom_smooth(method = lm, se = TRUE) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
geom_point(aes(x = predictions, y = WL_max, size = 0.8, alpha = 0.3)) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
theme_light() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
legend.position = "none") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = formula_text, hjust = 0, vjust = 4, size = 4, color = "blue") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = cor_text, hjust = 0, vjust = 1.5, size = 4, color = "blue") -> linear_plot
linear_plot
ggsave(filename = "figures/linear_model_of_random_forest.jpeg", plot = linear_plot,
width = 10, height = 6,
dpi = 1000)
#train the model
WL_predict_gene <- randomForest(WL_max ~., data = gene,
proximity = TRUE, ntree = 1000)
# ntree = number of trees
# save the model
# toa = trained on all
saveRDS(WL_predict_gene, "R/Models//predict_WL.rds")
print(WL_predict_gene)
glimpse(lab)
colnames(lab)
library(randomForest)
library(caret)
library(ggpubr)
library(rfUtilities)
#import data
hm <- read.csv("Data/Data_output/imputed_clean_data.csv")
Gene_v <- c("IFNy", "CXCR3", "IL.6", "IL.13", "IL1RN", "CASP1", "CXCL9",
"IDO1", "IRGM1", "MPO", "MUC2", "MUC5AC", "MYD88", "NCR1",
"PRF1", "RETNLB", "SOCS1", "TICAM1", "TNF")
# prepare the lab data
lab <- hm %>%
dplyr::filter(origin == "Lab")
#select the imputed gene columns
gene_m <-  lab %>%
dplyr::select(c(Mouse_ID, all_of(Gene_v), delta_ct_cewe_MminusE))
genes <- gene_m %>%
dplyr::select(-Mouse_ID)
gene_W <- lab  %>%
dplyr::select(c(all_of(Gene_v), delta_ct_cewe_MminusE))
# ... [rest of the code, replacing WL_max with delta_ct_cewe_MminusE]
# ... [rest of the code, replacing WL_max with delta_ct_cewe_MminusE]
#import data
hm <- read.csv("Data/Data_output/imputed_clean_data.csv")
Gene_v <- c("IFNy", "CXCR3", "IL.6", "IL.13", "IL1RN", "CASP1", "CXCL9",
"IDO1", "IRGM1", "MPO", "MUC2", "MUC5AC", "MYD88", "NCR1",
"PRF1", "RETNLB", "SOCS1", "TICAM1", "TNF")
# prepare the lab data
lab <- hm %>%
dplyr::filter(origin == "Lab")
#select the imputed gene columns
gene_m <-  lab %>%
dplyr::select(c(Mouse_ID, all_of(Gene_v), delta_ct_cewe_MminusE))
genes <- gene_m %>%
dplyr::select(-Mouse_ID)
gene_W <- lab  %>%
dplyr::select(c(all_of(Gene_v), delta_ct_cewe_MminusE))
# Splitting the data
set.seed(333)
training.samples <- createDataPartition(y = gene_W$delta_ct_cewe_MminusE, p = .7, list = FALSE)
train.data <- gene_W[training.samples, ]
test.data <- gene_W[-training.samples, ]
# Splitting the data
set.seed(333)
training.samples <- createDataPartition(y = gene_W$delta_ct_cewe_MminusE, p = .7, list = FALSE)
View(gene_W)
#select the imputed gene columns
gene_m <-  lab %>%
drop_na(delta_ct_cewe_MminusE) %>%
dplyr::select(c(Mouse_ID, all_of(Gene_v), delta_ct_cewe_MminusE))
genes <- gene_m %>%
dplyr::select(-Mouse_ID)
gene_W <- lab  %>%
dplyr::select(c(all_of(Gene_v), delta_ct_cewe_MminusE))
# Splitting the data
set.seed(333)
training.samples <- createDataPartition(y = gene_W$delta_ct_cewe_MminusE, p = .7, list = FALSE)
gene_W <- lab  %>%
drop_na(delta_ct_cewe_MminusE) %>%
dplyr::select(c(all_of(Gene_v), delta_ct_cewe_MminusE))
# Splitting the data
set.seed(333)
training.samples <- createDataPartition(y = gene_W$delta_ct_cewe_MminusE, p = .7, list = FALSE)
train.data <- gene_W[training.samples, ]
test.data <- gene_W[-training.samples, ]
# Training the random forest model
set.seed(333)
delta_predict_gene <- randomForest(delta_ct_cewe_MminusE ~., data = train.data,
proximity = TRUE, ntree = 1000)
saveRDS(delta_predict_gene, file = "R/Models/delta_predict_gene.RData")
# Cross-validation
predict_delta_cv <- rf.crossValidation(x = delta_predict_gene, xdata = train.data,
p = 0.10, n = 99, ntree = 501)
par(mfrow=c(2,2))
plot(predict_delta_cv)
# Making predictions on test data
predictions <- predict(delta_predict_gene, test.data)
result <- test.data
result$predictions <- predictions
# Merging predictions with the original lab dataset
test_lab <- lab %>%
left_join(result, by = c("delta_ct_cewe_MminusE", all_of(Gene_v)))
# Merging predictions with the original lab dataset
test_lab <- lab %>%
left_join(result, by = c("delta_ct_cewe_MminusE",
c("IFNy", "CXCR3", "IL.6", "IL.13", "IL1RN", "CASP1", "CXCL9",
"IDO1", "IRGM1", "MPO", "MUC2", "MUC5AC", "MYD88", "NCR1",
"PRF1", "RETNLB", "SOCS1", "TICAM1", "TNF")))
# Training model on all data (assuming this was your intention with the "toa" comment)
delta_predict_gene_all <- randomForest(delta_ct_cewe_MminusE ~., data = genes,
proximity = TRUE, ntree = 1000)
saveRDS(delta_predict_gene_all, "R/Models/predict_delta_all.rds")
# Plotting
plotting <- test_lab %>%
drop_na(delta_ct_cewe_MminusE) %>%
ggplot(aes(x = predictions, y = delta_ct_cewe_MminusE, color = current_infection)) +
geom_point(aes(size = delta_ct_cewe_MminusE, shape = infected_delta), alpha = 0.7) +
labs(
x = "Predictions: ΔCt Value",
y = "Observed: ΔCt Value",
title = "Relationship between Predicted and Observed ΔCt Value",
color = "Current Infection",
size = "Delta Ct value",
shape = "Delta Ct threshold"
) +
theme_minimal() +
theme(
legend.position = "right",
legend.title = element_text(face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
panel.grid.major = element_line(color = "gray90"),
panel.grid.minor = element_blank()
) +
scale_color_manual(values = c(E_falciformis = "salmon",
E_ferrisi = "forestgreen",
uninfected = "deepskyblue")) +
scale_size_continuous(range = c(2, 10))
plotting
# Correlation between predicted and actual data
cor_result <- cor(result$delta_ct_cewe_MminusE, result$predictions,
method = c("pearson", "kendall", "spearman"))
cor_test <- cor.test(result$delta_ct_cewe_MminusE, result$predictions)
spearman_cor <- cor(result$delta_ct_cewe_MminusE, result$predictions, method = "spearman")
# Checking for ΔCt values
test_lab <- test_lab %>%
mutate(infected_delta =
case_when(
delta_ct_cewe_MminusE > -5 ~ "infected",
delta_ct_cewe_MminusE <= -5 ~ "uninfected"
))
# Plotting
plotting <- test_lab %>%
drop_na(delta_ct_cewe_MminusE) %>%
ggplot(aes(x = predictions, y = delta_ct_cewe_MminusE, color = current_infection)) +
geom_point(aes(size = delta_ct_cewe_MminusE, shape = infected_delta), alpha = 0.7) +
labs(
x = "Predictions: ΔCt Value",
y = "Observed: ΔCt Value",
title = "Relationship between Predicted and Observed ΔCt Value",
color = "Current Infection",
size = "Delta Ct value",
shape = "Delta Ct threshold"
) +
theme_minimal() +
theme(
legend.position = "right",
legend.title = element_text(face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
panel.grid.major = element_line(color = "gray90"),
panel.grid.minor = element_blank()
) +
scale_color_manual(values = c(E_falciformis = "salmon",
E_ferrisi = "forestgreen",
uninfected = "deepskyblue")) +
scale_size_continuous(range = c(2, 10))
plotting
plotting
ggsave(filename = "figures/predictions_random_for_lab_delta_ct.jpeg",
plot = plotting, width = 8, height = 5, dpi = 1000)
View(delta_predict_gene_all)
View(predict_delta_cv)
View(train.data)
View(training.samples)
View(test.data)
View(test_lab)
# Calculate linear model and visualize
lm_fit <- lm(delta_ct_cewe_MminusE ~ predictions, data = test_lab)
formula_text <- paste0("delta_ct_cewe_MminusE = ",
round(coef(lm_fit)[1], 2),
ifelse(coef(lm_fit)[2] >= 0, " + ", " - "),
abs(round(coef(lm_fit)[2], 2)),
" * predictions")
cor_value <- round(cor(test_lab$delta_ct_cewe_MminusE, test_lab$predictions), 2)
cor_text <- paste0("Rho = ", cor_value)
linear_plot <- test_lab %>%
ggplot(aes(x = predictions, y = delta_ct_cewe_MminusE)) +
geom_smooth(method = lm, se = TRUE) +
geom_point(aes(x = predictions, y = delta_ct_cewe_MminusE, size = 0.8, alpha = 0.3)) +
labs(x = "Predictions: ΔCt Value", y = "Observed: ΔCt Value") +
# Calculate linear model and visualize
lm_fit <- lm(delta_ct_cewe_MminusE ~ predictions, data = test_lab)
formula_text <- paste0("delta_ct_cewe_MminusE = ",
round(coef(lm_fit)[1], 2),
ifelse(coef(lm_fit)[2] >= 0, " + ", " - "),
abs(round(coef(lm_fit)[2], 2)),
" * predictions")
# Calculate linear model and visualize
lm_fit <- lm(delta_ct_cewe_MminusE ~ predictions, data = test_lab)
formula_text <- paste0("delta_ct_cewe_MminusE = ",
round(coef(lm_fit)[1], 2),
ifelse(coef(lm_fit)[2] >= 0, " + ", " - "),
abs(round(coef(lm_fit)[2], 2)),
" * predictions")
cor_value <- round(cor(test_lab$delta_ct_cewe_MminusE, test_lab$predictions), 2)
cor_text <- paste0("Rho = ", cor_value)
linear_plot <- test_lab %>%
ggplot(aes(x = predictions, y = delta_ct_cewe_MminusE)) +
geom_smooth(method = lm, se = TRUE) +
geom_point(aes(x = predictions, y = delta_ct_cewe_MminusE, size = 0.8, alpha = 0.3)) +
labs(x = "Predictions: ΔCt Value", y = "Observed: ΔCt Value") +
theme_light() +
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"), legend.position = "none") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$delta_ct_cewe_MminusE),
label = formula_text, hjust = 0, vjust = 1.5, size = 4, color = "blue") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$delta_ct_cewe_MminusE),
label = cor_text, hjust = 0, vjust = 0.5, size = 4, color = "blue")
linear_plot
ggsave(filename = "figures/linear_model_of_delta_rf.jpeg",
plot = linear_plot, width = 10, height = 6, dpi = 1000)
plotting
linear_plot <- test_lab %>%
ggplot(aes(x = predictions, y = delta_ct_cewe_MminusE)) +
geom_smooth(method = lm, se = TRUE) +
geom_point(aes(x = predictions, y = delta_ct_cewe_MminusE, size = 0.8, alpha = 0.3)) +
labs(x = "Predictions: ΔCt Value", y = "Observed: ΔCt Value") +
theme_light() +
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"), legend.position = "none") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$delta_ct_cewe_MminusE),
label = formula_text, hjust = 0, vjust = 1.5, size = 4, color = "blue") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$delta_ct_cewe_MminusE),
label = cor_text, hjust = 0, vjust = 0.5, size = 4, color = "blue")
linear_plot
# Calculate Spearman's rank correlation (rho)
rho <- cor(test_lab$delta_ct_cewe_MminusE, test_lab$predictions, method = "spearman")
rho
# Checking for ΔCt values
test_lab <- test_lab %>%
mutate(infected_delta =
case_when(
delta_ct_cewe_MminusE > -5 ~ "infected",
delta_ct_cewe_MminusE <= -5 ~ "uninfected"
)) %>%
drop_na(delta_ct_cewe_MminusE)
# Plotting
plotting <- test_lab %>%
drop_na(delta_ct_cewe_MminusE) %>%
ggplot(aes(x = predictions, y = delta_ct_cewe_MminusE, color = current_infection)) +
geom_point(aes(size = delta_ct_cewe_MminusE, shape = infected_delta), alpha = 0.7) +
labs(
x = "Predictions: ΔCt Value",
y = "Observed: ΔCt Value",
title = "Relationship between Predicted and Observed ΔCt Value",
color = "Current Infection",
size = "Delta Ct value",
shape = "Delta Ct threshold"
) +
theme_minimal() +
theme(
legend.position = "right",
legend.title = element_text(face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
panel.grid.major = element_line(color = "gray90"),
panel.grid.minor = element_blank()
) +
scale_color_manual(values = c(E_falciformis = "salmon",
E_ferrisi = "forestgreen",
uninfected = "deepskyblue")) +
scale_size_continuous(range = c(2, 10))
plotting
ggsave(filename = "figures/predictions_random_for_lab_delta_ct.jpeg",
plot = plotting, width = 8, height = 5, dpi = 1000)
# Calculate Spearman's rank correlation (rho)
rho <- cor(test_lab$delta_ct_cewe_MminusE, test_lab$predictions, method = "spearman")
rho
# Calculate Spearman's rank correlation (rho)
rho <- cor(test_lab$delta_ct_cewe_MminusE, test_lab$predictions, method = "spearman")
rho_text <- paste0("Rho (Spearman) = ", round(rho, 2))
# Linear regression formula annotation
lm_coef <- coef(lm_fit)
formula_text <- paste0("ΔCt = ", round(lm_coef[1], 2),
ifelse(lm_coef[2] >= 0, " + ", " - "),
abs(round(lm_coef[2], 2)),
" * predictions")
# Generate linear plot with annotations
linear_plot <- test_lab %>%
ggplot(aes(x = predictions, y = delta_ct_cewe_MminusE)) +
geom_smooth(method = lm, se = TRUE, color = "blue") +
geom_point(aes(x = predictions, y = delta_ct_cewe_MminusE, size = 0.8, alpha = 0.3)) +
labs(x = "Predictions: ΔCt Value", y = "Observed: ΔCt Value") +
theme_light() +
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"), legend.position = "none") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$delta_ct_cewe_MminusE),
label = formula_text, hjust = 0, vjust = 1.5, size = 4, color = "blue") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$delta_ct_cewe_MminusE) - 0.5,
label = rho_text, hjust = 0, vjust = 0.5, size = 4, color = "red")
linear_plot
ggsave(filename = "figures/linear_model_of_delta_rf_with_annotations.jpeg",
plot = linear_plot, width = 10, height = 6, dpi = 1000)
# Calculate Spearman's rank correlation (rho)
rho <- cor(test_lab$delta_ct_cewe_MminusE, test_lab$predictions, method = "spearman", use = "complete.obs")
rho
unique(test_lab$delta_ct_cewe_MminusE)
unique(test_lab$predictions)
length(test_lab$delta_ct_cewe_MminusE)
length(test_lab$predictions)
# Calculate Spearman's rank correlation (rho)
rho <- cor(test_lab$delta_ct_cewe_MminusE, test_lab$predictions, use = "complete.obs")
rho
rho_text <- paste0("Rho (Spearman) = ", round(rho, 2))
# Linear regression formula annotation
lm_coef <- coef(lm_fit)
formula_text <- paste0("ΔCt = ", round(lm_coef[1], 2),
ifelse(lm_coef[2] >= 0, " + ", " - "),
abs(round(lm_coef[2], 2)),
" * predictions")
# Generate linear plot with annotations
linear_plot <- test_lab %>%
ggplot(aes(x = predictions, y = delta_ct_cewe_MminusE)) +
geom_smooth(method = lm, se = TRUE, color = "blue") +
geom_point(aes(x = predictions, y = delta_ct_cewe_MminusE, size = 0.8, alpha = 0.3)) +
labs(x = "Predictions: ΔCt Value", y = "Observed: ΔCt Value") +
theme_light() +
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"), legend.position = "none") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$delta_ct_cewe_MminusE),
label = formula_text, hjust = 0, vjust = 1.5, size = 4, color = "blue") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$delta_ct_cewe_MminusE) - 0.5,
label = rho_text, hjust = 0, vjust = 0.5, size = 4, color = "red")
linear_plot
linear_plot
ggsave(filename = "figures/linear_model_of_delta_rf_with_annotations.jpeg",
plot = linear_plot, width = 10, height = 6, dpi = 1000)
rho_text <- paste0("Rho = ", round(rho, 2))
# Linear regression formula annotation
lm_coef <- coef(lm_fit)
formula_text <- paste0("ΔCt = ", round(lm_coef[1], 2),
ifelse(lm_coef[2] >= 0, " + ", " - "),
abs(round(lm_coef[2], 2)),
" * predictions")
# Generate linear plot with annotations
test_lab %>%
ggplot(aes(x = predictions, y = WL_max)) +
geom_smooth(method = lm, se = TRUE) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
geom_point(aes(x = predictions, y = WL_max, size = 0.8, alpha = 0.3)) +
labs(x = "Predictions: Maximum weight loss",
y = "Observed: Maximum weight loss") +
theme_light() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
legend.position = "none") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = formula_text, hjust = 0, vjust = 4, size = 4, color = "blue") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$WL_max),
label = cor_text, hjust = 0, vjust = 1.5, size = 4, color = "blue") -> linear_plot
linear_plot
# Generate linear plot with annotations for ΔCt values
test_lab %>%
ggplot(aes(x = predictions, y = delta_ct_cewe_MminusE)) +  # updated y aesthetic
geom_smooth(method = lm, se = TRUE) +
labs(x = "Predictions: ΔCt Value",  # updated label
y = "Observed: ΔCt Value") +   # updated label
geom_point(aes(x = predictions, y = delta_ct_cewe_MminusE, size = 0.8, alpha = 0.3)) +
theme_light() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
legend.position = "none") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$delta_ct_cewe_MminusE),
label = formula_text, hjust = 0, vjust = 1.5, size = 4, color = "blue") +
annotate("text", x = min(test_lab$predictions), y = max(test_lab$delta_ct_cewe_MminusE),
label = cor_text, hjust = 0, vjust = 0.5, size = 4, color = "red") -> linear_plot_for_delta_ct
linear_plot_for_delta_ct
ggsave(filename = "figures/linear_model_of_delta_rf_with_annotations.jpeg",
plot = linear_plot, width = 10, height = 6, dpi = 1000)
source("~/GitHub/Article_predicting_WL/R/Scripts/6.Random_forest_delta_ct.R")
