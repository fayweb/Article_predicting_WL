df <- df %>%
mutate(IRGM1_N = 2^ - (IRGM1_dct - dct_mean)) %>%
mutate(IRGM1_N = round(IRGM1_N, digits = 2))
##############  MPO
df <- df %>%
mutate(MPO_dct = MPO - GAPDH)
# mean of dct
dct_mean <- mean(df$MPO_dct, na.rm = TRUE)
#fold gene expression
df <- df %>%
mutate(MPO_N = 2^ - (MPO_dct - dct_mean)) %>%
mutate(MPO_N = round(MPO_N, digits = 2))
##############  MUC2
df <- df %>%
mutate(MUC2_dct = MUC2 - GAPDH)
# mean of dct
dct_mean <- mean(df$MUC2_dct, na.rm = TRUE)
#fold gene expression
df <- df %>%
mutate(MUC2_N = 2^ - (MUC2_dct - dct_mean)) %>%
mutate(MUC2_N = round(MUC2_N, digits = 2))
##############  MUC5AC
df <- df %>%
mutate(MUC5AC_dct = MUC5AC - GAPDH)
# mean of dct
dct_mean <- mean(df$MUC5AC_dct, na.rm = TRUE)
#fold gene expression
df <- df %>%
mutate(MUC5AC_N = 2^ - (MUC5AC_dct - dct_mean)) %>%
mutate(MUC5AC_N = round(MUC5AC_N, digits = 2))
##############  MYD88
df <- df %>%
mutate(MYD88_dct = MYD88 - GAPDH)
# mean of dct
dct_mean <- mean(df$MYD88_dct, na.rm = TRUE)
#fold gene expression
df <- df %>%
mutate(MYD88_N = 2^ - (MYD88_dct - dct_mean)) %>%
mutate(MYD88_N = round(MYD88_N, digits = 2))
##############  NCR1
df <- df %>%
mutate(NCR1_dct = NCR1 - GAPDH)
# mean of dct
dct_mean <- mean(df$NCR1_dct, na.rm = TRUE)
#fold gene expression
df <- df %>%
mutate(NCR1_N = 2^ - (NCR1_dct - dct_mean)) %>%
mutate(NCR1_N = round(NCR1_N, digits = 2))
##############  PRF1
df <- df %>%
mutate(PRF1_dct = PRF1 - GAPDH)
# mean of dct
dct_mean <- mean(df$PRF1_dct, na.rm = TRUE)
#fold gene expression
df <- df %>%
mutate(PRF1_N = 2^ - (PRF1_dct - dct_mean)) %>%
mutate(PRF1_N = round(PRF1_N, digits = 2))
##############  RETNLB
df <- df %>%
mutate(RETNLB_dct = RETNLB - GAPDH)
# mean of dct
dct_mean <- mean(df$RETNLB_dct, na.rm = TRUE)
#fold gene expression
df <- df %>%
mutate(RETNLB_N = 2^ - (RETNLB_dct - dct_mean)) %>%
mutate(RETNLB_N = round(RETNLB_N, digits = 2))
##############  SOCS1
df <- df %>%
mutate(SOCS1_dct = SOCS1 - GAPDH)
# mean of dct
dct_mean <- mean(df$SOCS1_dct, na.rm = TRUE)
#fold gene expression
df <- df %>%
mutate(SOCS1_N = 2^ - (SOCS1_dct - dct_mean)) %>%
mutate(SOCS1_N = round(SOCS1_N, digits = 2))
##############  TICAM1
df <- df %>%
mutate(TICAM1_dct = TICAM1 - GAPDH)
# mean of dct
dct_mean <- mean(df$TICAM1_dct, na.rm = TRUE)
#fold gene expression
df <- df %>%
mutate(TICAM1_N = 2^ - (TICAM1_dct - dct_mean)) %>%
mutate(TICAM1_N = round(TICAM1_N, digits = 2))
##############  TNF
df <- df %>%
mutate(TNF_dct = TNF - GAPDH)
# mean of dct
dct_mean <- mean(df$TNF_dct, na.rm = TRUE)
#fold gene expression
df <- df %>%
mutate(TNF_N = 2^ - (TNF_dct - dct_mean)) %>%
mutate(TNF_N = round(TNF_N, digits = 2))
df -> df_field
## ---------------------------------------------------------------------------------------------------
################################# lab
# select first the field samples
df_lab <- gene_lab_mouse
############### IFNy
df_lab <- df_lab %>%
mutate(IFNy_dct = IFNy - PPIB)
# mean of dct
dct_mean <- mean(df_lab$IFNy_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(IFNy_N = 2^ - (IFNy_dct - dct_mean)) %>%
mutate(IFNy_N = round(IFNy_N, digits = 2))
############### CXCR3
df_lab <- df_lab %>%
mutate(CXCR3_dct = CXCR3 - PPIB)
# mean of dct
dct_mean <- mean(df_lab$CXCR3_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(CXCR3_N = 2^ - (CXCR3_dct - dct_mean)) %>%
mutate(CXCR3_N = round(CXCR3_N, digits = 2))
############### IL.6
df_lab <- df_lab %>%
mutate(IL.6_dct = IL.6 - PPIB)
# mean of dct
dct_mean <- mean(df_lab$IL.6_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(IL.6_N = 2^ - (IL.6_dct - dct_mean)) %>%
mutate(IL.6_N = round(IL.6_N, digits = 2))
############## IL.13
df_lab <- df_lab %>%
mutate(IL.13_dct = IL.13 - PPIB)
# mean of dct
dct_mean <- mean(df_lab$IL.13_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(IL.13_N = 2^ - (IL.13_dct - dct_mean)) %>%
mutate(IL.13_N = round(IL.13_N, digits = 2))
##############  IL1RN
df_lab <- df_lab %>%
mutate(IL1RN_dct = IL1RN - PPIB)
# mean of dct
dct_mean <- mean(df_lab$IL1RN_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(IL1RN_N = 2^ - (IL1RN_dct - dct_mean)) %>%
mutate(IL1RN_N = round(IL1RN_N, digits = 2))
##############  CASP1
df_lab <- df_lab %>%
mutate(CASP1_dct = CASP1 - PPIB)
# mean of dct
dct_mean <- mean(df_lab$CASP1_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(CASP1_N = 2^ - (CASP1_dct - dct_mean)) %>%
mutate(CASP1_N = round(CASP1_N, digits = 2))
##############  CXCL9
df_lab <- df_lab %>%
mutate(CXCL9_dct = CXCL9 - PPIB)
# mean of dct
dct_mean <- mean(df_lab$CXCL9_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(CXCL9_N = 2^ - (CXCL9_dct - dct_mean)) %>%
mutate(CXCL9_N = round(CXCL9_N, digits = 2))
##############  IDO1
df_lab <- df_lab %>%
mutate(IDO1_dct = IDO1 - PPIB)
# mean of dct
dct_mean <- mean(df_lab$IDO1_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(IDO1_N = 2^ - (IDO1_dct - dct_mean)) %>%
mutate(IDO1_N = round(IDO1_N, digits = 2))
##############  IRGM1
df_lab <- df_lab %>%
mutate(IRGM1_dct = IRGM1 - PPIB)
# mean of dct
dct_mean <- mean(df_lab$IRGM1_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(IRGM1_N = 2^ - (IRGM1_dct - dct_mean)) %>%
mutate(IRGM1_N = round(IRGM1_N, digits = 2))
##############  MPO
df_lab <- df_lab %>%
mutate(MPO_dct = MPO - PPIB)
# mean of dct
dct_mean <- mean(df_lab$MPO_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(MPO_N = 2^ - (MPO_dct - dct_mean)) %>%
mutate(MPO_N = round(MPO_N, digits = 2))
##############  MUC2
df_lab <- df_lab %>%
mutate(MUC2_dct = MUC2 - PPIB)
# mean of dct
dct_mean <- mean(df_lab$MUC2_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(MUC2_N = 2^ - (MUC2_dct - dct_mean)) %>%
mutate(MUC2_N = round(MUC2_N, digits = 2))
##############  MUC5AC
df_lab <- df_lab %>%
mutate(MUC5AC_dct = MUC5AC - PPIB)
# mean of dct
dct_mean <- mean(df_lab$MUC5AC_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(MUC5AC_N = 2^ - (MUC5AC_dct - dct_mean)) %>%
mutate(MUC5AC_N = round(MUC5AC_N, digits = 2))
##############  MYD88
df_lab <- df_lab %>%
mutate(MYD88_dct = MYD88 - PPIB)
# mean of dct
dct_mean <- mean(df_lab$MYD88_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(MYD88_N = 2^ - (MYD88_dct - dct_mean)) %>%
mutate(MYD88_N = round(MYD88_N, digits = 2))
##############  NCR1
df_lab <- df_lab %>%
mutate(NCR1_dct = NCR1 - PPIB)
# mean of dct
dct_mean <- mean(df_lab$NCR1_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(NCR1_N = 2^ - (NCR1_dct - dct_mean)) %>%
mutate(NCR1_N = round(NCR1_N, digits = 2))
##############  PRF1
df_lab <- df_lab %>%
mutate(PRF1_dct = PRF1 - PPIB)
# mean of dct
dct_mean <- mean(df_lab$PRF1_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(PRF1_N = 2^ - (PRF1_dct - dct_mean)) %>%
mutate(PRF1_N = round(PRF1_N, digits = 2))
##############  RETNLB
df_lab <- df_lab %>%
mutate(RETNLB_dct = RETNLB - PPIB)
# mean of dct
dct_mean <- mean(df_lab$RETNLB_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(RETNLB_N = 2^ - (RETNLB_dct - dct_mean)) %>%
mutate(RETNLB_N = round(RETNLB_N, digits = 2))
##############  SOCS1
df_lab <- df_lab %>%
mutate(SOCS1_dct = SOCS1 - PPIB)
# mean of dct
dct_mean <- mean(df_lab$SOCS1_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(SOCS1_N = 2^ - (SOCS1_dct - dct_mean)) %>%
mutate(SOCS1_N = round(SOCS1_N, digits = 2))
##############  TICAM1
df_lab <- df_lab %>%
mutate(TICAM1_dct = TICAM1 - PPIB)
# mean of dct
dct_mean <- mean(df_lab$TICAM1_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(TICAM1_N = 2^ - (TICAM1_dct - dct_mean)) %>%
mutate(TICAM1_N = round(TICAM1_N, digits = 2))
##############  TNF
df_lab <- df_lab %>%
mutate(TNF_dct = TNF - PPIB)
# mean of dct
dct_mean <- mean(df_lab$TNF_dct, na.rm = TRUE)
#fold gene expression
df_lab <- df_lab %>%
mutate(TNF_N = 2^ - (TNF_dct - dct_mean)) %>%
mutate(TNF_N = round(TNF_N, digits = 2))
###################### let's try just using DCT
df_lab <- df_lab %>%
dplyr::select(-c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10", "IL1RN","CASP1",
"CXCL9", "IDO1", "IRGM1", "MPO", "MUC2", "MUC5AC", "MYD88",
"NCR1", "PRF1", "RETNLB", "SOCS1",  "TICAM1", "TNF", "PPIB",
contains("_N")))
# remove ending _dct
df_lab <- df_lab %>%
rename_with(~str_remove(.x, "_dct"))
df_field <- df_field %>%
dplyr::select(-c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10", "IL1RN","CASP1",
"CXCL9", "IDO1", "IRGM1", "MPO", "MUC2", "MUC5AC", "MYD88",
"NCR1", "PRF1", "RETNLB", "SOCS1",  "TICAM1", "TNF", GAPDH,
contains("_N")))
# remove ending
df_field <- df_field %>%
rename_with(~str_remove(.x, "_dct"))
# add the new genes to the complete data sets
lab<- lab %>%
dplyr::select(-c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10", "IL1RN","CASP1",
"CXCL9", "IDO1", "IRGM1", "MPO",  "MUC2", "MUC5AC", "MYD88",
"NCR1", "PRF1", "RETNLB", "SOCS1",  "TICAM1", "TNF")) %>%
left_join(df_lab, by = c("Mouse_ID", "infection"))
field2 <- field %>%
dplyr::select(-c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10", "IL1RN","CASP1",
"CXCL9", "IDO1", "IRGM1", "MPO",  "MUC2", "MUC5AC", "MYD88",
"NCR1", "PRF1", "RETNLB", "SOCS1",  "TICAM1", "TNF")) %>%
left_join(df_field, by = c("infection", "Mouse_ID"))
hm_norm <- rbind(lab, field)
## ---------------------------------------------------------------------------------------------------
##save the imputed data
write.csv(hm_norm, "Data/Data_output/2.1.norm_MICE_data_set.csv", row.names = FALSE)
rm(df, df_field, df_lab, field, gene_lab_mouse, genes_field, genes_lab,
genes_mouse_field, hm, lab,dct_mean)
source("~/GitHub/Article_predicting_WL/R/3.MICE_imputation.R")
## ---------------------------------------------------------------------------------------------------
library(mice)
source("R/2.Data_normalization.R")
## ---------------------------------------------------------------------------------------------------
hm <- hm_norm
rm(hm_norm)
## ---------------------------------------------------------------------------------------------------
field <- hm %>%
dplyr::filter(origin == "Field")
field <- unique(field)
genes_mouse_field <- field %>%
dplyr::select(c(Mouse_ID, "IFNy", "CXCR3", "IL.6", "IL.13",# "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF"))
genes <- genes_mouse_field  %>%
dplyr::select(-Mouse_ID)
#remove rows with only nas
genes <- genes[,colSums(is.na(genes))<nrow(genes)]
#remove colums with only nas
genes <- genes[rowSums(is.na(genes)) != ncol(genes), ]
genes_mouse_field <- genes_mouse_field[row.names(genes), ]
##select same rows in the first table
field <- field[row.names(genes), ]
###############lab
#select the genes and lab muce
lab <- hm %>%
dplyr::filter(origin == "Lab", Position == "mLN") #selecting for mln to avoid
# duplicates
lab <- unique(lab)
gene_lab_mouse <- lab %>%
dplyr::select(c(Mouse_ID, "IFNy", "CXCR3", "IL.6", "IL.13",# "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF"))
genes_lab <- gene_lab_mouse[, -1]
#remove rows with only nas
genes_lab <- genes_lab[,colSums(is.na(genes_lab))<nrow(genes_lab)]
#remove colums with only nas
genes_lab <- genes_lab[rowSums(is.na(genes_lab)) != ncol(genes_lab), ]
#select same rows in the first table
gene_lab_mouse <- gene_lab_mouse[row.names(genes_lab), ]
##select same rows in the first table
lab <- lab[row.names(genes_lab), ]
hm_genes <- rbind(gene_lab_mouse, genes_mouse_field)
hm_selection_g <- rbind(lab, field)
genes <- hm_genes %>%
left_join(hm_selection_g %>%
dplyr::select(c(Mouse_ID, origin)),
by = "Mouse_ID")
genes <- genes %>%
dplyr::select(-Mouse_ID)
genes$origin <- as.factor(genes$origin)
#dplyr::select(-Mouse_ID)
# looking at patterns of nas)
#pattern_na <-as.data.frame(md.pattern(field_genes))
sapply(hm_genes, function(x) sum(is.na(x)))
#had to remove as they were disturbing the imputation: Worms_presence, MC.Eimeria.FEC,  Heligmosomoides_polygurus, Zfy2, Y,  MpiC,
#vis_miss(field)
# The frequency distribution of the missing cases per variable can be obtained
# as:
init <- mice(genes, maxit = 0)
#we want to impute only the specific variables
meth <- init$method
## ---------------------------------------------------------------------------------------------------
aggr_plot <- aggr(hm_genes, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(hm_genes), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
View(hm_genes)
View(genes)
## ---------------------------------------------------------------------------------------------------
library(mice)
source("R/2.Data_normalization.R")
## ---------------------------------------------------------------------------------------------------
hm <- hm_norm
rm(hm_norm)
## ---------------------------------------------------------------------------------------------------
field <- hm %>%
dplyr::filter(origin == "Field")
field <- unique(field)
genes_mouse_field <- field %>%
dplyr::select(c(Mouse_ID, "IFNy", "CXCR3", "IL.6", "IL.13",# "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF"))
genes <- genes_mouse_field  %>%
dplyr::select(-Mouse_ID)
#remove rows with only nas
genes <- genes[,colSums(is.na(genes))<nrow(genes)]
#remove colums with only nas
genes <- genes[rowSums(is.na(genes)) != ncol(genes), ]
genes_mouse_field <- genes_mouse_field[row.names(genes), ]
##select same rows in the first table
field <- field[row.names(genes), ]
###############lab
#select the genes and lab muce
lab <- hm %>%
dplyr::filter(origin == "Lab", Position == "mLN") #selecting for mln to avoid
# duplicates
lab <- unique(lab)
gene_lab_mouse <- lab %>%
dplyr::select(c(Mouse_ID, "IFNy", "CXCR3", "IL.6", "IL.13",# "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF"))
genes_lab <- gene_lab_mouse[, -1]
#remove rows with only nas
genes_lab <- genes_lab[,colSums(is.na(genes_lab))<nrow(genes_lab)]
#remove colums with only nas
genes_lab <- genes_lab[rowSums(is.na(genes_lab)) != ncol(genes_lab), ]
#select same rows in the first table
gene_lab_mouse <- gene_lab_mouse[row.names(genes_lab), ]
##select same rows in the first table
lab <- lab[row.names(genes_lab), ]
hm_genes <- rbind(gene_lab_mouse, genes_mouse_field)
hm_selection_g <- rbind(lab, field)
hm_selection_g <- rbind(lab, field)
genes <- hm_genes %>%
left_join(hm_selection_g %>%
dplyr::select(c(Mouse_ID, origin)),
by = "Mouse_ID")
View(genes)
View(hm_genes)
View(genes_lab)
###############lab
#select the genes and lab muce
lab <- hm %>%
dplyr::filter(origin == "Lab", Position == "mLN") #selecting for mln to avoid
# duplicates
lab <- unique(lab)
gene_lab_mouse <- lab %>%
dplyr::select(c(Mouse_ID, "IFNy", "CXCR3", "IL.6", "IL.13",# "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF"))
genes_lab <- gene_lab_mouse[, -1]
#remove rows with only nas
genes_lab <- genes_lab[,colSums(is.na(genes_lab))<nrow(genes_lab)]
#remove colums with only nas
genes_lab <- genes_lab[rowSums(is.na(genes_lab)) != ncol(genes_lab), ]
#select same rows in the first table
gene_lab_mouse <- gene_lab_mouse[row.names(genes_lab), ]
##select same rows in the first table
lab <- lab[row.names(genes_lab), ]
hm_genes <- rbind(gene_lab_mouse, genes_mouse_field)
hm_selection_g <- rbind(lab, field)
View(genes)
genes <- hm_genes %>%
left_join((hm_selection_g %>%
dplyr::select(c(Mouse_ID, origin))),
by = "Mouse_ID")
hm_selection_g[, c("Mouse_ID")]
left_join((hm_selection_g[,c("Mouse_ID", "origin")],
genes <- hm_genes %>%
left_join(hm_selection_g[,c("Mouse_ID", "origin")],
by = "Mouse_ID")
View(genes)
genes <- unique(genes)
genes <- cbind(hm_genes, hm_selection_g[,c("Mouse_ID", "origin")])
genes <- unique(genes)
## ---------------------------------------------------------------------------------------------------
library(mice)
source("R/2.Data_normalization.R")
## ---------------------------------------------------------------------------------------------------
hm <- hm_norm
rm(hm_norm)
## ---------------------------------------------------------------------------------------------------
field <- hm %>%
dplyr::filter(origin == "Field")
field <- unique(field)
genes_mouse_field <- field %>%
dplyr::select(c(Mouse_ID, "IFNy", "CXCR3", "IL.6", "IL.13",# "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF"))
genes <- genes_mouse_field  %>%
dplyr::select(-Mouse_ID)
#remove rows with only nas
genes <- genes[,colSums(is.na(genes))<nrow(genes)]
#remove colums with only nas
genes <- genes[rowSums(is.na(genes)) != ncol(genes), ]
genes_mouse_field <- genes_mouse_field[row.names(genes), ]
##select same rows in the first table
field <- field[row.names(genes), ]
###############lab
#select the genes and lab muce
lab <- hm %>%
dplyr::filter(origin == "Lab", Position == "mLN") #selecting for mln to avoid
# duplicates
lab <- unique(lab)
gene_lab_mouse <- lab %>%
dplyr::select(c(Mouse_ID, "IFNy", "CXCR3", "IL.6", "IL.13",# "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF"))
genes_lab <- gene_lab_mouse[, -1]
#remove rows with only nas
genes_lab <- genes_lab[,colSums(is.na(genes_lab))<nrow(genes_lab)]
#remove colums with only nas
genes_lab <- genes_lab[rowSums(is.na(genes_lab)) != ncol(genes_lab), ]
#select same rows in the first table
gene_lab_mouse <- gene_lab_mouse[row.names(genes_lab), ]
##select same rows in the first table
lab <- lab[row.names(genes_lab), ]
hm_genes <- rbind(gene_lab_mouse, genes_mouse_field)
hm_selection_g <- rbind(lab, field)
hm_selection_g <- rbind(lab, field)
genes <- cbind(hm_genes, hm_selection_g[,c("Mouse_ID", "origin")])
View(genes)
View(hm_selection_g)
