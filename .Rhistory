g <- df[, colnames(df) %in% Genes_v]
delta_ct <- sapply(g, function(gene) reference_gene - gene)
delta_ct <- as.data.frame(cbind(Mouse_ID, delta_ct))
return(delta_ct)
}
# Use the function
norm_field <- calculate_delta_ct(field, "GAPDH")
norm_lab <- calculate_delta_ct(lab, "PPIB")
norm <- rbind(norm_field, norm_lab)
hm_norm <- hm %>%
dplyr::select(-all_of(Genes_v)) %>%
left_join(norm, by = "Mouse_ID")
View(norm)
rm(result, norm)
# Use the function
norm_field <- calculate_delta_ct(field, "GAPDH")
norm_lab <- calculate_delta_ct(lab, "PPIB")
norm:g <- rbind(norm_field, norm_lab)
norm_g <- rbind(norm_field, norm_lab)
hm_norm <- hm %>%
dplyr::select(-all_of(Genes_v)) %>%
left_join(norm_g, by = "Mouse_ID")
rm(result, norm_g)
lab <- hm_norm%>%
filter(origin== "Lab")
gene_correlation <- lab[,Genes_v]
# draw correlation between the genes
gene_correlation <- as.matrix(cor(gene_correlation,
use="pairwise.complete.obs"))
View(gene_correlation)
# draw correlation between the genes
gene_correlation <- as.matrix(cor(gene_correlation,
use="pairwise.complete.obs"))
gene_correlation <- sapply(lab[,Genes_v], as.numeric)
# draw correlation between the genes
gene_correlation <- as.matrix(cor(gene_correlation,
use="pairwise.complete.obs"))
# matrix of the p-value of the correlatio
p.mat <- cor.mtest(gene_correlation)
corrplot(gene_correlation,
method = "circle",  #method of the plot, "color" would show colour gradient
tl.col = "black", tl.srt=45, #colour of labels and rotation
col = brewer.pal(n = 8, name ="RdYlBu"), #colour of matrix
order="hclust", #hclust reordering
p.mat = p.mat, sig.level = 0.01, insig = "blank",
addCoef.col = 'black',
number.cex=0.5,
title = "Lab")
hm_genes <- hm_norm[,c("Mouse_ID", Genes_v)]
#pattern_na <-as.data.frame(md.pattern(field_genes))
sapply(hm_genes, function(x) sum(is.na(x)))
genes <- hm_genes[, -1]
# The frequency distribution of the missing cases per variable can be obtained
# as:
init <- mice(genes, maxit = 0)
hm_genes <- hm_norm[,c("Mouse_ID", Genes_v)]
View(hm_genes)
#pattern_na <-as.data.frame(md.pattern(field_genes))
sapply(hm_genes, function(x) sum(is.na(x)))
genes <- hm_genes[, -1]
# The frequency distribution of the missing cases per variable can be obtained
# as:
init <- mice(genes, maxit = 0)
View(genes)
lab <- hm_norm%>%
filter(origin== "Lab")
gene_correlation <- sapply(lab[,Genes_v], as.numeric)
# draw correlation between the genes
gene_correlation <- as.matrix(cor(gene_correlation,
use="pairwise.complete.obs"))
# matrix of the p-value of the correlatio
p.mat <- cor.mtest(gene_correlation)
corrplot(gene_correlation,
method = "circle",  #method of the plot, "color" would show colour gradient
tl.col = "black", tl.srt=45, #colour of labels and rotation
col = brewer.pal(n = 8, name ="RdYlBu"), #colour of matrix
order="hclust", #hclust reordering
p.mat = p.mat, sig.level = 0.01, insig = "blank",
addCoef.col = 'black',
number.cex=0.5,
title = "Lab")
#Add significance level to the correlogram
#remove the values that are insignificant
knitr::opts_chunk$set(echo = TRUE)
library(mice)
library(stringr)
library(gridExtra)
library(dplyr)
library(tidyverse)
library(tidyr)
library(janitor)
library(visdat)
library(corrplot)
library(RColorBrewer)
library(ggplot2)
library(VIM)
#Lab genes
# The measurements of IL.12 and IRG6 are done with an other assay and will
#ignore for now
Genes_v   <- c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF") #"IL.12", "IRG6")
hm <- read.csv("Data/Data_output/1.MICE_cleaned_data.csv")
hm$Mouse_ID <- str_replace(hm$Mouse_ID, "_", "")
field <- hm %>%
dplyr::filter(origin == "Field")
# select the genes, the mouse identifier and the house keeping gene
gmf <- field[, c("Mouse_ID", Genes_v, "GAPDH")]
# Remove columns with only NA values
gmf <- gmf %>% select_if(~!all(is.na(.)))
#remove rows with only nas
gmf <- gmf[!apply(is.na(gmf[-1]), 1, all), ]
gf <- gmf[,-1]
##select same rows in the first table
field <- field %>%
filter(Mouse_ID %in% gmf$Mouse_ID)
###############lab
#select the genes and lab mice
lab <- hm %>%
dplyr::filter(origin == "Lab", Position == "mLN") %>%
group_by(Mouse_ID, infection) %>%
filter(dpi == max_dpi)
# select the genes, the mouse identifier and the house keeping gene
gml <- lab[, c("Mouse_ID", Genes_v, "PPIB")]
gml <- unique(gml)
# Remove columns with only NA values
gml <- gml %>% select_if(~!all(is.na(.)))
#remove rows with only nas
gml <- gml[!apply(is.na(gml[-1]), 1, all), ]
gl <- gml[,-1]
##select same rows in the first table
lab <- lab %>%
filter(Mouse_ID %in% gml$Mouse_ID)
# looking at patterns of nas)
#pattern_na <-as.data.frame(md.pattern(field_genes))
#field
sapply(gmf, function(x) sum(is.na(x)))
#lab
sapply(gml, function(x) sum(is.na(x)))
#remove duplicates
lab_prim <- lab %>%
filter(death == "primary")
lab_chal <- lab %>%
filter(death == "challenge", infection == "challenge")
lab <- rbind(lab_prim, lab_chal)
rm(lab_prim, lab_chal)
hm <- rbind(lab, field)
gene_correlation <- lab %>%
filter(infection == "challenge", dpi == max_dpi) %>%
ungroup() %>%
dplyr::select(all_of(Genes_v))
# draw correlation between the genes
gene_correlation <- as.matrix(cor(gene_correlation,
use="pairwise.complete.obs"))
# load the function to calculate the p value for correlations
source("R/Functions/p_value_for_correlations.R")
# matrix of the p-value of the correlatio
p.mat <- cor.mtest(gene_correlation)
corrplot(gene_correlation,
method = "circle",  #method of the plot, "color" would show colour gradient
tl.col = "black", tl.srt=45, #colour of labels and rotation
col = brewer.pal(n = 8, name ="RdYlBu"), #colour of matrix
order="hclust", #hclust reordering
p.mat = p.mat, sig.level = 0.01, insig = "blank",
addCoef.col = 'black',
number.cex=0.5,
title = "Lab")
#Add significance level to the correlogram
#remove the values that are insignificant
hm_genes <- hm[,c("Mouse_ID", Genes_v)]
#pattern_na <-as.data.frame(md.pattern(field_genes))
sapply(hm_genes, function(x) sum(is.na(x)))
genes <- hm_genes[, -1]
# The frequency distribution of the missing cases per variable can be obtained
# as:
init <- mice(genes, maxit = 0)
#we want to impute only the specific variables
meth <- init$method
# removing il 10
genes <- genes[, !(names(genes) %in% "IL.10")]
# removed(because of large missing numbers)
# m=5 refers to the number of imputed datasets. Five is the default value.
igf <- mice(genes, m = 5, seed = 500) # method = meth,
summary(igf)
## igf$imp$IFNy
#Now we can get back the completed dataset using the complete()
complete_genes <- complete(igf, 1)
# remove IL.10 from the selection vector
Genes_v <- Genes_v[!Genes_v == "IL.10"]
# join the imputed genes
Mouse_ID <- hm_genes$Mouse_ID
result <- data.frame(Mouse_ID, complete_genes)
hm_imp <- hm %>%
dplyr::select(-all_of(Genes_v)) %>%
left_join(result, by = "Mouse_ID")
lab <- hm_imp %>%
filter(origin== "Lab")
gene_correlation <- lab[,Genes_v]
# draw correlation between the genes
gene_correlation <- as.matrix(cor(gene_correlation,
use="pairwise.complete.obs"))
# matrix of the p-value of the correlatio
p.mat <- cor.mtest(gene_correlation)
corrplot(gene_correlation,
method = "circle",  #method of the plot, "color" would show colour gradient
tl.col = "black", tl.srt=45, #colour of labels and rotation
col = brewer.pal(n = 8, name ="RdYlBu"), #colour of matrix
order="hclust", #hclust reordering
p.mat = p.mat, sig.level = 0.01, insig = "blank",
addCoef.col = 'black',
number.cex=0.5,
title = "Lab")
#Add significance level to the correlogram
#remove the values that are insignificant
#Î”Ct (sample) = Ct(reference gene) - Ct(gene of interest)
calculate_delta_ct <- function(df, HKG) {
# Extract the column of the housekeeping gene
reference_gene <- df[[HKG]]
Mouse_ID <- df$Mouse_ID
g <- df[, colnames(df) %in% Genes_v]
delta_ct <- sapply(g, function(gene) reference_gene - gene)
delta_ct <- as.data.frame(cbind(Mouse_ID, delta_ct))
return(delta_ct)
}
# more positive = higher expression
# Use the function
norm_field <- calculate_delta_ct(field, "GAPDH")
norm_lab <- calculate_delta_ct(lab, "PPIB")
norm_g <- rbind(norm_field, norm_lab)
hm_norm <- hm %>%
dplyr::select(-all_of(Genes_v)) %>%
left_join(norm_g, by = "Mouse_ID")
rm(result, norm_g)
lab <- hm_norm%>%
filter(origin== "Lab")
gene_correlation <- sapply(lab[,Genes_v], as.numeric)
# draw correlation between the genes
gene_correlation <- as.matrix(cor(gene_correlation,
use="pairwise.complete.obs"))
# matrix of the p-value of the correlatio
p.mat <- cor.mtest(gene_correlation)
corrplot(gene_correlation,
method = "circle",  #method of the plot, "color" would show colour gradient
tl.col = "black", tl.srt=45, #colour of labels and rotation
col = brewer.pal(n = 8, name ="RdYlBu"), #colour of matrix
order="hclust", #hclust reordering
p.mat = p.mat, sig.level = 0.01, insig = "blank",
addCoef.col = 'black',
number.cex=0.5,
title = "Lab")
#Add significance level to the correlogram
#remove the values that are insignificant
hm_genes <- hm_norm[,c("Mouse_ID", Genes_v)]
#pattern_na <-as.data.frame(md.pattern(field_genes))
sapply(hm_genes, function(x) sum(is.na(x)))
genes <- hm_genes[, -1]
# The frequency distribution of the missing cases per variable can be obtained
# as:
init <- mice(genes, maxit = 0)
mice:::find.collinear(genes)
View(genes)
hm_genes <- hm_norm[,c("Mouse_ID", Genes_v)]
#pattern_na <-as.data.frame(md.pattern(field_genes))
sapply(hm_genes, function(x) sum(is.na(x)))
genes <- hm_genes[, -1]
# The frequency distribution of the missing cases per variable can be obtained
# as:
init <- mice(genes, maxit = 0)
max(gene_correlation)
max(gene_correlation < 1)
max(gene_correlation[gene_correlation < 1], na.rm = TRUE)
# removed(because of large missing numbers)
# m=5 refers to the number of imputed datasets. Five is the default value.
igf <- mice(genes, m = 5, seed = 500, threshold = .9999) # method = meth,
# removed(because of large missing numbers)
# m=5 refers to the number of imputed datasets. Five is the default value.
igf <- mice(genes, m = 5, seed = 500, threshold = .9999, max.cor = .9999) # method = meth,
# removed(because of large missing numbers)
# m=5 refers to the number of imputed datasets. Five is the default value.
igf <- mice(genes, m = 5, seed = 500, threshold = .9999, max.cor = .9999, remove.collinear = F) # method = meth,
# removed(because of large missing numbers)
# m=5 refers to the number of imputed datasets. Five is the default value.
igf <- mice(genes, m = 5, seed = 500, maxcor= 0.999) # method = meth,
init <- mice(genes, maxit = 0, treshold = 1)
View(gene_correlation)
init <- mice(genes, maxit = 0,  threshold = 1) # multicollinearity threshold
# removed(because of large missing numbers)
# m=5 refers to the number of imputed datasets. Five is the default value.
igf <- mice(genes, m = 5, seed = 500,  threshold = 1) # multicollinearity threshold
# removed(because of large missing numbers)
# m=5 refers to the number of imputed datasets. Five is the default value.
igf <- mice(genes, m = 5, seed = 500,  threshold = 1) # multicollinearity threshold
# The frequency distribution of the missing cases per variable can be obtained
# as:
init <- mice(genes, maxit = 0)
# Load the necessary library
library(car)
# Calculate VIF for each variable
vif_values <- vif(lm(FORMULA, data = genes))
# Load the necessary library
library(car)
# Calculate VIF for each variable
vif_values <- vif(lm(FORMULA, data = genes))
# Identify variables with high VIF values and remove them
genes <- genes[, !(names(genes) %in% names(vif_values[vif_values > THRESHOLD]))]
# Calculate VIF for each variable
vif_values <- vif(lm(FORMULA, data = genes))
# Calculate VIF for each variable in the model with all variables as predictors
vif_values <- vif(lm(~ ., data = genes))
# Check the dimensions of your data
dim(genes)
# Identify and remove constant columns
genes <- genes[, sapply(genes, function(x) length(unique(x)) > 1)]
# Example of dimensionality reduction using PCA
pca_result <- prcomp(genes, center = TRUE, scale. = TRUE)
# Example of dimensionality reduction using PCA
pca_result <- prcomp(genes, center = TRUE, scale. = TRUE)
genes <- sapplygenes, as.numeric)
genes <- sapply(genes, as.numeric)
# Example of dimensionality reduction using PCA
pca_result <- prcomp(genes, center = TRUE, scale. = TRUE)
max(gene_correlation[gene_correlation <0.999], na.rm = TRUE)
View(gene_correlation)
max(gene_correlation[gene_correlation <0.999], na.rm = TRUE)
max(gene_correlation[gene_correlation < 1], na.rm = TRUE)
gene_correlation_2 <- gene_correlation[gene_correlation < 0.999]
View(gene_correlation)
init <- mice(genes, maxit = 0,  threshold = 1) # multicollinearity threshold
init <- mice(genes, maxit = 0,  threshold = 0.999) # multicollinearity threshold
#we want to impute only the specific variables
meth <- init$method
# removed(because of large missing numbers)
# m=5 refers to the number of imputed datasets. Five is the default value.
igf <- mice(genes, m = 5, seed = 500,  threshold = 1) # multicollinearity threshold
knitr::opts_chunk$set(echo = TRUE)
library(mice)
library(stringr)
library(gridExtra)
library(dplyr)
library(tidyverse)
library(tidyr)
library(janitor)
library(visdat)
library(corrplot)
library(RColorBrewer)
library(ggplot2)
library(VIM)
#Lab genes
# The measurements of IL.12 and IRG6 are done with an other assay and will
#ignore for now
Genes_v   <- c("IFNy", "CXCR3", "IL.6", "IL.13", "IL.10",
"IL1RN","CASP1", "CXCL9", "IDO1", "IRGM1", "MPO",
"MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1",
"TICAM1", "TNF") #"IL.12", "IRG6")
hm <- read.csv("Data/Data_output/1.MICE_cleaned_data.csv")
hm$Mouse_ID <- str_replace(hm$Mouse_ID, "_", "")
field <- hm %>%
dplyr::filter(origin == "Field")
# select the genes, the mouse identifier and the house keeping gene
gmf <- field[, c("Mouse_ID", Genes_v, "GAPDH")]
# Remove columns with only NA values
gmf <- gmf %>% select_if(~!all(is.na(.)))
#remove rows with only nas
gmf <- gmf[!apply(is.na(gmf[-1]), 1, all), ]
gf <- gmf[,-1]
##select same rows in the first table
field <- field %>%
filter(Mouse_ID %in% gmf$Mouse_ID)
###############lab
#select the genes and lab mice
lab <- hm %>%
dplyr::filter(origin == "Lab", Position == "mLN") %>%
group_by(Mouse_ID, infection) %>%
filter(dpi == max_dpi)
# select the genes, the mouse identifier and the house keeping gene
gml <- lab[, c("Mouse_ID", Genes_v, "PPIB")]
gml <- unique(gml)
# Remove columns with only NA values
gml <- gml %>% select_if(~!all(is.na(.)))
#remove rows with only nas
gml <- gml[!apply(is.na(gml[-1]), 1, all), ]
gl <- gml[,-1]
##select same rows in the first table
lab <- lab %>%
filter(Mouse_ID %in% gml$Mouse_ID)
# looking at patterns of nas)
#pattern_na <-as.data.frame(md.pattern(field_genes))
#field
sapply(gmf, function(x) sum(is.na(x)))
#lab
sapply(gml, function(x) sum(is.na(x)))
#remove duplicates
lab_prim <- lab %>%
filter(death == "primary")
lab_chal <- lab %>%
filter(death == "challenge", infection == "challenge")
lab <- rbind(lab_prim, lab_chal)
rm(lab_prim, lab_chal)
hm <- rbind(lab, field)
gene_correlation <- lab %>%
filter(infection == "challenge", dpi == max_dpi) %>%
ungroup() %>%
dplyr::select(all_of(Genes_v))
# draw correlation between the genes
gene_correlation <- as.matrix(cor(gene_correlation,
use="pairwise.complete.obs"))
# load the function to calculate the p value for correlations
source("R/Functions/p_value_for_correlations.R")
# matrix of the p-value of the correlatio
p.mat <- cor.mtest(gene_correlation)
corrplot(gene_correlation,
method = "circle",  #method of the plot, "color" would show colour gradient
tl.col = "black", tl.srt=45, #colour of labels and rotation
col = brewer.pal(n = 8, name ="RdYlBu"), #colour of matrix
order="hclust", #hclust reordering
p.mat = p.mat, sig.level = 0.01, insig = "blank",
addCoef.col = 'black',
number.cex=0.5,
title = "Lab")
#Add significance level to the correlogram
#remove the values that are insignificant
hm_genes <- hm[,c("Mouse_ID", Genes_v)]
#pattern_na <-as.data.frame(md.pattern(field_genes))
sapply(hm_genes, function(x) sum(is.na(x)))
genes <- hm_genes[, -1]
# The frequency distribution of the missing cases per variable can be obtained
# as:
init <- mice(genes, maxit = 0)
#we want to impute only the specific variables
meth <- init$method
# removing il 10
genes <- genes[, !(names(genes) %in% "IL.10")]
# removed(because of large missing numbers)
# m=5 refers to the number of imputed datasets. Five is the default value.
igf <- mice(genes, m = 5, seed = 500) # method = meth,
summary(igf)
## igf$imp$IFNy
#Now we can get back the completed dataset using the complete()
complete_genes <- complete(igf, 1)
# remove IL.10 from the selection vector
Genes_v <- Genes_v[!Genes_v == "IL.10"]
# join the imputed genes
Mouse_ID <- hm_genes$Mouse_ID
result <- data.frame(Mouse_ID, complete_genes)
hm_imp <- hm %>%
dplyr::select(-all_of(Genes_v)) %>%
left_join(result, by = "Mouse_ID")
lab <- hm_imp %>%
filter(origin== "Lab")
gene_correlation <- lab[,Genes_v]
# draw correlation between the genes
gene_correlation <- as.matrix(cor(gene_correlation,
use="pairwise.complete.obs"))
# matrix of the p-value of the correlatio
p.mat <- cor.mtest(gene_correlation)
corrplot(gene_correlation,
method = "circle",  #method of the plot, "color" would show colour gradient
tl.col = "black", tl.srt=45, #colour of labels and rotation
col = brewer.pal(n = 8, name ="RdYlBu"), #colour of matrix
order="hclust", #hclust reordering
p.mat = p.mat, sig.level = 0.01, insig = "blank",
addCoef.col = 'black',
number.cex=0.5,
title = "Lab")
#Add significance level to the correlogram
#remove the values that are insignificant
#Î”Ct (sample) = Ct(reference gene) - Ct(gene of interest)
calculate_delta_ct <- function(df, HKG) {
# Extract the column of the housekeeping gene
reference_gene <- df[[HKG]]
Mouse_ID <- df$Mouse_ID
g <- df[, colnames(df) %in% Genes_v]
delta_ct <- sapply(g, function(gene) reference_gene - gene)
delta_ct <- as.data.frame(cbind(Mouse_ID, delta_ct))
return(delta_ct)
}
# more positive = higher expression
# Use the function
norm_field <- calculate_delta_ct(field, "GAPDH")
norm_lab <- calculate_delta_ct(lab, "PPIB")
norm_g <- rbind(norm_field, norm_lab)
hm_norm <- hm %>%
dplyr::select(-all_of(Genes_v)) %>%
left_join(norm_g, by = "Mouse_ID")
rm(result, norm_g)
lab <- hm_norm%>%
filter(origin== "Lab")
gene_correlation <- sapply(lab[,Genes_v], as.numeric)
# draw correlation between the genes
gene_correlation <- as.matrix(cor(gene_correlation,
use="pairwise.complete.obs"))
# matrix of the p-value of the correlatio
p.mat <- cor.mtest(gene_correlation)
corrplot(gene_correlation,
method = "circle",  #method of the plot, "color" would show colour gradient
tl.col = "black", tl.srt=45, #colour of labels and rotation
col = brewer.pal(n = 8, name ="RdYlBu"), #colour of matrix
order="hclust", #hclust reordering
p.mat = p.mat, sig.level = 0.01, insig = "blank",
addCoef.col = 'black',
number.cex=0.5,
title = "Lab")
#Add significance level to the correlogram
#remove the values that are insignificant
hm_genes <- hm_norm[,c("Mouse_ID", Genes_v)]
#pattern_na <-as.data.frame(md.pattern(field_genes))
sapply(hm_genes, function(x) sum(is.na(x)))
genes <- hm_genes[, -1]
# The frequency distribution of the missing cases per variable can be obtained
# as:
init <- mice(genes, maxit = 0)
